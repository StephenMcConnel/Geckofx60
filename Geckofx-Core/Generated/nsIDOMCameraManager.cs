// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIDOMCameraManager.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///Select a camera to use. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("64196840-0d03-4b65-a955-790f43a4b810")]
	public interface nsICameraCapabilities
	{
		
		/// <summary>
        ///an array of objects with 'height' and 'width' properties
        ///       supported for the preview stream </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetPreviewSizesAttribute(System.IntPtr jsContext);
		
		/// <summary>
        ///an array of objects with 'height' and 'width' properties
        ///       supported for picture taking </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetPictureSizesAttribute(System.IntPtr jsContext);
		
		/// <summary>
        ///an array of strings, e.g. [ "jpeg", "rgb565" ] </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetFileFormatsAttribute(System.IntPtr jsContext);
		
		/// <summary>
        ///an array of strings, e.g. [ "auto", "fluorescent", etc. ] </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetWhiteBalanceModesAttribute(System.IntPtr jsContext);
		
		/// <summary>
        ///an array of strings, e.g. [ "auto", "night", "beach", etc. ] </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetSceneModesAttribute(System.IntPtr jsContext);
		
		/// <summary>
        ///an array of strings, e.g. [ "normal", "sepia", "mono", etc. ] </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetEffectsAttribute(System.IntPtr jsContext);
		
		/// <summary>
        ///an array of strings, e.g. [ "auto", "off", "on", etc. ] </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetFlashModesAttribute(System.IntPtr jsContext);
		
		/// <summary>
        ///an array of strings, e.g. [ "auto", "fixed", "macro", etc. ] </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetFocusModesAttribute(System.IntPtr jsContext);
		
		/// <summary>
        ///the maximum number of focus areas supported by the camera </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetMaxFocusAreasAttribute(System.IntPtr jsContext);
		
		/// <summary>
        ///the minimum supported exposure compensation value </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetMinExposureCompensationAttribute(System.IntPtr jsContext);
		
		/// <summary>
        ///the maximum supported exposure compensation value </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetMaxExposureCompensationAttribute(System.IntPtr jsContext);
		
		/// <summary>
        ///exposure compensation minimum step-size </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetStepExposureCompensationAttribute(System.IntPtr jsContext);
		
		/// <summary>
        ///the maximum number of metering areas supported by the camera </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetMaxMeteringAreasAttribute(System.IntPtr jsContext);
		
		/// <summary>
        ///an array of doubles, e.g. [ 1.0, 1.2, 1.5, 2.0, 3.0, etc. ],
        ///       or null if zooming is not supported </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetZoomRatiosAttribute(System.IntPtr jsContext);
		
		/// <summary>
        ///an array of objects with 'height' and 'width' properties
        ///       supported for video recording </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetVideoSizesAttribute(System.IntPtr jsContext);
		
		/// <summary>
        ///an object with attributes for each of the supported recorder
        ///       profiles, e.g. recorderProfiles.cif, recorderProfiles.qvga,
        ///       etc. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetRecorderProfilesAttribute(System.IntPtr jsContext);
	}
	
	/// <summary>
    ///These properties affect the actual video recording, e.g.
    ///      {
    ///         rotation: 0,
    ///         maxFileSizeBytes: 1024 * 1024,
    ///         maxVideoLengthMs: 0
    ///      }
    ///   'rotation' is the degrees clockwise to rotate the recorded video; if
    ///   this options is not supported, it will be ignored; if this option is
    ///   missing, the default is 0.
    ///   'maxFileSizeBytes' is the maximum size in bytes to which the recorded
    ///   video file will be allowed to grow.
    ///   'maxVideoLengthMs' is the maximum length in milliseconds to which the
    ///   recorded video will be allowed to grow.
    ///   if either 'maxFileSizeBytes' or 'maxVideoLengthMs' is missing, zero,
    ///   or negative, that limit will be disabled. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0444a687-4bc9-462c-8246-5423f0fe46a4")]
	public interface nsICameraPreviewStreamCallback
	{
		
		/// <summary>
        ///These properties affect the actual video recording, e.g.
        ///      {
        ///         rotation: 0,
        ///         maxFileSizeBytes: 1024 * 1024,
        ///         maxVideoLengthMs: 0
        ///      }
        ///   'rotation' is the degrees clockwise to rotate the recorded video; if
        ///   this options is not supported, it will be ignored; if this option is
        ///   missing, the default is 0.
        ///   'maxFileSizeBytes' is the maximum size in bytes to which the recorded
        ///   video file will be allowed to grow.
        ///   'maxVideoLengthMs' is the maximum length in milliseconds to which the
        ///   recorded video will be allowed to grow.
        ///   if either 'maxFileSizeBytes' or 'maxVideoLengthMs' is missing, zero,
        ///   or negative, that limit will be disabled. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HandleEvent([MarshalAs(UnmanagedType.Interface)] nsIDOMMediaStream stream);
	}
	
	/// <summary>nsICameraAutoFocusCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("6baa4ac7-9c25-4c48-9bb0-5193b38b9b0a")]
	public interface nsICameraAutoFocusCallback
	{
		
		/// <summary>Member HandleEvent </summary>
		/// <param name='success'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HandleEvent([MarshalAs(UnmanagedType.U1)] bool success);
	}
	
	/// <summary>nsICameraTakePictureCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("17af779e-cb6f-4ca5-890c-06468ff82e4f")]
	public interface nsICameraTakePictureCallback
	{
		
		/// <summary>Member HandleEvent </summary>
		/// <param name='picture'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HandleEvent([MarshalAs(UnmanagedType.Interface)] nsIDOMBlob picture);
	}
	
	/// <summary>nsICameraStartRecordingCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("89a762f8-581b-410a-ad86-e2bd2113ad82")]
	public interface nsICameraStartRecordingCallback
	{
		
		/// <summary>Member HandleEvent </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HandleEvent();
	}
	
	/// <summary>nsICameraShutterCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("fb80db71-e315-42f0-9ea9-dd3dd312ed70")]
	public interface nsICameraShutterCallback
	{
		
		/// <summary>Member HandleEvent </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HandleEvent();
	}
	
	/// <summary>nsICameraClosedCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0ef0f01e-ce74-4741-9bba-54376adfb7a2")]
	public interface nsICameraClosedCallback
	{
		
		/// <summary>Member HandleEvent </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HandleEvent();
	}
	
	/// <summary>nsICameraRecorderStateChange </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("550d675a-257d-4713-8b3d-0da53eba68fc")]
	public interface nsICameraRecorderStateChange
	{
		
		/// <summary>Member HandleStateChange </summary>
		/// <param name='newState'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HandleStateChange([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase newState);
	}
	
	/// <summary>nsICameraErrorCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("a302c6c9-3776-4d1d-a395-f4105d47c3d3")]
	public interface nsICameraErrorCallback
	{
		
		/// <summary>Member HandleEvent </summary>
		/// <param name='error'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HandleEvent([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase error);
	}
	
	/// <summary>
    ///attributes here affect the preview, any pictures taken, and/or
    ///    any video recorded by the camera. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("70f45209-b69b-4937-bbac-57d82600e2af")]
	public interface nsICameraControl
	{
		
		/// <summary>
        ///attributes here affect the preview, any pictures taken, and/or
        ///    any video recorded by the camera. </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsICameraCapabilities GetCapabilitiesAttribute();
		
		/// <summary>
        ///one of the vales chosen from capabilities.effects;
        ///       default is "none" </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetEffectAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aEffect);
		
		/// <summary>
        ///one of the vales chosen from capabilities.effects;
        ///       default is "none" </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetEffectAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aEffect);
		
		/// <summary>
        ///one of the values chosen from capabilities.whiteBalanceModes;
        ///       default is "auto" </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetWhiteBalanceModeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aWhiteBalanceMode);
		
		/// <summary>
        ///one of the values chosen from capabilities.whiteBalanceModes;
        ///       default is "auto" </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetWhiteBalanceModeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aWhiteBalanceMode);
		
		/// <summary>
        ///one of the valus chosen from capabilities.sceneModes;
        ///       default is "auto" </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetSceneModeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aSceneMode);
		
		/// <summary>
        ///one of the valus chosen from capabilities.sceneModes;
        ///       default is "auto" </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetSceneModeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aSceneMode);
		
		/// <summary>
        ///one of the values chosen from capabilities.flashModes;
        ///       default is "auto" </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetFlashModeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aFlashMode);
		
		/// <summary>
        ///one of the values chosen from capabilities.flashModes;
        ///       default is "auto" </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetFlashModeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aFlashMode);
		
		/// <summary>
        ///one of the values chosen from capabilities.focusModes;
        ///       default is "auto", if supported, or "fixed" </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetFocusModeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aFocusMode);
		
		/// <summary>
        ///one of the values chosen from capabilities.focusModes;
        ///       default is "auto", if supported, or "fixed" </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetFocusModeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aFocusMode);
		
		/// <summary>
        ///one of the values chosen from capabilities.zoomRatios; other
        ///       values will be rounded to the nearest supported value;
        ///       default is 1.0 </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetZoomAttribute();
		
		/// <summary>
        ///one of the values chosen from capabilities.zoomRatios; other
        ///       values will be rounded to the nearest supported value;
        ///       default is 1.0 </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetZoomAttribute(double aZoom);
		
		/// <summary>
        ///an array of one or more objects that define where the
        ///       camera will perform light metering, each defining the properties:
        ///        {
        ///            top: -1000,
        ///            left: -1000,
        ///            bottom: 1000,
        ///            right: 1000,
        ///            weight: 1000
        ///        }
        ///        'top', 'left', 'bottom', and 'right' all range from -1000 at
        ///        the top-/leftmost of the sensor to 1000 at the bottom-/rightmost
        ///        of the sensor.
        ///        objects missing one or more of these properties will be ignored;
        ///        if the array contains more than capabilities.maxMeteringAreas,
        ///        extra areas will be ignored.
        ///        this attribute can be set to null to allow the camera to determine
        ///        where to perform light metering. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetMeteringAreasAttribute(System.IntPtr jsContext);
		
		/// <summary>
        ///an array of one or more objects that define where the
        ///       camera will perform light metering, each defining the properties:
        ///        {
        ///            top: -1000,
        ///            left: -1000,
        ///            bottom: 1000,
        ///            right: 1000,
        ///            weight: 1000
        ///        }
        ///        'top', 'left', 'bottom', and 'right' all range from -1000 at
        ///        the top-/leftmost of the sensor to 1000 at the bottom-/rightmost
        ///        of the sensor.
        ///        objects missing one or more of these properties will be ignored;
        ///        if the array contains more than capabilities.maxMeteringAreas,
        ///        extra areas will be ignored.
        ///        this attribute can be set to null to allow the camera to determine
        ///        where to perform light metering. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetMeteringAreasAttribute(Gecko.JsVal aMeteringAreas, System.IntPtr jsContext);
		
		/// <summary>
        ///an array of one or more objects that define where the camera will
        ///       perform auto-focusing, with the same definition as meteringAreas.
        ///       if the array contains more than capabilities.maxFocusAreas, extra
        ///       areas will be ignored.
        ///       this attribute can be set to null to allow the camera to determine
        ///       where to focus. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetFocusAreasAttribute(System.IntPtr jsContext);
		
		/// <summary>
        ///an array of one or more objects that define where the camera will
        ///       perform auto-focusing, with the same definition as meteringAreas.
        ///       if the array contains more than capabilities.maxFocusAreas, extra
        ///       areas will be ignored.
        ///       this attribute can be set to null to allow the camera to determine
        ///       where to focus. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetFocusAreasAttribute(Gecko.JsVal aFocusAreas, System.IntPtr jsContext);
		
		/// <summary>
        ///focal length in millimetres </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetFocalLengthAttribute();
		
		/// <summary>
        ///the distances in metres to where the image subject appears to be
        ///       in focus.  'focusDistanceOptimum' is where the subject will appear
        ///       sharpest; the difference between 'focusDistanceFar' and
        ///       'focusDistanceNear' is the image's depth of field.
        ///       'focusDistanceFar' may be infinity. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetFocusDistanceNearAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetFocusDistanceOptimumAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetFocusDistanceFarAttribute();
		
		/// <summary>
        ///'compensation' is optional, and if missing, will
        ///       set the camera to use automatic exposure compensation.
        ///       acceptable values must range from minExposureCompensation
        ///       to maxExposureCompensation in steps of stepExposureCompensation;
        ///       invalid values will be rounded to the nearest valid value. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetExposureCompensation(Gecko.JsVal compensation, System.IntPtr jsContext);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetExposureCompensationAttribute();
		
		/// <summary>
        ///the function to call on the camera's shutter event, to trigger
        ///       a shutter sound and/or a visual shutter indicator. </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsICameraShutterCallback GetOnShutterAttribute();
		
		/// <summary>
        ///the function to call on the camera's shutter event, to trigger
        ///       a shutter sound and/or a visual shutter indicator. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOnShutterAttribute([MarshalAs(UnmanagedType.Interface)] nsICameraShutterCallback aOnShutter);
		
		/// <summary>
        ///the function to call when the camera hardware is closed
        ///       by the underlying framework, e.g. when another app makes a more
        ///       recent call to get the camera. </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsICameraClosedCallback GetOnClosedAttribute();
		
		/// <summary>
        ///the function to call when the camera hardware is closed
        ///       by the underlying framework, e.g. when another app makes a more
        ///       recent call to get the camera. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOnClosedAttribute([MarshalAs(UnmanagedType.Interface)] nsICameraClosedCallback aOnClosed);
		
		/// <summary>
        ///the function to call when the recorder changes state, either because
        ///       the recording process encountered an error, or because one of the
        ///       recording limits (see CameraStartRecordingOptions) was reached. </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsICameraRecorderStateChange GetOnRecorderStateChangeAttribute();
		
		/// <summary>
        ///the function to call when the recorder changes state, either because
        ///       the recording process encountered an error, or because one of the
        ///       recording limits (see CameraStartRecordingOptions) was reached. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOnRecorderStateChangeAttribute([MarshalAs(UnmanagedType.Interface)] nsICameraRecorderStateChange aOnRecorderStateChange);
		
		/// <summary>
        ///tell the camera to attempt to focus the image </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AutoFocus([MarshalAs(UnmanagedType.Interface)] nsICameraAutoFocusCallback onSuccess, [MarshalAs(UnmanagedType.Interface)] nsICameraErrorCallback onError);
		
		/// <summary>
        ///capture an image and return it as a blob to the 'onSuccess' callback;
        ///       if the camera supports it, this may be invoked while the camera is
        ///       already recording video.
        ///       invoking this function will stop the preview stream, which must be
        ///       manually restarted (e.g. by calling .play() on it). </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void TakePicture(Gecko.JsVal aOptions, [MarshalAs(UnmanagedType.Interface)] nsICameraTakePictureCallback onSuccess, [MarshalAs(UnmanagedType.Interface)] nsICameraErrorCallback onError, System.IntPtr jsContext);
		
		/// <summary>
        ///get a media stream to be used as a camera viewfinder in video mode;
        ///       'aOptions' is an CameraRecorderOptions object. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetPreviewStreamVideoMode(Gecko.JsVal aOptions, [MarshalAs(UnmanagedType.Interface)] nsICameraPreviewStreamCallback onSuccess, [MarshalAs(UnmanagedType.Interface)] nsICameraErrorCallback onError, System.IntPtr jsContext);
		
		/// <summary>
        ///start recording video; 'aOptions' is a
        ///       CameraStartRecordingOptions object. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StartRecording(Gecko.JsVal aOptions, [MarshalAs(UnmanagedType.Interface)] nsIDOMDeviceStorage storageArea, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase filename, [MarshalAs(UnmanagedType.Interface)] nsICameraStartRecordingCallback onSuccess, [MarshalAs(UnmanagedType.Interface)] nsICameraErrorCallback onError, System.IntPtr jsContext);
		
		/// <summary>
        ///stop precording video. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StopRecording();
		
		/// <summary>
        ///get a media stream to be used as a camera viewfinder; the options
        ///       define the desired frame size of the preview, chosen from
        ///       capabilities.previewSizes, e.g.:
        ///        {
        ///            height: 640,
        ///            width:  480,
        ///         }
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetPreviewStream(Gecko.JsVal aOptions, [MarshalAs(UnmanagedType.Interface)] nsICameraPreviewStreamCallback onSuccess, [MarshalAs(UnmanagedType.Interface)] nsICameraErrorCallback onError, System.IntPtr jsContext);
		
		/// <summary>
        ///call in or after the takePicture() onSuccess callback to
        ///       resume the camera preview stream. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ResumePreview();
	}
	
	/// <summary>nsICameraGetCameraCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("a267afbc-d91c-413a-8de5-0b94aecffa3e")]
	public interface nsICameraGetCameraCallback
	{
		
		/// <summary>Member HandleEvent </summary>
		/// <param name='camera'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HandleEvent([MarshalAs(UnmanagedType.Interface)] nsICameraControl camera);
	}
	
	/// <summary>nsIDOMCameraManager </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("671ee624-0336-441a-a24e-26b5319f14fe")]
	public interface nsIDOMCameraManager
	{
		
		/// <summary>
        ///get a camera instance; options will be used to specify which
        ///       camera to get from the list returned by getListOfCameras(), e.g.:
        ///        {
        ///            camera: front
        ///        }
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetCamera(Gecko.JsVal aOptions, [MarshalAs(UnmanagedType.Interface)] nsICameraGetCameraCallback onSuccess, [MarshalAs(UnmanagedType.Interface)] nsICameraErrorCallback onError, System.IntPtr jsContext);
		
		/// <summary>
        ///return a JSON array of camera   identifiers, e.g.
        ///        [ "front", "back" ]
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetListOfCameras(System.IntPtr jsContext);
	}
}
