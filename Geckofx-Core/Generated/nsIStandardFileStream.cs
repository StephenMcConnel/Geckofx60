// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIStandardFileStream.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// A stream that allows you to read from a file or stream to a file
    /// using standard file APIs.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ebbbb779-92a3-4b2a-b7cf-6efbe904c453")]
	public interface nsIStandardFileStream
	{
		
		/// <summary>
        /// @param file          file to read from or stream to
        /// @param mode          file open mode (see fopen documentation)
        /// @param flags         flags specifying various behaviors of the class
        /// (see enumerations in the class)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Init([MarshalAs(UnmanagedType.Interface)] nsIFile file, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase mode, int flags);
		
		/// <summary>
        /// Flush all written content held in memory buffers out to disk.
        /// This is the equivalent of fflush()
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FlushBuffers();
	}
	
	/// <summary>nsIStandardFileStreamConsts </summary>
	public class nsIStandardFileStreamConsts
	{
		
		// <summary>
        // If this is set, the file will be opened (i.e., a call to
        // fopen done) only when we do an actual operation on the stream,
        // or more specifically, when one of the following is called:
        // - Seek
        // - Tell
        // - SetEOF
        // - Available
        // - Read
        // - Write
        // - Flush
        // - GetSize
        // - GetLastModified
        // - Sync
        //
        // FLAGS_DEFER_OPEN is useful if we use the stream on a background
        // thread, so that the opening and possible |stat|ing of the file
        // happens there as well.
        //
        // @note Using this flag results in the file not being opened
        // during the call to Init.  This means that any errors that might
        // happen when this flag is not set would happen during the
        // first read.  Also, the file is not locked when Init is called,
        // so it might be deleted before we try to read from it.
        // </summary>
		public const long FLAGS_DEFER_OPEN = 1<<0;
	}
}
