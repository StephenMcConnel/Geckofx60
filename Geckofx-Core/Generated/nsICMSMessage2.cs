// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsICMSMessage2.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// This interface is currently not marked scriptable,
    /// because its verification functions are meant to look like those
    /// in nsICMSMessage. At the time the ptr type is eliminated in both
    /// interfaces, both should be made scriptable.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("a99a3203-39e3-45e1-909c-175b0e471c2b")]
	public interface nsICMSMessage2
	{
		
		/// <summary>
        /// Async version of nsICMSMessage::VerifySignature.
        /// Code will be executed on a background thread and
        /// availability of results will be notified using a
        /// call to nsISMimeVerificationListener.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AsyncVerifySignature([MarshalAs(UnmanagedType.Interface)] nsISMimeVerificationListener listener);
		
		/// <summary>
        /// Async version of nsICMSMessage::VerifyDetachedSignature.
        /// Code will be executed on a background thread and
        /// availability of results will be notified using a
        /// call to nsISMimeVerificationListener.
        ///
        /// We are using "native unsigned char" ptr, because the function
        /// signatures of this one and nsICMSMessage::verifyDetachedSignature
        /// should be the identical. Cleaning up nsICMSMessages needs to be
        /// postponed, because this async version is needed on MOZILLA_1_8_BRANCH.
        ///
        /// Once both interfaces get cleaned up, the function signature should
        /// look like:
        /// [array, length_is(aDigestDataLen)]
        /// in octet aDigestData,
        /// in unsigned long aDigestDataLen);
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AsyncVerifyDetachedSignature([MarshalAs(UnmanagedType.Interface)] nsISMimeVerificationListener listener, System.IntPtr aDigestData, uint aDigestDataLen);
	}
	
	/// <summary>nsISMimeVerificationListener </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("56310af6-dffc-48b4-abca-85eae4059064")]
	public interface nsISMimeVerificationListener
	{
		
		/// <summary>
        /// Notify that results are ready, that have been requested
        /// using nsICMSMessage2::asyncVerify[Detached]Signature()
        ///
        /// verificationResultCode matches synchronous result code from
        /// nsICMSMessage::verify[Detached]Signature
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Notify([MarshalAs(UnmanagedType.Interface)] nsICMSMessage2 verifiedMessage, int verificationResultCode);
	}
}
