// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file b2g.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this file,
    /// You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("3615a616-571d-4194-bf54-ccf546067b14")]
	public interface nsIB2GCameraContent
	{
		
		/// <summary>
        ///temporary solution, waiting for getUserMedia </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetCameraURI(Gecko.JsVal options, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase retval);
	}
	
	/// <summary>nsIB2GKeyboard </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("94233b76-3987-4fc0-8924-7596846f9bd3")]
	public interface nsIB2GKeyboard
	{
		
		/// <summary>Member SendKey </summary>
		/// <param name='keyCode'> </param>
		/// <param name='charCode'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendKey(int keyCode, int charCode);
		
		/// <summary>
        /// selection the previous element will be unselected.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetSelectedOption(Gecko.JsVal index);
		
		/// <summary>
        /// selection, then the last index specified in indexes will be selected.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetSelectedOptions(Gecko.JsVal indexes);
		
		/// <summary>
        /// Forms Validation), the value will simply be ignored by the element.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetValue(Gecko.JsVal value);
		
		/// <summary>Member RemoveFocus </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveFocus();
		
		/// <summary>Member GetOnfocuschangeAttribute </summary>
		/// <returns>A nsIDOMEventListener</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMEventListener GetOnfocuschangeAttribute();
		
		/// <summary>Member SetOnfocuschangeAttribute </summary>
		/// <param name='aOnfocuschange'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOnfocuschangeAttribute([MarshalAs(UnmanagedType.Interface)] nsIDOMEventListener aOnfocuschange);
		
		/// <summary>
        /// composing text length
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMEventListener GetOnselectionchangeAttribute();
		
		/// <summary>
        /// composing text length
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOnselectionchangeAttribute([MarshalAs(UnmanagedType.Interface)] nsIDOMEventListener aOnselectionchange);
		
		/// <summary>
        /// The start position of the selection.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetSelectionStartAttribute();
		
		/// <summary>
        /// The stop position of the selection.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetSelectionEndAttribute();
		
		/// <summary>
        /// Set the selection range of the the editable text.
        ///
        /// @param start The beginning of the selected text.
        /// @param end The end of the selected text.
        ///
        /// Note that the start position should be less or equal to the end position.
        /// To move the cursor, set the start and end position to the same value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetSelectionRange(int start, int end);
	}
}
