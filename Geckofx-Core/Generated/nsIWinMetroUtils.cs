// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIWinMetroUtils.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Integration with the "Metro"/"Modern" UI environment in Windows 8.
    ///
    /// Note: browser/metro/base/content/browser-scripts.js contains a stub
    /// implementation of this interface for non-Windows systems, for testing and
    /// development purposes only.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ac813696-3b0a-4259-bce1-1d078021ebbe")]
	public interface nsIWinMetroUtils
	{
		
		/// <summary>
        /// Determines the current snapped state.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetSnappedStateAttribute();
		
		/// <summary>
        /// Determine if the current browser is running in the metro immersive
        /// environment.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetImmersiveAttribute();
		
		/// <summary>
        /// Determine if the user prefers left handed or right handed input.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetHandPreferenceAttribute();
		
		/// <summary>
        /// Determine the activation URI
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetActivationURIAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aActivationURI);
		
		/// <summary>
        /// Attempts to unsnap the application from snapped state to filled state
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Unsnap();
		
		/// <summary>
        /// Show the settings flyout
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ShowSettingsFlyout();
		
		/// <summary>
        /// Launches the specified application with the specified arguments and
        /// switches to Desktop mode if in metro mode.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LaunchInDesktop([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aPath, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aArguments);
		
		/// <summary>
        /// Pins a new tile to the Windows 8 start screen.
        ///
        /// @param aTileID         An ID which can later be used to remove the tile
        /// @param aShortName      A short name for the tile
        /// @param aDiplayName     The name that will be displayed on the tile
        /// @param aActivationArgs The arguments to pass to the browser upon
        /// activation of the tile
        /// @param aTileImage An image for the normal tile view
        /// @param aSmallTileImage An image for the small tile view
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PinTileAsync([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aTileID, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aShortName, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aDisplayName, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aActivationArgs, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aTileImage, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aSmallTileImage);
		
		/// <summary>
        /// Unpins a tile from the Windows 8 start screen.
        ///
        /// @param aTileID An existing ID which was previously pinned
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnpinTileAsync([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aTileID);
		
		/// <summary>
        /// Determines if a tile is pinned to the Windows 8 start screen.
        ///
        /// @param aTileID An ID which may have been pinned with pinTileAsync
        /// @return true if the tile is pinned
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsTilePinned([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aTileID);
		
		/// <summary>
        /// Stores the sync info securely
        ///
        /// @param aEmail The sync account email
        /// @param aPassword The sync account password
        /// @param aKey The sync account key
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StoreSyncInfo([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aEmail, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aPassword, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aKey);
		
		/// <summary>
        /// Loads the sync info
        ///
        /// @param aEmail The sync account email
        /// @param aPassword The sync account password
        /// @param aKey The sync account key
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LoadSyncInfo([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aEmail, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aPassword, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aKey);
		
		/// <summary>
        /// Clears the stored sync info if any.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ClearSyncInfo();
		
		/// <summary>
        /// Soft keyboard attributes. Used in unison with shown/hidden observer
        /// events sent via FrameworkView.
        ///
        /// keyboardVisible - returns true if the soft keyboard is currently
        /// displayed, false otherwise.
        /// keyboardX, keyboardY, keyboardWidth, keyboardHeight - occlude rect
        /// of the keyboard when displayed in device independent pixels.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetKeyboardVisibleAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetKeyboardXAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetKeyboardYAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetKeyboardWidthAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetKeyboardHeightAttribute();
		
		/// <summary>
        /// Settings panel links. addSettingsPanelEntry adds an entry to
        /// the settings flyout panel that the user can invoke.
        ///
        /// @param aChromePanelId panel id invoked via nsIBrowserDOMWindow's
        /// ShowPanel api. Example: 'prefs-container'
        /// @return a unique identifier that will be passed as "data" in the
        /// "metro-settings-entry-selected" notification when the entry is clicked
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint AddSettingsPanelEntry([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aLabel);
		
		/// <summary>
        /// Change the value of the "switch primary and secondary buttons" preference.
        /// See the Windows SwapMouseButton API docs for details.
        /// Included here for use in automated tests (see bug 839460).
        ///
        /// @param aSwap true to enable the preference, false to disable it.
        /// @return original value of the preference.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool SwapMouseButton([MarshalAs(UnmanagedType.U1)] bool aSwap);
	}
	
	/// <summary>nsIWinMetroUtilsConsts </summary>
	public class nsIWinMetroUtilsConsts
	{
		
		// <summary>
        //Fullscreen landscape orientation </summary>
		public const long fullScreenLandscape = 0;
		
		// <summary>
        //Larger snapped state </summary>
		public const long filled = 1;
		
		// <summary>
        //Smaller snapped state </summary>
		public const long snapped = 2;
		
		// <summary>
        //Fullscreen portrait orientation </summary>
		public const long fullScreenPortrait = 3;
		
		// <summary>
        //return constants for the handPreference property </summary>
		public const long handPreferenceLeft = 0;
		
		// 
		public const long handPreferenceRight = 1;
	}
}
