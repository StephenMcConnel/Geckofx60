// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIRadioInterfaceLayer.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("c14c71b8-afba-403b-8320-94593de9380f")]
	public interface nsIRILTelephonyCallback
	{
		
		/// <summary>
        /// Notified when a telephony call changes state.
        ///
        /// @param callIndex
        /// Call identifier assigned by the RIL.
        /// @param callState
        /// One of the nsIRadioInterfaceLayer::CALL_STATE_* values.
        /// @param number
        /// Number of the other party.
        /// @param isActive
        /// Indicates whether this call is the currently active one.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CallStateChanged(uint callIndex, ushort callState, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase number, [MarshalAs(UnmanagedType.U1)] bool isActive);
		
		/// <summary>
        /// Called when nsIRILContentHelper is asked to enumerate the current
        /// telephony call state (nsIRILContentHelper::enumerateCalls). This is
        /// called once per call that is currently managed by the RIL.
        ///
        /// @param callIndex
        /// Call identifier assigned by the RIL.
        /// @param callState
        /// One of the nsIRadioInterfaceLayer::CALL_STATE_* values.
        /// @param number
        /// Number of the other party.
        /// @param isActive
        /// Indicates whether this call is the active one.
        ///
        /// @return true to continue enumeration or false to cancel.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool EnumerateCallState(uint callIndex, ushort callState, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase number, [MarshalAs(UnmanagedType.U1)] bool isActive);
		
		/// <summary>
        /// Called when RIL error occurs.
        ///
        /// @param callIndex
        /// Call identifier assigned by the RIL. -1 if no connection
        /// @param error
        /// Error from RIL.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyError(int callIndex, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase error);
	}
	
	/// <summary>nsIRILDataCallInfo </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8a711703-1ee5-4675-9d9a-0b188e944cfe")]
	public interface nsIRILDataCallInfo
	{
		
		/// <summary>
        /// Current data call state, one of the
        /// nsINetworkInterface::NETWORK_STATE_* constants.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetStateAttribute();
		
		/// <summary>Member GetCidAttribute </summary>
		/// <param name='aCid'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetCidAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aCid);
		
		/// <summary>Member GetApnAttribute </summary>
		/// <param name='aApn'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetApnAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aApn);
		
		/// <summary>Member GetIfnameAttribute </summary>
		/// <param name='aIfname'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetIfnameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aIfname);
	}
	
	/// <summary>nsIRILDataCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("5bcac053-c245-46f0-bb45-d0039bfb89f5")]
	public interface nsIRILDataCallback
	{
		
		/// <summary>
        /// Notified when a data call changes state.
        ///
        /// @param dataCall
        /// A nsIRILDataCallInfo object.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DataCallStateChanged([MarshalAs(UnmanagedType.Interface)] nsIRILDataCallInfo dataCall);
		
		/// <summary>
        /// Called when nsIRadioInterfaceLayer is asked to enumerate the current
        /// data call state.
        ///
        /// @param datacalls
        /// Array of nsIRILDataCallInfo objects.
        /// @param length
        /// Lenght of the aforementioned array.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ReceiveDataCallList([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] nsIRILDataCallInfo[] dataCalls, uint length);
	}
	
	/// <summary>nsIRILContactCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("2bc2f51a-78be-4c0e-95dd-55a3ce2ded40")]
	public interface nsIRILContactCallback
	{
		
		/// <summary>
        /// Called when nsIRadioInterfaceLayer is asked to provide ICC contacts.
        ///
        /// @param type
        /// Type of the dialling number, i.e. ADN, FDN.
        /// @param contacts
        /// Array of the ICC contacts of the specified type.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ReceiveContactsList([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase type, Gecko.JsVal contacts);
	}
	
	/// <summary>
    /// Helper that runs in the content process and exposes information
    /// to the DOM.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("2f8b0929-2ecf-498c-bfa7-42690509696e")]
	public interface nsIRILContentHelper : nsIMobileConnectionProvider
	{
		
		/// <summary>
        /// XPCOM component (in the content process) that provides the mobile
        /// network information.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetCardStateAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aCardState);
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMMozMobileConnectionInfo GetVoiceConnectionInfoAttribute();
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMMozMobileConnectionInfo GetDataConnectionInfoAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetNetworkSelectionModeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aNetworkSelectionMode);
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMDOMRequest GetNetworks([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window);
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMDOMRequest SelectNetwork([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window, [MarshalAs(UnmanagedType.Interface)] nsIDOMMozMobileNetworkInfo network);
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMDOMRequest SelectNetworkAutomatically([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window);
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMDOMRequest GetCardLock([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase lockType);
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMDOMRequest UnlockCardLock([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window, Gecko.JsVal info);
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMDOMRequest SetCardLock([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window, Gecko.JsVal info);
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMDOMRequest SendUSSD([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase ussd);
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMDOMRequest CancelUSSD([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window);
		
		/// <summary>
        /// Helper that runs in the content process and exposes information
        /// to the DOM.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RegisterTelephonyCallback([MarshalAs(UnmanagedType.Interface)] nsIRILTelephonyCallback callback);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnregisterTelephonyCallback([MarshalAs(UnmanagedType.Interface)] nsIRILTelephonyCallback callback);
		
		/// <summary>
        /// Will continue calling callback.enumerateCallState until the callback
        /// returns false.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EnumerateCalls([MarshalAs(UnmanagedType.Interface)] nsIRILTelephonyCallback callback);
		
		/// <summary>
        /// Functionality for making and managing phone calls.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Dial([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase number);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HangUp(uint callIndex);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StartTone([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase dtmfChar);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StopTone();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AnswerCall(uint callIndex);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RejectCall(uint callIndex);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HoldCall(uint callIndex);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ResumeCall(uint callIndex);
		
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetMicrophoneMutedAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetMicrophoneMutedAttribute([MarshalAs(UnmanagedType.U1)] bool aMicrophoneMuted);
		
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetSpeakerEnabledAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetSpeakerEnabledAttribute([MarshalAs(UnmanagedType.U1)] bool aSpeakerEnabled);
	}
	
	/// <summary>nsIICCRecords </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("fd9e8b38-b839-4d56-8482-3bf1f5c8f2ee")]
	public interface nsIICCRecords
	{
		
		/// <summary>
        /// Mobile Subscriber ISDN Number
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetMsisdnAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aMsisdn);
		
		/// <summary>
        /// Administrative Data
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetAdAttribute();
		
		/// <summary>
        /// International Mobile Subscriber Identity
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetImsiAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aImsi);
		
		/// <summary>
        /// Mobile Country Code
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetMccAttribute();
		
		/// <summary>
        /// Mobile Network Code
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetMncAttribute();
		
		/// <summary>
        /// USIM Service Table
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetUstAttribute();
		
		/// <summary>
        /// Abbreviated dialling numbers
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetAdnAttribute();
		
		/// <summary>
        /// Fixed Dialling Numbers
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetFdnAttribute();
	}
	
	/// <summary>nsICellLocation </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("1b47459d-d0bc-4e91-8509-cc106054b9ee")]
	public interface nsICellLocation
	{
		
		/// <summary>
        /// Location Area Code
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetLacAttribute();
		
		/// <summary>
        /// Cell Identity
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetCidAttribute();
	}
	
	/// <summary>nsIRilContext </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("a6f6977e-f4ee-42b4-ae79-798c8c47c360")]
	public interface nsIRilContext
	{
		
		/// <summary>Member GetRadioStateAttribute </summary>
		/// <param name='aRadioState'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetRadioStateAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aRadioState);
		
		/// <summary>Member GetCardStateAttribute </summary>
		/// <param name='aCardState'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetCardStateAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aCardState);
		
		/// <summary>Member GetIccAttribute </summary>
		/// <returns>A nsIICCRecords</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIICCRecords GetIccAttribute();
		
		/// <summary>Member GetCellAttribute </summary>
		/// <returns>A nsICellLocation</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsICellLocation GetCellAttribute();
		
		/// <summary>Member GetVoiceAttribute </summary>
		/// <returns>A nsIDOMMozMobileConnectionInfo</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMMozMobileConnectionInfo GetVoiceAttribute();
		
		/// <summary>Member GetDataAttribute </summary>
		/// <returns>A nsIDOMMozMobileConnectionInfo</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMMozMobileConnectionInfo GetDataAttribute();
	}
	
	/// <summary>nsIRadioInterfaceLayer </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8b649965-6687-46a8-88fa-a5495ce90735")]
	public interface nsIRadioInterfaceLayer
	{
		
		/// <summary>
        /// Activates or deactivates radio power.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetRadioEnabled([MarshalAs(UnmanagedType.U1)] bool value);
		
		/// <summary>Member GetRilContextAttribute </summary>
		/// <returns>A nsIRilContext</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIRilContext GetRilContextAttribute();
		
		/// <summary>
        /// PDP APIs
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetupDataCall(int radioTech, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase apn, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase user, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase passwd, int chappap, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase pdptype);
		
		/// <summary>Member DeactivateDataCall </summary>
		/// <param name='cid'> </param>
		/// <param name='reason'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeactivateDataCall([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase cid, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase reason);
		
		/// <summary>Member GetDataCallList </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetDataCallList();
		
		/// <summary>Member RegisterDataCallCallback </summary>
		/// <param name='callback'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RegisterDataCallCallback([MarshalAs(UnmanagedType.Interface)] nsIRILDataCallback callback);
		
		/// <summary>Member UnregisterDataCallCallback </summary>
		/// <param name='callback'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnregisterDataCallCallback([MarshalAs(UnmanagedType.Interface)] nsIRILDataCallback callback);
		
		/// <summary>
        /// SMS-related functionality.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetNumberOfMessagesForText([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase text);
		
		/// <summary>Member SendSMS </summary>
		/// <param name='number'> </param>
		/// <param name='message'> </param>
		/// <param name='requestId'> </param>
		/// <param name='processId'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendSMS([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase number, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase message, int requestId, ulong processId);
		
		/// <summary>
        /// ICC-related functionality.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetICCContacts([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase type, [MarshalAs(UnmanagedType.Interface)] nsIRILContactCallback callback);
	}
	
	/// <summary>nsIRadioInterfaceLayerConsts </summary>
	public class nsIRadioInterfaceLayerConsts
	{
		
		// 
		public const ulong CALL_STATE_UNKNOWN = 0;
		
		// 
		public const ulong CALL_STATE_DIALING = 1;
		
		// 
		public const ulong CALL_STATE_ALERTING = 2;
		
		// 
		public const ulong CALL_STATE_BUSY = 3;
		
		// 
		public const ulong CALL_STATE_CONNECTING = 4;
		
		// 
		public const ulong CALL_STATE_CONNECTED = 5;
		
		// 
		public const ulong CALL_STATE_HOLDING = 6;
		
		// 
		public const ulong CALL_STATE_HELD = 7;
		
		// 
		public const ulong CALL_STATE_RESUMING = 8;
		
		// 
		public const ulong CALL_STATE_DISCONNECTING = 9;
		
		// 
		public const ulong CALL_STATE_DISCONNECTED = 10;
		
		// 
		public const ulong CALL_STATE_INCOMING = 11;
	}
}
