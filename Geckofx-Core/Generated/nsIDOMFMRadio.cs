// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIDOMFMRadio.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this file,
    /// You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("1d0443f3-ac30-4f9e-a070-002bb20ce1e6")]
	public interface nsIDOMFMRadio
	{
		
		/// <summary>
        ///Indicates if the FM radio is enabled. </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetEnabledAttribute();
		
		/// <summary>
        ///Indicates if the antenna is plugged and available. </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetAntennaAvailableAttribute();
		
		/// <summary>
        /// Current frequency in MHz.
        /// The value will be null if the FM radio is disabled.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetFrequencyAttribute();
		
		/// <summary>
        ///The upper bound of frequency in MHz. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetFrequencyUpperBoundAttribute();
		
		/// <summary>
        ///The lower bound of frequency in MHz. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetFrequencyLowerBoundAttribute();
		
		/// <summary>
        /// The channel width of the ranges of frequency, in MHz.
        /// Usually, the value is one of:
        /// - 0.05 MHz
        /// - 0.1  MHz
        /// - 0.2  MHz
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetChannelWidthAttribute();
		
		/// <summary>
        ///Fired when the FM radio is enabled. </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMEventListener GetOnenabledAttribute();
		
		/// <summary>
        ///Fired when the FM radio is enabled. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOnenabledAttribute([MarshalAs(UnmanagedType.Interface)] nsIDOMEventListener aOnenabled);
		
		/// <summary>
        ///Fired when the FM radio is disabled. </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMEventListener GetOndisabledAttribute();
		
		/// <summary>
        ///Fired when the FM radio is disabled. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOndisabledAttribute([MarshalAs(UnmanagedType.Interface)] nsIDOMEventListener aOndisabled);
		
		/// <summary>
        /// Fired when the antenna becomes available or unavailable, i.e., fired when
        /// the antennaAvailable attribute changes.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMEventListener GetOnantennaavailablechangeAttribute();
		
		/// <summary>
        /// Fired when the antenna becomes available or unavailable, i.e., fired when
        /// the antennaAvailable attribute changes.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOnantennaavailablechangeAttribute([MarshalAs(UnmanagedType.Interface)] nsIDOMEventListener aOnantennaavailablechange);
		
		/// <summary>
        ///Fired when the FM radio's frequency is changed. </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMEventListener GetOnfrequencychangeAttribute();
		
		/// <summary>
        ///Fired when the FM radio's frequency is changed. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOnfrequencychangeAttribute([MarshalAs(UnmanagedType.Interface)] nsIDOMEventListener aOnfrequencychange);
		
		/// <summary>
        /// Power the FM radio off.
        /// The disabled event will be fired if this request completes successfully.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest Disable();
		
		/// <summary>
        /// Power the FM radio on, and tune the radio to the given frequency in MHz.
        /// This will fail if the given frequency is out of range.
        /// The enabled event and frequencychange event will be fired if this request
        /// completes successfully.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest Enable(double frequency);
		
		/// <summary>
        /// Tune the FM radio to the given frequency.
        /// This will fail if the given frequency is out of range.
        ///
        /// Note that the FM radio may not tuned to the exact frequency given. To get
        /// the frequency the radio is actually tuned to, wait for the request to fire
        /// onsucess (or wait for the frequencychange event to fire), and then read the
        /// frequency attribute.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest SetFrequency(double frequency);
		
		/// <summary>
        /// Tell the FM radio to seek up to the next channel. If the frequency is
        /// successfully changed, the frequencychange event will be triggered.
        ///
        /// Only one seek is allowed at once:
        /// If the radio is seeking when the seekUp is called, onerror will be fired.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest SeekUp();
		
		/// <summary>
        /// Tell the FM radio to seek down to the next channel. If the frequency is
        /// successfully changed, the frequencychange event will be triggered.
        ///
        /// Only one seek is allowed at once:
        /// If the radio is seeking when the seekDown is called, onerror will be fired.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest SeekDown();
		
		/// <summary>
        /// Cancel the seek action.
        /// If the radio is not currently seeking up or down, onerror will be fired.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest CancelSeek();
		
		/// <summary>
        /// These functions related to EventTarget are temporary hacks:
        /// - addEventListener
        /// - removeEventListener
        /// - handleEvent
        ///
        /// These will be removed by inheriting from nsIJSDOMEventTarget,
        /// see bug 731746.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddEventListener([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase type, [MarshalAs(UnmanagedType.Interface)] nsIDOMEventListener listener, [MarshalAs(UnmanagedType.U1)] bool useCapture, [MarshalAs(UnmanagedType.U1)] bool wantsUntrusted, int argc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveEventListener([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase type, [MarshalAs(UnmanagedType.Interface)] nsIDOMEventListener listener, [MarshalAs(UnmanagedType.U1)] bool useCapture);
		
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool DispatchEvent([MarshalAs(UnmanagedType.Interface)] nsIDOMEvent evt);
	}
}
