// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIDOMMobileConnection.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this file,
    /// You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("2065b3c3-e876-4be1-b373-428ee254a63e")]
	public interface nsIDOMMozMobileConnection : nsIDOMEventTarget
	{
		
		/// <summary>
        /// This method allows the registration of event listeners on the event target.
        /// If an EventListener is added to an EventTarget while it is processing an
        /// event, it will not be triggered by the current actions but may be
        /// triggered during a later stage of event flow, such as the bubbling phase.
        ///
        /// If multiple identical EventListeners are registered on the same
        /// EventTarget with the same parameters the duplicate instances are
        /// discarded. They do not cause the EventListener to be called twice
        /// and since they are discarded they do not need to be removed with the
        /// removeEventListener method.
        ///
        /// @param   type The event type for which the user is registering
        /// @param   listener The listener parameter takes an interface
        /// implemented by the user which contains the methods
        /// to be called when the event occurs.
        /// @param   useCapture If true, useCapture indicates that the user
        /// wishes to initiate capture. After initiating
        /// capture, all events of the specified type will be
        /// dispatched to the registered EventListener before
        /// being dispatched to any EventTargets beneath them
        /// in the tree. Events which are bubbling upward
        /// through the tree will not trigger an
        /// EventListener designated to use capture.
        /// @param   wantsUntrusted If false, the listener will not receive any
        /// untrusted events (see above), if true, the
        /// listener will receive events whether or not
        /// they're trusted
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void AddEventListener([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase type, [MarshalAs(UnmanagedType.Interface)] nsIDOMEventListener listener, [MarshalAs(UnmanagedType.U1)] bool useCapture, [MarshalAs(UnmanagedType.U1)] bool wantsUntrusted, int argc);
		
		/// <summary>
        /// addSystemEventListener() adds an event listener of aType to the system
        /// group.  Typically, core code should use system group for listening to
        /// content (i.e., non-chrome) element's events.  If core code uses
        /// nsIDOMEventTarget::AddEventListener for a content node, it means
        /// that the listener cannot listen the event when web content calls
        /// stopPropagation() of the event.
        ///
        /// @param aType            An event name you're going to handle.
        /// @param aListener        An event listener.
        /// @param aUseCapture      TRUE if you want to listen the event in capturing
        /// phase.  Otherwise, FALSE.
        /// @param aWantsUntrusted  TRUE if you want to handle untrusted events.
        /// Otherwise, FALSE.
        /// @return                 NS_OK if succeed.  Otherwise, NS_ERROR_*.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void AddSystemEventListener([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase type, [MarshalAs(UnmanagedType.Interface)] nsIDOMEventListener listener, [MarshalAs(UnmanagedType.U1)] bool aUseCapture, [MarshalAs(UnmanagedType.U1)] bool aWantsUntrusted, int argc);
		
		/// <summary>
        /// This method allows the removal of event listeners from the event
        /// target. If an EventListener is removed from an EventTarget while it
        /// is processing an event, it will not be triggered by the current actions.
        /// EventListeners can never be invoked after being removed.
        /// Calling removeEventListener with arguments which do not identify any
        /// currently registered EventListener on the EventTarget has no effect.
        ///
        /// @param   type Specifies the event type of the EventListener being
        /// removed.
        /// @param   listener The EventListener parameter indicates the
        /// EventListener to be removed.
        /// @param   useCapture Specifies whether the EventListener being
        /// removed was registered as a capturing listener or
        /// not. If a listener was registered twice, one with
        /// capture and one without, each must be removed
        /// separately. Removal of a capturing listener does
        /// not affect a non-capturing version of the same
        /// listener, and vice versa.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void RemoveEventListener([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase type, [MarshalAs(UnmanagedType.Interface)] nsIDOMEventListener listener, [MarshalAs(UnmanagedType.U1)] bool useCapture);
		
		/// <summary>
        /// removeSystemEventListener() should be used if you have used
        /// addSystemEventListener().
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void RemoveSystemEventListener([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase type, [MarshalAs(UnmanagedType.Interface)] nsIDOMEventListener listener, [MarshalAs(UnmanagedType.U1)] bool aUseCapture);
		
		/// <summary>
        /// This method allows the dispatch of events into the implementations
        /// event model. Events dispatched in this manner will have the same
        /// capturing and bubbling behavior as events dispatched directly by the
        /// implementation. The target of the event is the EventTarget on which
        /// dispatchEvent is called.
        ///
        /// @param   evt Specifies the event type, behavior, and contextual
        /// information to be used in processing the event.
        /// @return  Indicates whether any of the listeners which handled the
        /// event called preventDefault. If preventDefault was called
        /// the value is false, else the value is true.
        /// @throws  INVALID_STATE_ERR: Raised if the Event's type was
        /// not specified by initializing the event before
        /// dispatchEvent was called. Specification of the Event's
        /// type as null or an empty string will also trigger this
        /// exception.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool DispatchEvent([MarshalAs(UnmanagedType.Interface)] nsIDOMEvent evt);
		
		/// <summary>
        /// Returns the nsIDOMEventTarget object which should be used as the target
        /// of DOMEvents.
        /// Usually |this| is returned, but for example global object returns
        /// the outer object.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMEventTarget GetTargetForDOMEvent();
		
		/// <summary>
        /// Returns the nsIDOMEventTarget object which should be used as the target
        /// of the event and when constructing event target chain.
        /// Usually |this| is returned, but for example global object returns
        /// the inner object.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMEventTarget GetTargetForEventTargetChain();
		
		/// <summary>
        /// Called before the capture phase of the event flow.
        /// This is used to create the event target chain and implementations
        /// should set the necessary members of nsEventChainPreVisitor.
        /// At least aVisitor.mCanHandle must be set,
        /// usually also aVisitor.mParentTarget if mCanHandle is PR_TRUE.
        /// First one tells that this object can handle the aVisitor.mEvent event and
        /// the latter one is the possible parent object for the event target chain.
        /// @see nsEventDispatcher.h for more documentation about aVisitor.
        ///
        /// @param aVisitor the visitor object which is used to create the
        /// event target chain for event dispatching.
        ///
        /// @note Only nsEventDispatcher should call this method.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void PreHandleEvent(System.IntPtr aVisitor);
		
		/// <summary>
        /// If nsEventChainPreVisitor.mWantsWillHandleEvent is set PR_TRUE,
        /// called just before possible event handlers on this object will be called.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void WillHandleEvent(System.IntPtr aVisitor);
		
		/// <summary>
        /// Called after the bubble phase of the system event group.
        /// The default handling of the event should happen here.
        /// @param aVisitor the visitor object which is used during post handling.
        ///
        /// @see nsEventDispatcher.h for documentation about aVisitor.
        /// @note Only nsEventDispatcher should call this method.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void PostHandleEvent(System.IntPtr aVisitor);
		
		/// <summary>
        /// Dispatch an event.
        /// @param aEvent the event that is being dispatched.
        /// @param aDOMEvent the event that is being dispatched, use if you want to
        /// dispatch nsIDOMEvent, not only nsEvent.
        /// @param aPresContext the current presentation context, can be nullptr.
        /// @param aEventStatus the status returned from the function, can be nullptr.
        ///
        /// @note If both aEvent and aDOMEvent are used, aEvent must be the internal
        /// event of the aDOMEvent.
        ///
        /// If aDOMEvent is not nullptr (in which case aEvent can be nullptr) it is used
        /// for dispatching, otherwise aEvent is used.
        ///
        /// @deprecated This method is here just until all the callers outside Gecko
        /// have been converted to use nsIDOMEventTarget::dispatchEvent.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void DispatchDOMEvent(System.IntPtr aEvent, [MarshalAs(UnmanagedType.Interface)] nsIDOMEvent aDOMEvent, System.IntPtr aPresContext, System.IntPtr aEventStatus);
		
		/// <summary>
        /// Get the event listener manager, the guy you talk to to register for events
        /// on this node.
        /// @param aMayCreate If PR_FALSE, returns a listener manager only if
        /// one already exists.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.IntPtr GetListenerManager([MarshalAs(UnmanagedType.U1)] bool aMayCreate);
		
		/// <summary>
        /// Get the script context in which the event handlers should be run.
        /// May return null.
        /// @note Caller *must* check the value of aRv.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.IntPtr GetContextForEventHandlers(ref int aRv);
		
		/// <summary>
        /// If the method above returns null, but a success code, this method
        /// is called.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.IntPtr GetJSContextForEventHandlers();
		
		/// <summary>
        /// Indicates the state of the device's ICC card.
        ///
        /// Possible values: null, 'unknown', 'absent', 'pinRequired', 'pukRequired',
        /// 'networkLocked', 'corporateLocked', 'serviceProviderLocked', 'ready'.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetCardStateAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aCardState);
		
		/// <summary>
        /// Information stored in the device's ICC card.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMMozMobileICCInfo GetIccInfoAttribute();
		
		/// <summary>
        /// Information about the voice connection.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMMozMobileConnectionInfo GetVoiceAttribute();
		
		/// <summary>
        /// Information about the data connection.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMMozMobileConnectionInfo GetDataAttribute();
		
		/// <summary>
        /// The selection mode of the voice and data networks.
        ///
        /// Possible values: null (unknown), 'automatic', 'manual'
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetNetworkSelectionModeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aNetworkSelectionMode);
		
		/// <summary>
        /// IccManager provides access to ICC related funcionality.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMMozIccManager GetIccAttribute();
		
		/// <summary>
        /// Search for available networks.
        ///
        /// If successful, the request's onsuccess will be called, and the request's
        /// result will be an array of nsIDOMMozMobileNetworkInfo.
        ///
        /// Otherwise, the request's onerror will be called, and the request's error
        /// will be either 'RadioNotAvailable', 'RequestNotSupported',
        /// or 'GenericFailure'.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest GetNetworks();
		
		/// <summary>
        /// Manually selects the passed in network, overriding the radio's current
        /// selection.
        ///
        /// If successful, the request's onsuccess will be called.
        /// Note: If the network was actually changed by this request,
        /// the 'voicechange' and 'datachange' events will also be fired.
        ///
        /// Otherwise, the request's onerror will be called, and the request's error
        /// will be either 'RadioNotAvailable', 'RequestNotSupported',
        /// 'IllegalSIMorME', or 'GenericFailure'
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest SelectNetwork([MarshalAs(UnmanagedType.Interface)] nsIDOMMozMobileNetworkInfo network);
		
		/// <summary>
        /// Tell the radio to automatically select a network.
        ///
        /// If successful, the request's onsuccess will be called.
        /// Note: If the network was actually changed by this request, the
        /// 'voicechange' and 'datachange' events will also be fired.
        ///
        /// Otherwise, the request's onerror will be called, and the request's error
        /// will be either 'RadioNotAvailable', 'RequestNotSupported',
        /// 'IllegalSIMorME', or 'GenericFailure'
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest SelectNetworkAutomatically();
		
		/// <summary>
        /// Find out about the status of an ICC lock (e.g. the PIN lock).
        ///
        /// @param lockType
        /// Identifies the lock type, e.g. "pin" for the PIN lock, "fdn" for
        /// the FDN lock.
        ///
        /// @return a DOM Request.
        /// The request's result will be an object containing
        /// information about the specified lock's status,
        /// e.g. {lockType: "pin", enabled: true}.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest GetCardLock([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase lockType);
		
		/// <summary>
        /// Unlock a card lock.
        ///
        /// @param info
        /// An object containing the information necessary to unlock
        /// the given lock. At a minimum, this object must have a
        /// "lockType" attribute which specifies the type of lock, e.g.
        /// "pin" for the PIN lock. Other attributes are dependent on
        /// the lock type.
        ///
        /// Examples:
        ///
        /// (1) Unlocking the PIN:
        ///
        /// unlockCardLock({lockType: "pin",
        /// pin: "..."});
        ///
        /// (2) Unlocking the PUK and supplying a new PIN:
        ///
        /// unlockCardLock({lockType: "puk",
        /// puk: "...",
        /// newPin: "..."});
        ///
        /// (3) Network depersonalization. Unlocking the network control key (NCK).
        ///
        /// unlockCardLock({lockType: "nck",
        /// pin: "..."});
        ///
        /// (4) Corporate depersonalization. Unlocking the corporate control key (CCK).
        ///
        /// unlockCardLock({lockType: "cck",
        /// pin: "..."});
        ///
        /// (5) Service Provider depersonalization. Unlocking the service provider
        /// control key (SPCK).
        ///
        /// unlockCardLock({lockType: "spck",
        /// pin: "..."});
        ///
        /// @return a nsIDOMDOMRequest.
        /// The request's result will be an object containing
        /// information about the unlock operation.
        ///
        /// Examples:
        ///
        /// (1) Unlocking failed:
        ///
        /// {
        /// lockType:   "pin",
        /// success:    false,
        /// retryCount: 2
        /// }
        ///
        /// (2) Unlocking succeeded:
        ///
        /// {
        /// lockType:  "pin",
        /// success:   true
        /// }
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest UnlockCardLock(Gecko.JsVal info);
		
		/// <summary>
        /// Modify the state of a card lock.
        ///
        /// @param info
        /// An object containing information about the lock and
        /// how to modify its state. At a minimum, this object
        /// must have a "lockType" attribute which specifies the
        /// type of lock, e.g. "pin" for the PIN lock. Other
        /// attributes are dependent on the lock type.
        ///
        /// Examples:
        ///
        /// (1a) Disabling the PIN lock:
        ///
        /// setCardLock({lockType: "pin",
        /// pin: "...",
        /// enabled: false});
        ///
        /// (1b) Disabling the FDN lock:
        ///
        /// setCardLock({lockType: "fdn",
        /// pin2: "...",
        /// enabled: false});
        ///
        /// (2) Changing the PIN:
        ///
        /// setCardLock({lockType: "pin",
        /// pin: "...",
        /// newPin: "..."});
        ///
        /// @return a nsIDOMDOMRequest.
        /// The request's result will be an object containing
        /// information about the operation.
        ///
        /// Examples:
        ///
        /// (1) Enabling/Disabling card lock failed or change card lock failed.
        ///
        /// {
        /// lockType: "pin",
        /// success: false,
        /// retryCount: 2
        /// }
        ///
        /// (2) Enabling/Disabling card lock succeed or change card lock succeed.
        ///
        /// {
        /// lockType: "pin",
        /// success: true
        /// }
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest SetCardLock(Gecko.JsVal info);
		
		/// <summary>
        /// Send a MMI message.
        ///
        /// @param mmi
        /// DOMString containing an MMI string that can be associated to a
        /// USSD request or other RIL functionality.
        ///
        /// @return a nsIDOMDOMRequest
        /// The request's result will be an object containing information
        /// about the operation.
        ///
        /// In case that the MMI code requires sending an USSD request, the DOMrequest
        /// 'success' event means that the RIL has successfully processed and sent the
        /// USSD request to the network. The network reply will be reported via
        /// 'onussdreceived' event. If the MMI code is not associated to a USSD but to
        /// other RIL request its result, if one is needed, will be notified via the
        /// returned DOMRequest 'success' or 'error' event.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest SendMMI([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase mmi);
		
		/// <summary>
        /// Cancel the current MMI request if one exists.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest CancelMMI();
		
		/// <summary>
        /// Configures call forward options.
        ///
        /// @param CFInfo
        /// An object containing the call forward rule to set.
        ///
        /// If successful, the request's onsuccess will be called.
        ///
        /// Otherwise, the request's onerror will be called, and the request's error
        /// will be either 'RadioNotAvailable', 'RequestNotSupported',
        /// 'IllegalSIMorME', or 'GenericFailure'
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest SetCallForwardingOption([MarshalAs(UnmanagedType.Interface)] nsIDOMMozMobileCFInfo CFInfo);
		
		/// <summary>
        /// Queries current call forward options.
        ///
        /// @param reason
        /// Indicates the reason the call is being forwarded. It will be either
        /// unconditional (0), mobile busy (1), no reply (2), not reachable (3),
        /// all call forwarding (4), or all conditional call forwarding (5).
        ///
        /// If successful, the request's onsuccess will be called, and the request's
        /// result will be an array of nsIDOMMozMobileCFInfo.
        ///
        /// Otherwise, the request's onerror will be called, and the request's error
        /// will be either 'RadioNotAvailable', 'RequestNotSupported',
        /// or 'GenericFailure'.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest GetCallForwardingOption(ushort reason);
		
		/// <summary>
        /// The 'cardstatechange' event is notified when the 'cardState' attribute
        /// changes value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetOncardstatechangeAttribute(System.IntPtr jsContext);
		
		/// <summary>
        /// The 'cardstatechange' event is notified when the 'cardState' attribute
        /// changes value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOncardstatechangeAttribute(Gecko.JsVal aOncardstatechange, System.IntPtr jsContext);
		
		/// <summary>
        /// The 'iccinfochange' event is notified whenever the icc info object
        /// changes.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetOniccinfochangeAttribute(System.IntPtr jsContext);
		
		/// <summary>
        /// The 'iccinfochange' event is notified whenever the icc info object
        /// changes.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOniccinfochangeAttribute(Gecko.JsVal aOniccinfochange, System.IntPtr jsContext);
		
		/// <summary>
        /// The 'voicechange' event is notified whenever the voice connection object
        /// changes.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetOnvoicechangeAttribute(System.IntPtr jsContext);
		
		/// <summary>
        /// The 'voicechange' event is notified whenever the voice connection object
        /// changes.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOnvoicechangeAttribute(Gecko.JsVal aOnvoicechange, System.IntPtr jsContext);
		
		/// <summary>
        /// The 'datachange' event is notified whenever the data connection object
        /// changes values.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetOndatachangeAttribute(System.IntPtr jsContext);
		
		/// <summary>
        /// The 'datachange' event is notified whenever the data connection object
        /// changes values.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOndatachangeAttribute(Gecko.JsVal aOndatachange, System.IntPtr jsContext);
		
		/// <summary>
        /// The 'ussdreceived' event is notified whenever a new USSD message is
        /// received.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetOnussdreceivedAttribute(System.IntPtr jsContext);
		
		/// <summary>
        /// The 'ussdreceived' event is notified whenever a new USSD message is
        /// received.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOnussdreceivedAttribute(Gecko.JsVal aOnussdreceived, System.IntPtr jsContext);
		
		/// <summary>
        /// The 'dataerror' event is notified whenever the data connection object
        /// receives an error from the RIL
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetOndataerrorAttribute(System.IntPtr jsContext);
		
		/// <summary>
        /// The 'dataerror' event is notified whenever the data connection object
        /// receives an error from the RIL
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOndataerrorAttribute(Gecko.JsVal aOndataerror, System.IntPtr jsContext);
		
		/// <summary>
        /// The 'icccardlockerror' event is notified whenever 'unlockCardLock' or
        /// 'setCardLock' fails.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetOnicccardlockerrorAttribute(System.IntPtr jsContext);
		
		/// <summary>
        /// The 'icccardlockerror' event is notified whenever 'unlockCardLock' or
        /// 'setCardLock' fails.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOnicccardlockerrorAttribute(Gecko.JsVal aOnicccardlockerror, System.IntPtr jsContext);
		
		/// <summary>
        /// The 'oncfstatechange' event is notified whenever the call forwarding
        /// state changes.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetOncfstatechangeAttribute(System.IntPtr jsContext);
		
		/// <summary>
        /// The 'oncfstatechange' event is notified whenever the call forwarding
        /// state changes.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOncfstatechangeAttribute(Gecko.JsVal aOncfstatechange, System.IntPtr jsContext);
	}
	
	/// <summary>nsIDOMMozMobileConnectionConsts </summary>
	public class nsIDOMMozMobileConnectionConsts
	{
		
		// <summary>
        //This Source Code Form is subject to the terms of the Mozilla Public
        // License, v. 2.0. If a copy of the MPL was not distributed with this file,
        // You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
		public const long ICC_SERVICE_CLASS_VOICE = (1<<0);
		
		// 
		public const long ICC_SERVICE_CLASS_DATA = (1<<1);
		
		// 
		public const long ICC_SERVICE_CLASS_FAX = (1<<2);
		
		// 
		public const long ICC_SERVICE_CLASS_SMS = (1<<3);
		
		// 
		public const long ICC_SERVICE_CLASS_DATA_SYNC = (1<<4);
		
		// 
		public const long ICC_SERVICE_CLASS_DATA_ASYNC = (1<<5);
		
		// 
		public const long ICC_SERVICE_CLASS_PACKET = (1<<6);
		
		// 
		public const long ICC_SERVICE_CLASS_PAD = (1<<7);
		
		// 
		public const long ICC_SERVICE_CLASS_MAX = (1<<7);
	}
	
	/// <summary>nsIDOMMozMobileConnectionInfo </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("c9d9ff61-a2f0-41cd-b478-9cefa7b31f31")]
	public interface nsIDOMMozMobileConnectionInfo
	{
		
		/// <summary>
        /// State of the connection.
        ///
        /// Possible values: 'notSearching', 'searching', 'denied', 'registered'.
        /// null if the state is unknown.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetStateAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aState);
		
		/// <summary>
        /// Indicates whether the connection is ready. This may be different
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetConnectedAttribute();
		
		/// <summary>
        /// Indicates whether only emergency calls are possible.
        ///
        /// This flag is only relevant to voice connections and when 'connected' is
        /// false.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetEmergencyCallsOnlyAttribute();
		
		/// <summary>
        /// Indicates whether the connection is going through a foreign operator
        /// (roaming) or not.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetRoamingAttribute();
		
		/// <summary>
        /// Network operator
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMMozMobileNetworkInfo GetNetworkAttribute();
		
		/// <summary>
        /// Mobile Country Code (MCC) of last known network operator.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetLastKnownMccAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aLastKnownMcc);
		
		/// <summary>
        /// Type of connection.
        ///
        /// Possible values: 'gsm', 'cdma', gprs', 'edge', 'umts', 'hsdpa', 'evdo0',
        /// 'evdoa', 'evdob', etc.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetTypeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aType);
		
		/// <summary>
        /// Signal strength in dBm, or null if no service is available.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetSignalStrengthAttribute();
		
		/// <summary>
        /// Signal strength, represented linearly as a number between 0 (weakest
        /// signal) and 100 (full signal).
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetRelSignalStrengthAttribute();
		
		/// <summary>
        /// Cell location.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMMozMobileCellInfo GetCellAttribute();
	}
	
	/// <summary>nsIDOMMozMobileNetworkInfo </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("40018fc7-4c42-47b6-8de6-3591a9c622bc")]
	public interface nsIDOMMozMobileNetworkInfo
	{
		
		/// <summary>
        /// Short name of the network operator
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetShortNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aShortName);
		
		/// <summary>
        /// Long name of the network operator
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetLongNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aLongName);
		
		/// <summary>
        /// Mobile Country Code (MCC) of the network operator
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetMccAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aMcc);
		
		/// <summary>
        /// Mobile Network Code (MNC) of the network operator
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetMncAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aMnc);
		
		/// <summary>
        /// State of this network operator.
        ///
        /// Possible values: 'available', 'connected', 'forbidden', or null (unknown)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetStateAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aState);
	}
	
	/// <summary>nsIDOMMozMobileCellInfo </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("aa546788-4f34-488b-8c3e-2786e02ab992")]
	public interface nsIDOMMozMobileCellInfo
	{
		
		/// <summary>
        /// Mobile Location Area Code (LAC) for GSM/WCDMA networks.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetGsmLocationAreaCodeAttribute();
		
		/// <summary>
        /// Mobile Cell ID for GSM/WCDMA networks.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetGsmCellIdAttribute();
	}
	
	/// <summary>nsIDOMMozMobileICCInfo </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("10d5c5a2-d43f-4f94-8657-cf7ccabbab6e")]
	public interface nsIDOMMozMobileICCInfo
	{
		
		/// <summary>
        /// Integrated Circuit Card Identifier.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetIccidAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aIccid);
		
		/// <summary>
        /// Mobile Country Code (MCC) of the subscriber's home network.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetMccAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aMcc);
		
		/// <summary>
        /// Mobile Network Code (MNC) of the subscriber's home network.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetMncAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aMnc);
		
		/// <summary>
        /// Service Provider Name (SPN) of the subscriber's home network.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetSpnAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aSpn);
		
		/// <summary>
        /// Network name must be a part of displayed carrier name.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsDisplayNetworkNameRequiredAttribute();
		
		/// <summary>
        /// Service provider name must be a part of displayed carrier name.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsDisplaySpnRequiredAttribute();
		
		/// <summary>
        /// Mobile Station ISDN Number (MSISDN) of the subscriber's, aka
        /// his phone number.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetMsisdnAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aMsisdn);
	}
	
	/// <summary>nsIDOMMozMobileCFInfo </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("d1b35ad8-99aa-47cc-ab49-2e72b00e39df")]
	public interface nsIDOMMozMobileCFInfo
	{
		
		/// <summary>
        /// Call forwarding rule status.
        ///
        /// It will be either not active (false), or active (true).
        ///
        /// Note: Unused for setting call forwarding options. It reports
        /// the status of the rule when getting how the rule is
        /// configured.
        ///
        /// @see 3GPP TS 27.007 7.11 "status".
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetActiveAttribute();
		
		/// <summary>
        /// Indicates what to do with the rule.
        ///
        /// One of the CALL_FORWARD_ACTION_* constants. It will be either disable (0),
        /// enable (1), query status (2), registration (3), or erasure (4).
        ///
        /// @see 3GPP TS 27.007 7.11 "mode".
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetActionAttribute();
		
		/// <summary>
        /// Indicates the reason the call is being forwarded.
        ///
        /// One of the CALL_FORWARD_REASON_* constants. It will be either
        /// unconditional (0), mobile busy (1), no reply (2), not reachable (3),
        /// all call forwarding (4), or all conditional call forwarding (5).
        ///
        /// @see 3GPP TS 27.007 7.11 "reason".
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetReasonAttribute();
		
		/// <summary>
        /// Phone number of forwarding address.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetNumberAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aNumber);
		
		/// <summary>
        /// When "no reply" is enabled or queried, this gives the time in
        /// seconds to wait before call is forwarded.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetTimeSecondsAttribute();
		
		/// <summary>
        /// Service for which the call forward is set up. It should be one of the
        /// nsIDOMMozMobileConnectionInfo.ICC_SERVICE_CLASS_* values.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetServiceClassAttribute();
	}
	
	/// <summary>nsIDOMMozMobileCFInfoConsts </summary>
	public class nsIDOMMozMobileCFInfoConsts
	{
		
		// 
		public const long CALL_FORWARD_ACTION_DISABLE = 0;
		
		// 
		public const long CALL_FORWARD_ACTION_ENABLE = 1;
		
		// 
		public const long CALL_FORWARD_ACTION_QUERY_STATUS = 2;
		
		// 
		public const long CALL_FORWARD_ACTION_REGISTRATION = 3;
		
		// 
		public const long CALL_FORWARD_ACTION_ERASURE = 4;
		
		// 
		public const long CALL_FORWARD_REASON_UNCONDITIONAL = 0;
		
		// 
		public const long CALL_FORWARD_REASON_MOBILE_BUSY = 1;
		
		// 
		public const long CALL_FORWARD_REASON_NO_REPLY = 2;
		
		// 
		public const long CALL_FORWARD_REASON_NOT_REACHABLE = 3;
		
		// 
		public const long CALL_FORWARD_REASON_ALL_CALL_FORWARDING = 4;
		
		// 
		public const long CALL_FORWARD_REASON_ALL_CONDITIONAL_CALL_FORWARDING = 5;
	}
}
