// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIDOMMutationObserver.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;

	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this file,
    /// You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("2fa4716f-405a-449b-954b-ae570c170364")]
	public interface nsIDOMMutationRecord
	{
		
		/// <summary>
        /// type is on of childList, attribute, characterData.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetTypeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aType);
		
		/// <summary>
        /// Target of the change.
        /// If an attribute is changed, target is the element,
        /// if an element is added or removed, target is the node
        /// which was added or removed.
        /// If text is changed, target is the CharacterData node which was changed.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMNode GetTargetAttribute();
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMNodeList GetAddedNodesAttribute();
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMNodeList GetRemovedNodesAttribute();
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMNode GetPreviousSiblingAttribute();
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMNode GetNextSiblingAttribute();
		
		/// <summary>
        /// The name of the attribute which was changed, or null.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetAttributeNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aAttributeName);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetAttributeNamespaceAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aAttributeNamespace);
		
		/// <summary>
        /// The previous value of the attribute or CharacterData node, or null.
        ///
        /// If a new attribute is added, or attribute values aren't reported,
        /// prevValue is null.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetOldValueAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aOldValue);
	}
	
	/// <summary>
    ///[Constructor(in nsIMutationCallback aDoneCallback)]
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("156e2ce4-e44a-45f3-92c2-e6611f391dae")]
	public interface nsIDOMMutationObserver
	{
		
		/// <summary>
        ///[Constructor(in nsIMutationCallback aDoneCallback)]
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Observe([MarshalAs(UnmanagedType.Interface)] nsIDOMNode aTarget, Gecko.JsVal aOptions, System.IntPtr jsContext);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Disconnect();
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIVariant TakeRecords();
	}
	
	/// <summary>nsIMutationObserverCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("fb539590-b088-4d07-96ff-2cefbc90a198")]
	public interface nsIMutationObserverCallback
	{
		
		/// <summary>Member HandleMutations </summary>
		/// <param name='aRecords'> </param>
		/// <param name='aObserver'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HandleMutations([MarshalAs(UnmanagedType.Interface)] nsIVariant aRecords, [MarshalAs(UnmanagedType.Interface)] nsIDOMMutationObserver aObserver);
	}
}
