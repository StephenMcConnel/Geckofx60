// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIDOMWebGLRenderingContext.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0df9f4ed-f5ff-4e51-a6ff-2bd9785a7639")]
	public interface nsIWebGLTexture
	{
		
		/// <summary>
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetNameAttribute();
		
		/// <summary>
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetNameAttribute(uint aName);
	}
	
	/// <summary>nsIWebGLBuffer </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("9eca9c32-8305-11de-b89b-000c29206271")]
	public interface nsIWebGLBuffer
	{
		
		/// <summary>Member GetNameAttribute </summary>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetNameAttribute();
		
		/// <summary>Member SetNameAttribute </summary>
		/// <param name='aName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetNameAttribute(uint aName);
	}
	
	/// <summary>nsIWebGLProgram </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("a6a19e74-8305-11de-9ce9-000c29206271")]
	public interface nsIWebGLProgram
	{
		
		/// <summary>Member GetNameAttribute </summary>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetNameAttribute();
		
		/// <summary>Member SetNameAttribute </summary>
		/// <param name='aName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetNameAttribute(uint aName);
	}
	
	/// <summary>nsIWebGLShader </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ac7440a4-8305-11de-807b-000c29206271")]
	public interface nsIWebGLShader
	{
		
		/// <summary>Member GetNameAttribute </summary>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetNameAttribute();
		
		/// <summary>Member SetNameAttribute </summary>
		/// <param name='aName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetNameAttribute(uint aName);
	}
	
	/// <summary>nsIWebGLShaderArray </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("beea4b38-3094-4e8d-b6e6-8b21d07e8994")]
	public interface nsIWebGLShaderArray
	{
		
		/// <summary>Member GetLengthAttribute </summary>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetLengthAttribute();
		
		/// <summary>Member Item </summary>
		/// <param name='index'> </param>
		/// <returns>A nsIWebGLShader</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIWebGLShader Item(uint index);
	}
	
	/// <summary>nsIWebGLFramebuffer </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("bce8be60-8305-11de-9f3c-000c29206271")]
	public interface nsIWebGLFramebuffer
	{
		
		/// <summary>Member GetNameAttribute </summary>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetNameAttribute();
		
		/// <summary>Member SetNameAttribute </summary>
		/// <param name='aName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetNameAttribute(uint aName);
	}
	
	/// <summary>nsIWebGLRenderbuffer </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("c82eacd0-8305-11de-9de9-000c29206271")]
	public interface nsIWebGLRenderbuffer
	{
		
		/// <summary>Member GetNameAttribute </summary>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetNameAttribute();
		
		/// <summary>Member SetNameAttribute </summary>
		/// <param name='aName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetNameAttribute(uint aName);
	}
	
	/// <summary>nsIWebGLActiveInfo </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("a85d4fd0-5b9f-4cb8-aeee-5a2c5c5bad76")]
	public interface nsIWebGLActiveInfo
	{
		
		/// <summary>Member GetSizeAttribute </summary>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetSizeAttribute();
		
		/// <summary>Member GetTypeAttribute </summary>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetTypeAttribute();
		
		/// <summary>Member GetNameAttribute </summary>
		/// <param name='aName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aName);
	}
	
	/// <summary>nsIWebGLShaderPrecisionFormat </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("76265e93-2e8f-40ca-b25b-eea5995e9641")]
	public interface nsIWebGLShaderPrecisionFormat
	{
		
		/// <summary>Member GetRangeMinAttribute </summary>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetRangeMinAttribute();
		
		/// <summary>Member GetRangeMaxAttribute </summary>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetRangeMaxAttribute();
		
		/// <summary>Member GetPrecisionAttribute </summary>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetPrecisionAttribute();
	}
	
	/// <summary>nsIWebGLUniformLocation </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("d38b0467-623e-4c82-9140-5f14a3bd1bad")]
	public interface nsIWebGLUniformLocation
	{
		
		/// <summary>Member GetLocationAttribute </summary>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetLocationAttribute();
		
		/// <summary>Member SetLocationAttribute </summary>
		/// <param name='aLocation'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetLocationAttribute(int aLocation);
	}
	
	/// <summary>
    ///Base class for all WebGL extensions, and for those without
    /// any additional tokens/methods.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("70814f32-a5c5-4b95-83d5-ac653bac3316")]
	public interface nsIWebGLExtension
	{
	}
	
	/// <summary>
    ///Classes that extend on nsIWebGLExtension and provide
    /// extra tokens, functions, etc.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("3de3dfd9-864a-4e4c-989b-2977eaa80b7b")]
	public interface nsIWebGLExtensionStandardDerivatives : nsIWebGLExtension
	{
	}
	
	/// <summary>nsIWebGLExtensionStandardDerivativesConsts </summary>
	public class nsIWebGLExtensionStandardDerivativesConsts
	{
		
		// <summary>
        //Fragment shader hint </summary>
		public const long FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x8B8B;
	}
	
	/// <summary>nsIWebGLExtensionLoseContext </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("b0afc2eb-0895-4509-98de-5c383d160694")]
	public interface nsIWebGLExtensionLoseContext : nsIWebGLExtension
	{
		
		/// <summary>Member LoseContext </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LoseContext();
		
		/// <summary>Member RestoreContext </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RestoreContext();
	}
	
	/// <summary>nsIWebGLExtensionTextureFilterAnisotropic </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("73bfb64d-94bd-4a7a-9eab-6b6d32e57aa0")]
	public interface nsIWebGLExtensionTextureFilterAnisotropic : nsIWebGLExtension
	{
	}
	
	/// <summary>nsIWebGLExtensionTextureFilterAnisotropicConsts </summary>
	public class nsIWebGLExtensionTextureFilterAnisotropicConsts
	{
		
		// 
		public const long TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
		
		// 
		public const long MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
	}
	
	/// <summary>nsIWebGLExtensionCompressedTextureS3TC </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("a1508b6f-f2ab-44cf-bbb4-3cfb339e1e8a")]
	public interface nsIWebGLExtensionCompressedTextureS3TC : nsIWebGLExtension
	{
	}
	
	/// <summary>nsIWebGLExtensionCompressedTextureS3TCConsts </summary>
	public class nsIWebGLExtensionCompressedTextureS3TCConsts
	{
		
		// <summary>
        //Compressed Texture Formats </summary>
		public const long COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
		
		// 
		public const long COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
		
		// 
		public const long COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
		
		// 
		public const long COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
	}
	
	/// <summary>nsIDOMWebGLRenderingContext </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("a1fdfb76-6a08-4a1a-b0c9-d92ef3357cb9")]
	public interface nsIDOMWebGLRenderingContext
	{
		
		/// <summary>
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMHTMLCanvasElement GetCanvasAttribute();
		
		/// <summary>
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetContextAttributes();
		
		/// <summary>Member ActiveTexture </summary>
		/// <param name='texture'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ActiveTexture(uint texture);
		
		/// <summary>Member AttachShader </summary>
		/// <param name='program'> </param>
		/// <param name='shader'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AttachShader([MarshalAs(UnmanagedType.Interface)] nsIWebGLProgram program, [MarshalAs(UnmanagedType.Interface)] nsIWebGLShader shader);
		
		/// <summary>Member BindAttribLocation </summary>
		/// <param name='program'> </param>
		/// <param name='index'> </param>
		/// <param name='name'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BindAttribLocation([MarshalAs(UnmanagedType.Interface)] nsIWebGLProgram program, uint index, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase name);
		
		/// <summary>Member BindBuffer </summary>
		/// <param name='target'> </param>
		/// <param name='buffer'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BindBuffer(uint target, [MarshalAs(UnmanagedType.Interface)] nsIWebGLBuffer buffer);
		
		/// <summary>Member BindFramebuffer </summary>
		/// <param name='target'> </param>
		/// <param name='framebuffer'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BindFramebuffer(uint target, [MarshalAs(UnmanagedType.Interface)] nsIWebGLFramebuffer framebuffer);
		
		/// <summary>Member BindRenderbuffer </summary>
		/// <param name='target'> </param>
		/// <param name='renderbuffer'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BindRenderbuffer(uint target, [MarshalAs(UnmanagedType.Interface)] nsIWebGLRenderbuffer renderbuffer);
		
		/// <summary>Member BindTexture </summary>
		/// <param name='target'> </param>
		/// <param name='texture'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BindTexture(uint target, [MarshalAs(UnmanagedType.Interface)] nsIWebGLTexture texture);
		
		/// <summary>Member BlendColor </summary>
		/// <param name='red'> </param>
		/// <param name='green'> </param>
		/// <param name='blue'> </param>
		/// <param name='alpha'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BlendColor(double red, double green, double blue, double alpha);
		
		/// <summary>Member BlendEquation </summary>
		/// <param name='mode'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BlendEquation(uint mode);
		
		/// <summary>Member BlendEquationSeparate </summary>
		/// <param name='modeRGB'> </param>
		/// <param name='modeAlpha'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BlendEquationSeparate(uint modeRGB, uint modeAlpha);
		
		/// <summary>Member BlendFunc </summary>
		/// <param name='sfactor'> </param>
		/// <param name='dfactor'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BlendFunc(uint sfactor, uint dfactor);
		
		/// <summary>Member BlendFuncSeparate </summary>
		/// <param name='srcRGB'> </param>
		/// <param name='dstRGB'> </param>
		/// <param name='srcAlpha'> </param>
		/// <param name='dstAlpha'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BlendFuncSeparate(uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha);
		
		/// <summary>
        /// Modified: void glBufferData(WebGLenum target, long size, const void* data, WebGLenum usage);
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BufferData(uint target, Gecko.JsVal data, uint usage, System.IntPtr jsContext);
		
		/// <summary>Member BufferSubData </summary>
		/// <param name='target'> </param>
		/// <param name='offset'> </param>
		/// <param name='data'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BufferSubData(uint target, System.IntPtr offset, Gecko.JsVal data, System.IntPtr jsContext);
		
		/// <summary>Member CheckFramebufferStatus </summary>
		/// <param name='target'> </param>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint CheckFramebufferStatus(uint target);
		
		/// <summary>Member Clear </summary>
		/// <param name='mask'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Clear(uint mask);
		
		/// <summary>Member ClearColor </summary>
		/// <param name='red'> </param>
		/// <param name='green'> </param>
		/// <param name='blue'> </param>
		/// <param name='alpha'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ClearColor(double red, double green, double blue, double alpha);
		
		/// <summary>Member ClearDepth </summary>
		/// <param name='depth'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ClearDepth(double depth);
		
		/// <summary>Member ClearStencil </summary>
		/// <param name='s'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ClearStencil(int s);
		
		/// <summary>Member ColorMask </summary>
		/// <param name='red'> </param>
		/// <param name='green'> </param>
		/// <param name='blue'> </param>
		/// <param name='alpha'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ColorMask(bool red, bool green, bool blue, bool alpha);
		
		/// <summary>Member CompileShader </summary>
		/// <param name='shader'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CompileShader([MarshalAs(UnmanagedType.Interface)] nsIWebGLShader shader);
		
		/// <summary>Member CompressedTexImage2D </summary>
		/// <param name='target'> </param>
		/// <param name='level'> </param>
		/// <param name='internalformat'> </param>
		/// <param name='width'> </param>
		/// <param name='height'> </param>
		/// <param name='border'> </param>
		/// <param name='pixels'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CompressedTexImage2D(uint target, int level, uint internalformat, int width, int height, int border, Gecko.JsVal pixels, System.IntPtr jsContext);
		
		/// <summary>Member CompressedTexSubImage2D </summary>
		/// <param name='target'> </param>
		/// <param name='level'> </param>
		/// <param name='xoffset'> </param>
		/// <param name='yoffset'> </param>
		/// <param name='width'> </param>
		/// <param name='height'> </param>
		/// <param name='format'> </param>
		/// <param name='pixels'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CompressedTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, Gecko.JsVal pixels, System.IntPtr jsContext);
		
		/// <summary>Member CopyTexImage2D </summary>
		/// <param name='target'> </param>
		/// <param name='level'> </param>
		/// <param name='internalformat'> </param>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='width'> </param>
		/// <param name='height'> </param>
		/// <param name='border'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CopyTexImage2D(uint target, int level, uint internalformat, int x, int y, int width, int height, int border);
		
		/// <summary>Member CopyTexSubImage2D </summary>
		/// <param name='target'> </param>
		/// <param name='level'> </param>
		/// <param name='xoffset'> </param>
		/// <param name='yoffset'> </param>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='width'> </param>
		/// <param name='height'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CopyTexSubImage2D(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
		
		/// <summary>Member CreateBuffer </summary>
		/// <returns>A nsIWebGLBuffer</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIWebGLBuffer CreateBuffer();
		
		/// <summary>Member CreateProgram </summary>
		/// <returns>A nsIWebGLProgram</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIWebGLProgram CreateProgram();
		
		/// <summary>Member CreateFramebuffer </summary>
		/// <returns>A nsIWebGLFramebuffer</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIWebGLFramebuffer CreateFramebuffer();
		
		/// <summary>Member CreateRenderbuffer </summary>
		/// <returns>A nsIWebGLRenderbuffer</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIWebGLRenderbuffer CreateRenderbuffer();
		
		/// <summary>Member CreateShader </summary>
		/// <param name='type'> </param>
		/// <returns>A nsIWebGLShader</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIWebGLShader CreateShader(uint type);
		
		/// <summary>Member CreateTexture </summary>
		/// <returns>A nsIWebGLTexture</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIWebGLTexture CreateTexture();
		
		/// <summary>Member CullFace </summary>
		/// <param name='mode'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CullFace(uint mode);
		
		/// <summary>Member DeleteBuffer </summary>
		/// <param name='buffer'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeleteBuffer([MarshalAs(UnmanagedType.Interface)] nsIWebGLBuffer buffer);
		
		/// <summary>Member DeleteProgram </summary>
		/// <param name='program'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeleteProgram([MarshalAs(UnmanagedType.Interface)] nsIWebGLProgram program);
		
		/// <summary>Member DeleteFramebuffer </summary>
		/// <param name='framebuffer'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeleteFramebuffer([MarshalAs(UnmanagedType.Interface)] nsIWebGLFramebuffer framebuffer);
		
		/// <summary>Member DeleteRenderbuffer </summary>
		/// <param name='renderbuffer'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeleteRenderbuffer([MarshalAs(UnmanagedType.Interface)] nsIWebGLRenderbuffer renderbuffer);
		
		/// <summary>Member DeleteShader </summary>
		/// <param name='shader'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeleteShader([MarshalAs(UnmanagedType.Interface)] nsIWebGLShader shader);
		
		/// <summary>Member DeleteTexture </summary>
		/// <param name='texture'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeleteTexture([MarshalAs(UnmanagedType.Interface)] nsIWebGLTexture texture);
		
		/// <summary>Member DepthFunc </summary>
		/// <param name='func'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DepthFunc(uint func);
		
		/// <summary>Member DepthMask </summary>
		/// <param name='flag'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DepthMask(bool flag);
		
		/// <summary>Member DepthRange </summary>
		/// <param name='zNear'> </param>
		/// <param name='zFar'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DepthRange(double zNear, double zFar);
		
		/// <summary>Member DetachShader </summary>
		/// <param name='program'> </param>
		/// <param name='shader'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DetachShader([MarshalAs(UnmanagedType.Interface)] nsIWebGLProgram program, [MarshalAs(UnmanagedType.Interface)] nsIWebGLShader shader);
		
		/// <summary>Member Disable </summary>
		/// <param name='cap'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Disable(uint cap);
		
		/// <summary>Member DisableVertexAttribArray </summary>
		/// <param name='index'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DisableVertexAttribArray(uint index);
		
		/// <summary>Member DrawArrays </summary>
		/// <param name='mode'> </param>
		/// <param name='first'> </param>
		/// <param name='count'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DrawArrays(uint mode, int first, int count);
		
		/// <summary>
        /// Modified: void glDrawElements(WebGLenum mode, WebGLsizei count, WebGLenum type, const void* indices);
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DrawElements(uint mode, int count, uint type, System.IntPtr offset);
		
		/// <summary>Member Enable </summary>
		/// <param name='cap'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Enable(uint cap);
		
		/// <summary>Member EnableVertexAttribArray </summary>
		/// <param name='index'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EnableVertexAttribArray(uint index);
		
		/// <summary>Member Finish </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Finish();
		
		/// <summary>Member Flush </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Flush();
		
		/// <summary>Member FramebufferRenderbuffer </summary>
		/// <param name='target'> </param>
		/// <param name='attachment'> </param>
		/// <param name='renderbuffertarget'> </param>
		/// <param name='renderbuffer'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FramebufferRenderbuffer(uint target, uint attachment, uint renderbuffertarget, [MarshalAs(UnmanagedType.Interface)] nsIWebGLRenderbuffer renderbuffer);
		
		/// <summary>Member FramebufferTexture2D </summary>
		/// <param name='target'> </param>
		/// <param name='attachment'> </param>
		/// <param name='textarget'> </param>
		/// <param name='texture'> </param>
		/// <param name='level'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FramebufferTexture2D(uint target, uint attachment, uint textarget, [MarshalAs(UnmanagedType.Interface)] nsIWebGLTexture texture, int level);
		
		/// <summary>Member FrontFace </summary>
		/// <param name='mode'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FrontFace(uint mode);
		
		/// <summary>Member GenerateMipmap </summary>
		/// <param name='target'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GenerateMipmap(uint target);
		
		/// <summary>Member GetActiveAttrib </summary>
		/// <param name='program'> </param>
		/// <param name='index'> </param>
		/// <returns>A nsIWebGLActiveInfo</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIWebGLActiveInfo GetActiveAttrib([MarshalAs(UnmanagedType.Interface)] nsIWebGLProgram program, uint index);
		
		/// <summary>Member GetActiveUniform </summary>
		/// <param name='program'> </param>
		/// <param name='index'> </param>
		/// <returns>A nsIWebGLActiveInfo</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIWebGLActiveInfo GetActiveUniform([MarshalAs(UnmanagedType.Interface)] nsIWebGLProgram program, uint index);
		
		/// <summary>Member GetAttachedShaders </summary>
		/// <param name='program'> </param>
		/// <returns>A nsIVariant</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIVariant GetAttachedShaders([MarshalAs(UnmanagedType.Interface)] nsIWebGLProgram program);
		
		/// <summary>Member GetAttribLocation </summary>
		/// <param name='program'> </param>
		/// <param name='name'> </param>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetAttribLocation([MarshalAs(UnmanagedType.Interface)] nsIWebGLProgram program, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase name);
		
		/// <summary>Member GetParameter </summary>
		/// <param name='pname'> </param>
		/// <param name='jsContext'> </param>
		/// <returns>A Gecko.JsVal</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetParameter(uint pname, System.IntPtr jsContext);
		
		/// <summary>
        /// Modified: void glGetBufferParameteriv(WebGLenum target, WebGLenum pname, WebGLint* params);
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetBufferParameter(uint target, uint pname);
		
		/// <summary>Member GetError </summary>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetError();
		
		/// <summary>
        /// Modified: void glGetFramebufferAttachmentParameteriv(WebGLenum target, WebGLenum attachment, WebGLenum pname, WebGLint* params);
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetFramebufferAttachmentParameter(uint target, uint attachment, uint pname, System.IntPtr jsContext);
		
		/// <summary>
        /// Modified: void glGetProgramiv(nsIWebGLProgram program, WebGLenum pname, WebGLint* params);
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetProgramParameter([MarshalAs(UnmanagedType.Interface)] nsIWebGLProgram program, uint pname);
		
		/// <summary>
        /// Modified: void glGetProgramInfoLog(WebGLuint program, WebGLsizei bufsize, WebGLsizei* length, char* infolog);
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetProgramInfoLog([MarshalAs(UnmanagedType.Interface)] nsIWebGLProgram program, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase retval);
		
		/// <summary>
        ///nsIWebGLIntArray getRenderbufferParameteriv(in WebGLenum target, in WebGLenum pname);
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetRenderbufferParameter(uint target, uint pname);
		
		/// <summary>Member GetShaderParameter </summary>
		/// <param name='shader'> </param>
		/// <param name='pname'> </param>
		/// <returns>A Gecko.JsVal</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetShaderParameter([MarshalAs(UnmanagedType.Interface)] nsIWebGLShader shader, uint pname);
		
		/// <summary>
        /// Modified: void glGetShaderInfoLog(WebGLuint shader, WebGLsizei bufsize, WebGLsizei* length, char* infolog);
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetShaderInfoLog([MarshalAs(UnmanagedType.Interface)] nsIWebGLShader shader, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase retval);
		
		/// <summary>Member GetShaderPrecisionFormat </summary>
		/// <param name='shadertype'> </param>
		/// <param name='precisiontype'> </param>
		/// <returns>A nsIWebGLShaderPrecisionFormat</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIWebGLShaderPrecisionFormat GetShaderPrecisionFormat(uint shadertype, uint precisiontype);
		
		/// <summary>Member GetShaderSource </summary>
		/// <param name='shader'> </param>
		/// <param name='retval'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetShaderSource([MarshalAs(UnmanagedType.Interface)] nsIWebGLShader shader, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase retval);
		
		/// <summary>Member GetTexParameter </summary>
		/// <param name='target'> </param>
		/// <param name='pname'> </param>
		/// <returns>A Gecko.JsVal</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetTexParameter(uint target, uint pname);
		
		/// <summary>Member GetUniform </summary>
		/// <param name='program'> </param>
		/// <param name='location'> </param>
		/// <param name='jsContext'> </param>
		/// <returns>A Gecko.JsVal</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetUniform([MarshalAs(UnmanagedType.Interface)] nsIWebGLProgram program, [MarshalAs(UnmanagedType.Interface)] nsIWebGLUniformLocation location, System.IntPtr jsContext);
		
		/// <summary>Member GetUniformLocation </summary>
		/// <param name='program'> </param>
		/// <param name='name'> </param>
		/// <returns>A nsIWebGLUniformLocation</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIWebGLUniformLocation GetUniformLocation([MarshalAs(UnmanagedType.Interface)] nsIWebGLProgram program, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase name);
		
		/// <summary>Member GetVertexAttrib </summary>
		/// <param name='index'> </param>
		/// <param name='pname'> </param>
		/// <param name='jsContext'> </param>
		/// <returns>A Gecko.JsVal</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetVertexAttrib(uint index, uint pname, System.IntPtr jsContext);
		
		/// <summary>
        /// void glGetVertexAttribPointerv(WebGLuint index, WebGLenum pname, void** pointer);
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetVertexAttribOffset(uint index, uint pname);
		
		/// <summary>Member Hint </summary>
		/// <param name='target'> </param>
		/// <param name='mode'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Hint(uint target, uint mode);
		
		/// <summary>Member IsBuffer </summary>
		/// <param name='buffer'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsBuffer([MarshalAs(UnmanagedType.Interface)] nsIWebGLBuffer buffer);
		
		/// <summary>Member IsFramebuffer </summary>
		/// <param name='framebuffer'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsFramebuffer([MarshalAs(UnmanagedType.Interface)] nsIWebGLFramebuffer framebuffer);
		
		/// <summary>Member IsProgram </summary>
		/// <param name='program'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsProgram([MarshalAs(UnmanagedType.Interface)] nsIWebGLProgram program);
		
		/// <summary>Member IsRenderbuffer </summary>
		/// <param name='renderbuffer'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsRenderbuffer([MarshalAs(UnmanagedType.Interface)] nsIWebGLRenderbuffer renderbuffer);
		
		/// <summary>Member IsShader </summary>
		/// <param name='shader'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsShader([MarshalAs(UnmanagedType.Interface)] nsIWebGLShader shader);
		
		/// <summary>Member IsTexture </summary>
		/// <param name='texture'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsTexture([MarshalAs(UnmanagedType.Interface)] nsIWebGLTexture texture);
		
		/// <summary>Member IsEnabled </summary>
		/// <param name='cap'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsEnabled(uint cap);
		
		/// <summary>Member LineWidth </summary>
		/// <param name='width'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LineWidth(double width);
		
		/// <summary>Member LinkProgram </summary>
		/// <param name='program'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LinkProgram([MarshalAs(UnmanagedType.Interface)] nsIWebGLProgram program);
		
		/// <summary>Member PixelStorei </summary>
		/// <param name='pname'> </param>
		/// <param name='param'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PixelStorei(uint pname, int param);
		
		/// <summary>Member PolygonOffset </summary>
		/// <param name='factor'> </param>
		/// <param name='units'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PolygonOffset(double factor, double units);
		
		/// <summary>Member ReadPixels </summary>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='width'> </param>
		/// <param name='height'> </param>
		/// <param name='format'> </param>
		/// <param name='type'> </param>
		/// <param name='pixels'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ReadPixels(int x, int y, int width, int height, uint format, uint type, Gecko.JsVal pixels, System.IntPtr jsContext);
		
		/// <summary>
        ///void glReleaseShaderCompiler();
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RenderbufferStorage(uint target, uint internalformat, int width, int height);
		
		/// <summary>Member SampleCoverage </summary>
		/// <param name='value'> </param>
		/// <param name='invert'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SampleCoverage(double value, bool invert);
		
		/// <summary>Member Scissor </summary>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='width'> </param>
		/// <param name='height'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Scissor(int x, int y, int width, int height);
		
		/// <summary>
        /// Modified: void glShaderSource(WebGLuint shader, WebGLsizei count, const char** string, const WebGLint* length);
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ShaderSource([MarshalAs(UnmanagedType.Interface)] nsIWebGLShader shader, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase source);
		
		/// <summary>Member StencilFunc </summary>
		/// <param name='func'> </param>
		/// <param name='ref'> </param>
		/// <param name='mask'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StencilFunc(uint func, int @ref, uint mask);
		
		/// <summary>Member StencilFuncSeparate </summary>
		/// <param name='face'> </param>
		/// <param name='func'> </param>
		/// <param name='ref'> </param>
		/// <param name='mask'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StencilFuncSeparate(uint face, uint func, int @ref, uint mask);
		
		/// <summary>Member StencilMask </summary>
		/// <param name='mask'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StencilMask(uint mask);
		
		/// <summary>Member StencilMaskSeparate </summary>
		/// <param name='face'> </param>
		/// <param name='mask'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StencilMaskSeparate(uint face, uint mask);
		
		/// <summary>Member StencilOp </summary>
		/// <param name='fail'> </param>
		/// <param name='zfail'> </param>
		/// <param name='zpass'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StencilOp(uint fail, uint zfail, uint zpass);
		
		/// <summary>Member StencilOpSeparate </summary>
		/// <param name='face'> </param>
		/// <param name='fail'> </param>
		/// <param name='zfail'> </param>
		/// <param name='zpass'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StencilOpSeparate(uint face, uint fail, uint zfail, uint zpass);
		
		/// <summary>Member TexImage2D </summary>
		/// <param name='dummy'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void TexImage2D(int dummy);
		
		/// <summary>Member TexImage2D_array </summary>
		/// <param name='target'> </param>
		/// <param name='level'> </param>
		/// <param name='internalformat'> </param>
		/// <param name='width'> </param>
		/// <param name='height'> </param>
		/// <param name='border'> </param>
		/// <param name='format'> </param>
		/// <param name='type'> </param>
		/// <param name='pixels'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void TexImage2D_array(uint target, int level, uint internalformat, int width, int height, int border, uint format, uint type, System.IntPtr pixels, System.IntPtr jsContext);
		
		/// <summary>Member TexImage2D_imageData </summary>
		/// <param name='target'> </param>
		/// <param name='level'> </param>
		/// <param name='internalformat'> </param>
		/// <param name='width'> </param>
		/// <param name='height'> </param>
		/// <param name='border'> </param>
		/// <param name='format'> </param>
		/// <param name='type'> </param>
		/// <param name='pixels'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void TexImage2D_imageData(uint target, int level, uint internalformat, int width, int height, int border, uint format, uint type, System.IntPtr pixels, System.IntPtr jsContext);
		
		/// <summary>
        /// HTMLImageElement, HTMLCanvasElement, HTMLVideoElement
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void TexImage2D_dom(uint target, int level, uint internalformat, uint format, uint type, Element element);
		
		/// <summary>Member TexSubImage2D </summary>
		/// <param name='dummy'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void TexSubImage2D(int dummy);
		
		/// <summary>Member TexSubImage2D_array </summary>
		/// <param name='target'> </param>
		/// <param name='level'> </param>
		/// <param name='xoffset'> </param>
		/// <param name='yoffset'> </param>
		/// <param name='width'> </param>
		/// <param name='height'> </param>
		/// <param name='format'> </param>
		/// <param name='type'> </param>
		/// <param name='pixels'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void TexSubImage2D_array(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, System.IntPtr pixels, System.IntPtr jsContext);
		
		/// <summary>Member TexSubImage2D_imageData </summary>
		/// <param name='target'> </param>
		/// <param name='level'> </param>
		/// <param name='xoffset'> </param>
		/// <param name='yoffset'> </param>
		/// <param name='width'> </param>
		/// <param name='height'> </param>
		/// <param name='format'> </param>
		/// <param name='type'> </param>
		/// <param name='pixels'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void TexSubImage2D_imageData(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, System.IntPtr pixels, System.IntPtr jsContext);
		
		/// <summary>
        /// HTMLImageElement, HTMLCanvasElement, HTMLVideoElement
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void TexSubImage2D_dom(uint target, int level, int xoffset, int yoffset, uint format, uint type, Element element);
		
		/// <summary>
        /// Modified: This replaces glTexParameterf, glTexParameterfv, glTexParameteri and glTexParameteriv
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void TexParameterf(uint target, uint pname, double param);
		
		/// <summary>Member TexParameteri </summary>
		/// <param name='target'> </param>
		/// <param name='pname'> </param>
		/// <param name='param'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void TexParameteri(uint target, uint pname, int param);
		
		/// <summary>
        /// Modified: All the glUniform*v forms below are modified by replacing 'count' and 'v' with a nsIWebGLArray
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Uniform1f([MarshalAs(UnmanagedType.Interface)] nsIWebGLUniformLocation location, double x);
		
		/// <summary>Member Uniform1i </summary>
		/// <param name='location'> </param>
		/// <param name='x'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Uniform1i([MarshalAs(UnmanagedType.Interface)] nsIWebGLUniformLocation location, int x);
		
		/// <summary>Member Uniform2f </summary>
		/// <param name='location'> </param>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Uniform2f([MarshalAs(UnmanagedType.Interface)] nsIWebGLUniformLocation location, double x, double y);
		
		/// <summary>Member Uniform2i </summary>
		/// <param name='location'> </param>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Uniform2i([MarshalAs(UnmanagedType.Interface)] nsIWebGLUniformLocation location, int x, int y);
		
		/// <summary>Member Uniform3f </summary>
		/// <param name='location'> </param>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='z'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Uniform3f([MarshalAs(UnmanagedType.Interface)] nsIWebGLUniformLocation location, double x, double y, double z);
		
		/// <summary>Member Uniform3i </summary>
		/// <param name='location'> </param>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='z'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Uniform3i([MarshalAs(UnmanagedType.Interface)] nsIWebGLUniformLocation location, int x, int y, int z);
		
		/// <summary>Member Uniform4f </summary>
		/// <param name='location'> </param>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='z'> </param>
		/// <param name='w'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Uniform4f([MarshalAs(UnmanagedType.Interface)] nsIWebGLUniformLocation location, double x, double y, double z, double w);
		
		/// <summary>Member Uniform4i </summary>
		/// <param name='location'> </param>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='z'> </param>
		/// <param name='w'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Uniform4i([MarshalAs(UnmanagedType.Interface)] nsIWebGLUniformLocation location, int x, int y, int z, int w);
		
		/// <summary>Member Uniform1fv </summary>
		/// <param name='location'> </param>
		/// <param name='v'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Uniform1fv([MarshalAs(UnmanagedType.Interface)] nsIWebGLUniformLocation location, Gecko.JsVal v, System.IntPtr jsContext);
		
		/// <summary>Member Uniform1iv </summary>
		/// <param name='location'> </param>
		/// <param name='v'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Uniform1iv([MarshalAs(UnmanagedType.Interface)] nsIWebGLUniformLocation location, Gecko.JsVal v, System.IntPtr jsContext);
		
		/// <summary>Member Uniform2fv </summary>
		/// <param name='location'> </param>
		/// <param name='v'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Uniform2fv([MarshalAs(UnmanagedType.Interface)] nsIWebGLUniformLocation location, Gecko.JsVal v, System.IntPtr jsContext);
		
		/// <summary>Member Uniform2iv </summary>
		/// <param name='location'> </param>
		/// <param name='v'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Uniform2iv([MarshalAs(UnmanagedType.Interface)] nsIWebGLUniformLocation location, Gecko.JsVal v, System.IntPtr jsContext);
		
		/// <summary>Member Uniform3fv </summary>
		/// <param name='location'> </param>
		/// <param name='v'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Uniform3fv([MarshalAs(UnmanagedType.Interface)] nsIWebGLUniformLocation location, Gecko.JsVal v, System.IntPtr jsContext);
		
		/// <summary>Member Uniform3iv </summary>
		/// <param name='location'> </param>
		/// <param name='v'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Uniform3iv([MarshalAs(UnmanagedType.Interface)] nsIWebGLUniformLocation location, Gecko.JsVal v, System.IntPtr jsContext);
		
		/// <summary>Member Uniform4fv </summary>
		/// <param name='location'> </param>
		/// <param name='v'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Uniform4fv([MarshalAs(UnmanagedType.Interface)] nsIWebGLUniformLocation location, Gecko.JsVal v, System.IntPtr jsContext);
		
		/// <summary>Member Uniform4iv </summary>
		/// <param name='location'> </param>
		/// <param name='v'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Uniform4iv([MarshalAs(UnmanagedType.Interface)] nsIWebGLUniformLocation location, Gecko.JsVal v, System.IntPtr jsContext);
		
		/// <summary>Member UniformMatrix2fv </summary>
		/// <param name='location'> </param>
		/// <param name='transpose'> </param>
		/// <param name='value'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UniformMatrix2fv([MarshalAs(UnmanagedType.Interface)] nsIWebGLUniformLocation location, [MarshalAs(UnmanagedType.U1)] bool transpose, Gecko.JsVal value, System.IntPtr jsContext);
		
		/// <summary>Member UniformMatrix3fv </summary>
		/// <param name='location'> </param>
		/// <param name='transpose'> </param>
		/// <param name='value'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UniformMatrix3fv([MarshalAs(UnmanagedType.Interface)] nsIWebGLUniformLocation location, [MarshalAs(UnmanagedType.U1)] bool transpose, Gecko.JsVal value, System.IntPtr jsContext);
		
		/// <summary>Member UniformMatrix4fv </summary>
		/// <param name='location'> </param>
		/// <param name='transpose'> </param>
		/// <param name='value'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UniformMatrix4fv([MarshalAs(UnmanagedType.Interface)] nsIWebGLUniformLocation location, [MarshalAs(UnmanagedType.U1)] bool transpose, Gecko.JsVal value, System.IntPtr jsContext);
		
		/// <summary>
        ///ZZ void glUniformMatrix(in WebGLint location, in WebGLboolean transpose, in nsIWebGLMatrixStack value);
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UseProgram([MarshalAs(UnmanagedType.Interface)] nsIWebGLProgram program);
		
		/// <summary>Member ValidateProgram </summary>
		/// <param name='program'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ValidateProgram([MarshalAs(UnmanagedType.Interface)] nsIWebGLProgram program);
		
		/// <summary>
        /// Modified: All the glVertexAttrib*v forms below are modified by replacing 'values' with a WebGLJSObjectPtr
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void VertexAttrib1f(uint indx, double x);
		
		/// <summary>Member VertexAttrib2f </summary>
		/// <param name='indx'> </param>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void VertexAttrib2f(uint indx, double x, double y);
		
		/// <summary>Member VertexAttrib3f </summary>
		/// <param name='indx'> </param>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='z'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void VertexAttrib3f(uint indx, double x, double y, double z);
		
		/// <summary>Member VertexAttrib4f </summary>
		/// <param name='indx'> </param>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='z'> </param>
		/// <param name='w'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void VertexAttrib4f(uint indx, double x, double y, double z, double w);
		
		/// <summary>Member VertexAttrib1fv </summary>
		/// <param name='indx'> </param>
		/// <param name='values'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void VertexAttrib1fv(uint indx, Gecko.JsVal values, System.IntPtr jsContext);
		
		/// <summary>Member VertexAttrib2fv </summary>
		/// <param name='indx'> </param>
		/// <param name='values'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void VertexAttrib2fv(uint indx, Gecko.JsVal values, System.IntPtr jsContext);
		
		/// <summary>Member VertexAttrib3fv </summary>
		/// <param name='indx'> </param>
		/// <param name='values'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void VertexAttrib3fv(uint indx, Gecko.JsVal values, System.IntPtr jsContext);
		
		/// <summary>Member VertexAttrib4fv </summary>
		/// <param name='indx'> </param>
		/// <param name='values'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void VertexAttrib4fv(uint indx, Gecko.JsVal values, System.IntPtr jsContext);
		
		/// <summary>
        /// size is number of elements per attrib; offset, stride are in bytes
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void VertexAttribPointer(uint idx, int size, uint type, bool normalized, int stride, System.IntPtr offset);
		
		/// <summary>Member Viewport </summary>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='width'> </param>
		/// <param name='height'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Viewport(int x, int y, int width, int height);
		
		/// <summary>
        /// the underlying renderer to the user.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MozGetUnderlyingParamString(uint pname, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase retval);
		
		/// <summary>
        /// extensions
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIWebGLExtension GetExtension([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase name);
		
		/// <summary>Member GetSupportedExtensions </summary>
		/// <returns>A nsIVariant</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIVariant GetSupportedExtensions();
		
		/// <summary>Member IsContextLost </summary>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsContextLost();
		
		/// <summary>Member GetDrawingBufferWidthAttribute </summary>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetDrawingBufferWidthAttribute();
		
		/// <summary>Member GetDrawingBufferHeightAttribute </summary>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetDrawingBufferHeightAttribute();
	}
	
	/// <summary>nsIDOMWebGLRenderingContextConsts </summary>
	public class nsIDOMWebGLRenderingContextConsts
	{
		
		// <summary>
        //ClearBufferMask </summary>
		public const ulong DEPTH_BUFFER_BIT = 0x00000100;
		
		// 
		public const ulong STENCIL_BUFFER_BIT = 0x00000400;
		
		// 
		public const ulong COLOR_BUFFER_BIT = 0x00004000;
		
		// <summary>
        //BeginMode </summary>
		public const ulong POINTS = 0x0000;
		
		// 
		public const ulong LINES = 0x0001;
		
		// 
		public const ulong LINE_LOOP = 0x0002;
		
		// 
		public const ulong LINE_STRIP = 0x0003;
		
		// 
		public const ulong TRIANGLES = 0x0004;
		
		// 
		public const ulong TRIANGLE_STRIP = 0x0005;
		
		// 
		public const ulong TRIANGLE_FAN = 0x0006;
		
		// <summary>
        //BlendingFactorDest </summary>
		public const ulong ZERO = 0;
		
		// 
		public const ulong ONE = 1;
		
		// 
		public const ulong SRC_COLOR = 0x0300;
		
		// 
		public const ulong ONE_MINUS_SRC_COLOR = 0x0301;
		
		// 
		public const ulong SRC_ALPHA = 0x0302;
		
		// 
		public const ulong ONE_MINUS_SRC_ALPHA = 0x0303;
		
		// 
		public const ulong DST_ALPHA = 0x0304;
		
		// 
		public const ulong ONE_MINUS_DST_ALPHA = 0x0305;
		
		// <summary>
        //GL_ONE </summary>
		public const ulong DST_COLOR = 0x0306;
		
		// 
		public const ulong ONE_MINUS_DST_COLOR = 0x0307;
		
		// 
		public const ulong SRC_ALPHA_SATURATE = 0x0308;
		
		// <summary>
        //BlendEquationSeparate </summary>
		public const ulong FUNC_ADD = 0x8006;
		
		// 
		public const ulong BLEND_EQUATION = 0x8009;
		
		// 
		public const ulong BLEND_EQUATION_RGB = 0x8009;
		
		// <summary>
        //same as BLEND_EQUATION </summary>
		public const ulong BLEND_EQUATION_ALPHA = 0x883D;
		
		// <summary>
        //BlendSubtract </summary>
		public const ulong FUNC_SUBTRACT = 0x800A;
		
		// 
		public const ulong FUNC_REVERSE_SUBTRACT = 0x800B;
		
		// <summary>
        //Separate Blend Functions </summary>
		public const ulong BLEND_DST_RGB = 0x80C8;
		
		// 
		public const ulong BLEND_SRC_RGB = 0x80C9;
		
		// 
		public const ulong BLEND_DST_ALPHA = 0x80CA;
		
		// 
		public const ulong BLEND_SRC_ALPHA = 0x80CB;
		
		// 
		public const ulong CONSTANT_COLOR = 0x8001;
		
		// 
		public const ulong ONE_MINUS_CONSTANT_COLOR = 0x8002;
		
		// 
		public const ulong CONSTANT_ALPHA = 0x8003;
		
		// 
		public const ulong ONE_MINUS_CONSTANT_ALPHA = 0x8004;
		
		// 
		public const ulong BLEND_COLOR = 0x8005;
		
		// <summary>
        //Buffer Objects </summary>
		public const ulong ARRAY_BUFFER = 0x8892;
		
		// 
		public const ulong ELEMENT_ARRAY_BUFFER = 0x8893;
		
		// 
		public const ulong ARRAY_BUFFER_BINDING = 0x8894;
		
		// 
		public const ulong ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
		
		// 
		public const ulong STREAM_DRAW = 0x88E0;
		
		// 
		public const ulong STATIC_DRAW = 0x88E4;
		
		// 
		public const ulong DYNAMIC_DRAW = 0x88E8;
		
		// 
		public const ulong BUFFER_SIZE = 0x8764;
		
		// 
		public const ulong BUFFER_USAGE = 0x8765;
		
		// 
		public const ulong CURRENT_VERTEX_ATTRIB = 0x8626;
		
		// <summary>
        //CullFaceMode </summary>
		public const ulong FRONT = 0x0404;
		
		// 
		public const ulong BACK = 0x0405;
		
		// 
		public const ulong FRONT_AND_BACK = 0x0408;
		
		// <summary>
        //EnableCap </summary>
		public const ulong TEXTURE_2D = 0x0DE1;
		
		// 
		public const ulong CULL_FACE = 0x0B44;
		
		// 
		public const ulong BLEND = 0x0BE2;
		
		// 
		public const ulong DITHER = 0x0BD0;
		
		// 
		public const ulong STENCIL_TEST = 0x0B90;
		
		// 
		public const ulong DEPTH_TEST = 0x0B71;
		
		// 
		public const ulong SCISSOR_TEST = 0x0C11;
		
		// 
		public const ulong POLYGON_OFFSET_FILL = 0x8037;
		
		// 
		public const ulong SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
		
		// 
		public const ulong SAMPLE_COVERAGE = 0x80A0;
		
		// <summary>
        //ErrorCode </summary>
		public const ulong NO_ERROR = 0;
		
		// 
		public const ulong INVALID_ENUM = 0x0500;
		
		// 
		public const ulong INVALID_VALUE = 0x0501;
		
		// 
		public const ulong INVALID_OPERATION = 0x0502;
		
		// 
		public const ulong OUT_OF_MEMORY = 0x0505;
		
		// <summary>
        //FrontFaceDirection </summary>
		public const ulong CW = 0x0900;
		
		// 
		public const ulong CCW = 0x0901;
		
		// <summary>
        //GetPName </summary>
		public const ulong LINE_WIDTH = 0x0B21;
		
		// 
		public const ulong ALIASED_POINT_SIZE_RANGE = 0x846D;
		
		// 
		public const ulong ALIASED_LINE_WIDTH_RANGE = 0x846E;
		
		// 
		public const ulong CULL_FACE_MODE = 0x0B45;
		
		// 
		public const ulong FRONT_FACE = 0x0B46;
		
		// 
		public const ulong DEPTH_RANGE = 0x0B70;
		
		// 
		public const ulong DEPTH_WRITEMASK = 0x0B72;
		
		// 
		public const ulong DEPTH_CLEAR_VALUE = 0x0B73;
		
		// 
		public const ulong DEPTH_FUNC = 0x0B74;
		
		// 
		public const ulong STENCIL_CLEAR_VALUE = 0x0B91;
		
		// 
		public const ulong STENCIL_FUNC = 0x0B92;
		
		// 
		public const ulong STENCIL_FAIL = 0x0B94;
		
		// 
		public const ulong STENCIL_PASS_DEPTH_FAIL = 0x0B95;
		
		// 
		public const ulong STENCIL_PASS_DEPTH_PASS = 0x0B96;
		
		// 
		public const ulong STENCIL_REF = 0x0B97;
		
		// 
		public const ulong STENCIL_VALUE_MASK = 0x0B93;
		
		// 
		public const ulong STENCIL_WRITEMASK = 0x0B98;
		
		// 
		public const ulong STENCIL_BACK_FUNC = 0x8800;
		
		// 
		public const ulong STENCIL_BACK_FAIL = 0x8801;
		
		// 
		public const ulong STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
		
		// 
		public const ulong STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
		
		// 
		public const ulong STENCIL_BACK_REF = 0x8CA3;
		
		// 
		public const ulong STENCIL_BACK_VALUE_MASK = 0x8CA4;
		
		// 
		public const ulong STENCIL_BACK_WRITEMASK = 0x8CA5;
		
		// <summary>
        //const unsigned long VIEWPORT                       = 0x0BA2;
        // </summary>
		public const ulong SCISSOR_BOX = 0x0C10;
		
		// <summary>
        //GL_SCISSOR_TEST </summary>
		public const ulong COLOR_CLEAR_VALUE = 0x0C22;
		
		// 
		public const ulong COLOR_WRITEMASK = 0x0C23;
		
		// 
		public const ulong UNPACK_ALIGNMENT = 0x0CF5;
		
		// 
		public const ulong PACK_ALIGNMENT = 0x0D05;
		
		// 
		public const ulong MAX_TEXTURE_SIZE = 0x0D33;
		
		// 
		public const ulong MAX_VIEWPORT_DIMS = 0x0D3A;
		
		// 
		public const ulong SUBPIXEL_BITS = 0x0D50;
		
		// 
		public const ulong RED_BITS = 0x0D52;
		
		// 
		public const ulong GREEN_BITS = 0x0D53;
		
		// 
		public const ulong BLUE_BITS = 0x0D54;
		
		// 
		public const ulong ALPHA_BITS = 0x0D55;
		
		// 
		public const ulong DEPTH_BITS = 0x0D56;
		
		// 
		public const ulong STENCIL_BITS = 0x0D57;
		
		// 
		public const ulong POLYGON_OFFSET_UNITS = 0x2A00;
		
		// <summary>
        //GL_POLYGON_OFFSET_FILL </summary>
		public const ulong POLYGON_OFFSET_FACTOR = 0x8038;
		
		// 
		public const ulong TEXTURE_BINDING_2D = 0x8069;
		
		// 
		public const ulong SAMPLE_BUFFERS = 0x80A8;
		
		// 
		public const ulong SAMPLES = 0x80A9;
		
		// 
		public const ulong SAMPLE_COVERAGE_VALUE = 0x80AA;
		
		// 
		public const ulong SAMPLE_COVERAGE_INVERT = 0x80AB;
		
		// <summary>
        //GL_TEXTURE_WRAP_T </summary>
		public const ulong NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
		
		// 
		public const ulong COMPRESSED_TEXTURE_FORMATS = 0x86A3;
		
		// <summary>
        //HintMode </summary>
		public const ulong DONT_CARE = 0x1100;
		
		// 
		public const ulong FASTEST = 0x1101;
		
		// 
		public const ulong NICEST = 0x1102;
		
		// <summary>
        //HintTarget </summary>
		public const ulong GENERATE_MIPMAP_HINT = 0x8192;
		
		// <summary>
        //DataType </summary>
		public const ulong BYTE = 0x1400;
		
		// 
		public const ulong UNSIGNED_BYTE = 0x1401;
		
		// 
		public const ulong SHORT = 0x1402;
		
		// 
		public const ulong UNSIGNED_SHORT = 0x1403;
		
		// 
		public const ulong INT = 0x1404;
		
		// 
		public const ulong UNSIGNED_INT = 0x1405;
		
		// 
		public const ulong FLOAT = 0x1406;
		
		// <summary>
        //PixelFormat </summary>
		public const ulong DEPTH_COMPONENT = 0x1902;
		
		// 
		public const ulong ALPHA = 0x1906;
		
		// 
		public const ulong RGB = 0x1907;
		
		// 
		public const ulong RGBA = 0x1908;
		
		// 
		public const ulong LUMINANCE = 0x1909;
		
		// 
		public const ulong LUMINANCE_ALPHA = 0x190A;
		
		// <summary>
        //GL_UNSIGNED_BYTE </summary>
		public const ulong UNSIGNED_SHORT_4_4_4_4 = 0x8033;
		
		// 
		public const ulong UNSIGNED_SHORT_5_5_5_1 = 0x8034;
		
		// 
		public const ulong UNSIGNED_SHORT_5_6_5 = 0x8363;
		
		// <summary>
        //Shaders </summary>
		public const ulong FRAGMENT_SHADER = 0x8B30;
		
		// 
		public const ulong VERTEX_SHADER = 0x8B31;
		
		// 
		public const ulong MAX_VERTEX_ATTRIBS = 0x8869;
		
		// 
		public const ulong MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
		
		// 
		public const ulong MAX_VARYING_VECTORS = 0x8DFC;
		
		// 
		public const ulong MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
		
		// 
		public const ulong MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
		
		// 
		public const ulong MAX_TEXTURE_IMAGE_UNITS = 0x8872;
		
		// 
		public const ulong MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
		
		// 
		public const ulong SHADER_TYPE = 0x8B4F;
		
		// 
		public const ulong DELETE_STATUS = 0x8B80;
		
		// 
		public const ulong LINK_STATUS = 0x8B82;
		
		// 
		public const ulong VALIDATE_STATUS = 0x8B83;
		
		// 
		public const ulong ATTACHED_SHADERS = 0x8B85;
		
		// 
		public const ulong ACTIVE_UNIFORMS = 0x8B86;
		
		// 
		public const ulong ACTIVE_ATTRIBUTES = 0x8B89;
		
		// 
		public const ulong SHADING_LANGUAGE_VERSION = 0x8B8C;
		
		// 
		public const ulong CURRENT_PROGRAM = 0x8B8D;
		
		// <summary>
        //StencilFunction </summary>
		public const ulong NEVER = 0x0200;
		
		// 
		public const ulong LESS = 0x0201;
		
		// 
		public const ulong EQUAL = 0x0202;
		
		// 
		public const ulong LEQUAL = 0x0203;
		
		// 
		public const ulong GREATER = 0x0204;
		
		// 
		public const ulong NOTEQUAL = 0x0205;
		
		// 
		public const ulong GEQUAL = 0x0206;
		
		// 
		public const ulong ALWAYS = 0x0207;
		
		// <summary>
        //GL_ZERO </summary>
		public const ulong KEEP = 0x1E00;
		
		// 
		public const ulong REPLACE = 0x1E01;
		
		// 
		public const ulong INCR = 0x1E02;
		
		// 
		public const ulong DECR = 0x1E03;
		
		// 
		public const ulong INVERT = 0x150A;
		
		// 
		public const ulong INCR_WRAP = 0x8507;
		
		// 
		public const ulong DECR_WRAP = 0x8508;
		
		// <summary>
        //StringName </summary>
		public const ulong VENDOR = 0x1F00;
		
		// 
		public const ulong RENDERER = 0x1F01;
		
		// 
		public const ulong VERSION = 0x1F02;
		
		// 
		public const ulong EXTENSIONS = 0x1F03;
		
		// <summary>
        //TextureMagFilter </summary>
		public const ulong NEAREST = 0x2600;
		
		// 
		public const ulong LINEAR = 0x2601;
		
		// <summary>
        //GL_LINEAR </summary>
		public const ulong NEAREST_MIPMAP_NEAREST = 0x2700;
		
		// 
		public const ulong LINEAR_MIPMAP_NEAREST = 0x2701;
		
		// 
		public const ulong NEAREST_MIPMAP_LINEAR = 0x2702;
		
		// 
		public const ulong LINEAR_MIPMAP_LINEAR = 0x2703;
		
		// <summary>
        //TextureParameterName </summary>
		public const ulong TEXTURE_MAG_FILTER = 0x2800;
		
		// 
		public const ulong TEXTURE_MIN_FILTER = 0x2801;
		
		// 
		public const ulong TEXTURE_WRAP_S = 0x2802;
		
		// 
		public const ulong TEXTURE_WRAP_T = 0x2803;
		
		// <summary>
        //GL_TEXTURE_2D </summary>
		public const ulong TEXTURE = 0x1702;
		
		// 
		public const ulong TEXTURE_CUBE_MAP = 0x8513;
		
		// 
		public const ulong TEXTURE_BINDING_CUBE_MAP = 0x8514;
		
		// 
		public const ulong TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
		
		// 
		public const ulong TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
		
		// 
		public const ulong TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
		
		// 
		public const ulong TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
		
		// 
		public const ulong TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
		
		// 
		public const ulong TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
		
		// 
		public const ulong MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
		
		// <summary>
        //TextureUnit </summary>
		public const ulong TEXTURE0 = 0x84C0;
		
		// 
		public const ulong TEXTURE1 = 0x84C1;
		
		// 
		public const ulong TEXTURE2 = 0x84C2;
		
		// 
		public const ulong TEXTURE3 = 0x84C3;
		
		// 
		public const ulong TEXTURE4 = 0x84C4;
		
		// 
		public const ulong TEXTURE5 = 0x84C5;
		
		// 
		public const ulong TEXTURE6 = 0x84C6;
		
		// 
		public const ulong TEXTURE7 = 0x84C7;
		
		// 
		public const ulong TEXTURE8 = 0x84C8;
		
		// 
		public const ulong TEXTURE9 = 0x84C9;
		
		// 
		public const ulong TEXTURE10 = 0x84CA;
		
		// 
		public const ulong TEXTURE11 = 0x84CB;
		
		// 
		public const ulong TEXTURE12 = 0x84CC;
		
		// 
		public const ulong TEXTURE13 = 0x84CD;
		
		// 
		public const ulong TEXTURE14 = 0x84CE;
		
		// 
		public const ulong TEXTURE15 = 0x84CF;
		
		// 
		public const ulong TEXTURE16 = 0x84D0;
		
		// 
		public const ulong TEXTURE17 = 0x84D1;
		
		// 
		public const ulong TEXTURE18 = 0x84D2;
		
		// 
		public const ulong TEXTURE19 = 0x84D3;
		
		// 
		public const ulong TEXTURE20 = 0x84D4;
		
		// 
		public const ulong TEXTURE21 = 0x84D5;
		
		// 
		public const ulong TEXTURE22 = 0x84D6;
		
		// 
		public const ulong TEXTURE23 = 0x84D7;
		
		// 
		public const ulong TEXTURE24 = 0x84D8;
		
		// 
		public const ulong TEXTURE25 = 0x84D9;
		
		// 
		public const ulong TEXTURE26 = 0x84DA;
		
		// 
		public const ulong TEXTURE27 = 0x84DB;
		
		// 
		public const ulong TEXTURE28 = 0x84DC;
		
		// 
		public const ulong TEXTURE29 = 0x84DD;
		
		// 
		public const ulong TEXTURE30 = 0x84DE;
		
		// 
		public const ulong TEXTURE31 = 0x84DF;
		
		// 
		public const ulong ACTIVE_TEXTURE = 0x84E0;
		
		// <summary>
        //TextureWrapMode </summary>
		public const ulong REPEAT = 0x2901;
		
		// 
		public const ulong CLAMP_TO_EDGE = 0x812F;
		
		// 
		public const ulong MIRRORED_REPEAT = 0x8370;
		
		// <summary>
        //Uniform Types </summary>
		public const ulong FLOAT_VEC2 = 0x8B50;
		
		// 
		public const ulong FLOAT_VEC3 = 0x8B51;
		
		// 
		public const ulong FLOAT_VEC4 = 0x8B52;
		
		// 
		public const ulong INT_VEC2 = 0x8B53;
		
		// 
		public const ulong INT_VEC3 = 0x8B54;
		
		// 
		public const ulong INT_VEC4 = 0x8B55;
		
		// 
		public const ulong BOOL = 0x8B56;
		
		// 
		public const ulong BOOL_VEC2 = 0x8B57;
		
		// 
		public const ulong BOOL_VEC3 = 0x8B58;
		
		// 
		public const ulong BOOL_VEC4 = 0x8B59;
		
		// 
		public const ulong FLOAT_MAT2 = 0x8B5A;
		
		// 
		public const ulong FLOAT_MAT3 = 0x8B5B;
		
		// 
		public const ulong FLOAT_MAT4 = 0x8B5C;
		
		// 
		public const ulong SAMPLER_2D = 0x8B5E;
		
		// 
		public const ulong SAMPLER_CUBE = 0x8B60;
		
		// <summary>
        //Vertex Arrays </summary>
		public const ulong VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
		
		// 
		public const ulong VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
		
		// 
		public const ulong VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
		
		// 
		public const ulong VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
		
		// 
		public const ulong VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
		
		// 
		public const ulong VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
		
		// 
		public const ulong VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
		
		// <summary>
        //Shader Source </summary>
		public const ulong COMPILE_STATUS = 0x8B81;
		
		// 
		public const ulong SHADER_COMPILER = 0x8DFA;
		
		// <summary>
        //Shader Precision-Specified Types </summary>
		public const ulong LOW_FLOAT = 0x8DF0;
		
		// 
		public const ulong MEDIUM_FLOAT = 0x8DF1;
		
		// 
		public const ulong HIGH_FLOAT = 0x8DF2;
		
		// 
		public const ulong LOW_INT = 0x8DF3;
		
		// 
		public const ulong MEDIUM_INT = 0x8DF4;
		
		// 
		public const ulong HIGH_INT = 0x8DF5;
		
		// <summary>
        //Framebuffer Object. </summary>
		public const ulong FRAMEBUFFER = 0x8D40;
		
		// 
		public const ulong RENDERBUFFER = 0x8D41;
		
		// 
		public const ulong RGBA4 = 0x8056;
		
		// 
		public const ulong RGB5_A1 = 0x8057;
		
		// 
		public const ulong RGB565 = 0x8D62;
		
		// 
		public const ulong DEPTH_COMPONENT16 = 0x81A5;
		
		// 
		public const ulong STENCIL_INDEX = 0x1901;
		
		// 
		public const ulong STENCIL_INDEX8 = 0x8D48;
		
		// 
		public const ulong DEPTH_STENCIL = 0x84F9;
		
		// 
		public const ulong RENDERBUFFER_WIDTH = 0x8D42;
		
		// 
		public const ulong RENDERBUFFER_HEIGHT = 0x8D43;
		
		// 
		public const ulong RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
		
		// 
		public const ulong RENDERBUFFER_RED_SIZE = 0x8D50;
		
		// 
		public const ulong RENDERBUFFER_GREEN_SIZE = 0x8D51;
		
		// 
		public const ulong RENDERBUFFER_BLUE_SIZE = 0x8D52;
		
		// 
		public const ulong RENDERBUFFER_ALPHA_SIZE = 0x8D53;
		
		// 
		public const ulong RENDERBUFFER_DEPTH_SIZE = 0x8D54;
		
		// 
		public const ulong RENDERBUFFER_STENCIL_SIZE = 0x8D55;
		
		// 
		public const ulong FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
		
		// 
		public const ulong FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
		
		// 
		public const ulong FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
		
		// 
		public const ulong FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
		
		// 
		public const ulong COLOR_ATTACHMENT0 = 0x8CE0;
		
		// 
		public const ulong DEPTH_ATTACHMENT = 0x8D00;
		
		// 
		public const ulong STENCIL_ATTACHMENT = 0x8D20;
		
		// 
		public const ulong DEPTH_STENCIL_ATTACHMENT = 0x821A;
		
		// 
		public const ulong NONE = 0;
		
		// 
		public const ulong FRAMEBUFFER_COMPLETE = 0x8CD5;
		
		// 
		public const ulong FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
		
		// 
		public const ulong FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
		
		// 
		public const ulong FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
		
		// 
		public const ulong FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
		
		// 
		public const ulong FRAMEBUFFER_BINDING = 0x8CA6;
		
		// 
		public const ulong RENDERBUFFER_BINDING = 0x8CA7;
		
		// 
		public const ulong MAX_RENDERBUFFER_SIZE = 0x84E8;
		
		// 
		public const ulong INVALID_FRAMEBUFFER_OPERATION = 0x0506;
		
		// 
		public const ulong UNPACK_FLIP_Y_WEBGL = 0x9240;
		
		// 
		public const ulong UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;
		
		// 
		public const ulong CONTEXT_LOST_WEBGL = 0x9242;
		
		// 
		public const ulong UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;
		
		// 
		public const ulong BROWSER_DEFAULT_WEBGL = 0x9244;
	}
}
