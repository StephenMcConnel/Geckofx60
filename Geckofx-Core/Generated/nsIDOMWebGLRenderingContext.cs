// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIDOMWebGLRenderingContext.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("a85d4fd0-5b9f-4cb8-aeee-5a2c5c5bad76")]
	public interface nsIWebGLActiveInfo
	{
		
		/// <summary>
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetSizeAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetTypeAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aName);
	}
	
	/// <summary>
    ///Base class for all WebGL extensions, and for those without
    /// any additional tokens/methods.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("70814f32-a5c5-4b95-83d5-ac653bac3316")]
	public interface nsIWebGLExtension
	{
	}
	
	/// <summary>
    ///Classes that extend on nsIWebGLExtension and provide
    /// extra tokens, functions, etc.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("3de3dfd9-864a-4e4c-989b-2977eaa80b7b")]
	public interface nsIWebGLExtensionStandardDerivatives : nsIWebGLExtension
	{
	}
	
	/// <summary>nsIWebGLExtensionStandardDerivativesConsts </summary>
	public class nsIWebGLExtensionStandardDerivativesConsts
	{
		
		// <summary>
        //Fragment shader hint </summary>
		public const long FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x8B8B;
	}
	
	/// <summary>nsIWebGLExtensionLoseContext </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("b0afc2eb-0895-4509-98de-5c383d160694")]
	public interface nsIWebGLExtensionLoseContext : nsIWebGLExtension
	{
		
		/// <summary>Member LoseContext </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LoseContext();
		
		/// <summary>Member RestoreContext </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RestoreContext();
	}
	
	/// <summary>nsIWebGLExtensionTextureFilterAnisotropic </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("73bfb64d-94bd-4a7a-9eab-6b6d32e57aa0")]
	public interface nsIWebGLExtensionTextureFilterAnisotropic : nsIWebGLExtension
	{
	}
	
	/// <summary>nsIWebGLExtensionTextureFilterAnisotropicConsts </summary>
	public class nsIWebGLExtensionTextureFilterAnisotropicConsts
	{
		
		// 
		public const long TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
		
		// 
		public const long MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
	}
	
	/// <summary>nsIWebGLExtensionCompressedTextureS3TC </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("a1508b6f-f2ab-44cf-bbb4-3cfb339e1e8a")]
	public interface nsIWebGLExtensionCompressedTextureS3TC : nsIWebGLExtension
	{
	}
	
	/// <summary>nsIWebGLExtensionCompressedTextureS3TCConsts </summary>
	public class nsIWebGLExtensionCompressedTextureS3TCConsts
	{
		
		// <summary>
        //Compressed Texture Formats </summary>
		public const long COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
		
		// 
		public const long COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
		
		// 
		public const long COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
		
		// 
		public const long COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
	}
	
	/// <summary>nsIWebGLExtensionCompressedTextureATC </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("9592637f-ee3b-4c42-8329-5c9ad47411c1")]
	public interface nsIWebGLExtensionCompressedTextureATC : nsIWebGLExtension
	{
	}
	
	/// <summary>nsIWebGLExtensionCompressedTextureATCConsts </summary>
	public class nsIWebGLExtensionCompressedTextureATCConsts
	{
		
		// <summary>
        //Compressed Texture Formats </summary>
		public const long COMPRESSED_RGB_ATC_WEBGL = 0x8C92;
		
		// 
		public const long COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C93;
		
		// 
		public const long COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE;
	}
	
	/// <summary>nsIWebGLExtensionCompressedTexturePVRTC </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("c33aa5a1-035c-4dfa-b240-df71395ad0f8")]
	public interface nsIWebGLExtensionCompressedTexturePVRTC : nsIWebGLExtension
	{
	}
	
	/// <summary>nsIWebGLExtensionCompressedTexturePVRTCConsts </summary>
	public class nsIWebGLExtensionCompressedTexturePVRTCConsts
	{
		
		// <summary>
        //Compressed Texture Formats </summary>
		public const long COMPRESSED_RGB_PVRTC_4BPPV1 = 0x8C00;
		
		// 
		public const long COMPRESSED_RGB_PVRTC_2BPPV1 = 0x8C01;
		
		// 
		public const long COMPRESSED_RGBA_PVRTC_4BPPV1 = 0x8C02;
		
		// 
		public const long COMPRESSED_RGBA_PVRTC_2BPPV1 = 0x8C03;
	}
	
	/// <summary>nsIWebGLExtensionDepthTexture </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ef36f000-c1b2-11e1-afa7-0800200c9a66")]
	public interface nsIWebGLExtensionDepthTexture : nsIWebGLExtension
	{
	}
	
	/// <summary>nsIWebGLExtensionDepthTextureConsts </summary>
	public class nsIWebGLExtensionDepthTextureConsts
	{
		
		// 
		public const long UNSIGNED_INT_24_8_WEBGL = 0x84FA;
	}
	
	/// <summary>nsIDOMWebGLRenderingContext </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("a1fdfb76-6a08-4a1a-b0c9-d92ef3357cb9")]
	public interface nsIDOMWebGLRenderingContext
	{
		
		/// <summary>
        /// the underlying renderer to the user.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MozGetUnderlyingParamString(uint pname, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase retval);
	}
}
