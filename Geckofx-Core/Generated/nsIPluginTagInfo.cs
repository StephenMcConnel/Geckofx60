// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPluginTagInfo.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Plugin Tag Info Interface
    /// This interface provides information about the HTML tag on the page.
    /// Some day this might get superseded by a DOM API.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("759a955e-c590-419a-b5f3-e54bb67e24b8")]
	public interface nsIPluginTagInfo
	{
		
		/// <summary>
        /// QueryInterface on nsIPluginInstancePeer to get this.
        ///
        /// (Corresponds to NPP_New's argc, argn, and argv arguments.)
        /// Get a ptr to the paired list of attribute names and values,
        /// returns the length of the array.
        ///
        /// Each name or value is a null-terminated string.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetAttributes(ref System.UInt16 aCount, System.IntPtr aNames, System.IntPtr aValues);
		
		/// <summary>
        /// Gets the value for the named attribute.
        ///
        /// @param aName   - the name of the attribute to find
        /// @param aResult - the resulting attribute
        /// @result - NS_OK if this operation was successful, NS_ERROR_FAILURE if
        /// this operation failed. result is set to NULL if the attribute is not found
        /// else to the found value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetAttribute([MarshalAs(UnmanagedType.LPStr)] string aName, ref System.IntPtr aResult);
		
		/// <summary>
        /// Get the type of the HTML tag that was used ot instantiate this
        /// plugin.  Currently supported tags are EMBED, OBJECT and APPLET.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr GetTagTypeAttribute();
		
		/// <summary>
        /// Get a ptr to the paired list of parameter names and values,
        /// returns the length of the array.
        ///
        /// Each name or value is a null-terminated string.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetParameters(ref System.UInt16 aCount, System.IntPtr aNames, System.IntPtr aValues);
		
		/// <summary>
        /// Get the value for the named parameter.  Returns null
        /// if the parameter was not set.
        ///
        /// @param aName   - name of the parameter
        /// @param aResult - parameter value
        /// @result        - NS_OK if this operation was successful
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetParameter([MarshalAs(UnmanagedType.LPStr)] string aName, ref System.IntPtr aResult);
		
		/// <summary>
        /// Get the document base
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetDocumentBase(ref System.IntPtr aDocumentBase);
		
		/// <summary>
        /// Return an encoding whose name is specified in:
        /// http://java.sun.com/products/jdk/1.1/docs/guide/intl/intl.doc.html#25303
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetDocumentEncoding(ref System.IntPtr aDocumentEncoding);
		
		/// <summary>
        /// Get object alignment
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetAlignment(ref System.IntPtr aElignment);
		
		/// <summary>
        /// Get object width
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetWidthAttribute();
		
		/// <summary>
        /// Get object height
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetHeightAttribute();
		
		/// <summary>
        /// Get border vertical space
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetBorderVertSpaceAttribute();
		
		/// <summary>
        /// Get border horizontal space
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetBorderHorizSpaceAttribute();
		
		/// <summary>
        /// Returns the DOM element corresponding to the tag which references
        /// this plugin in the document.
        ///
        /// @param aDOMElement - resulting DOM element
        /// @result - NS_OK if this operation was successful
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMElement GetDOMElementAttribute();
	}
}
