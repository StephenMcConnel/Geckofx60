// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIDOMPowerManager.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// This interface implements navigator.mozPower
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("7b181fef-2757-4198-89a0-8c426b8439ea")]
	public interface nsIDOMMozPowerManager
	{
		
		/// <summary>
        /// This interface implements navigator.mozPower
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PowerOff();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Reboot();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FactoryReset();
		
		/// <summary>
        /// The listeners are notified when a resource changes its lock state to:
        /// - unlocked
        /// - locked but not visible
        /// - locked and visible
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddWakeLockListener([MarshalAs(UnmanagedType.Interface)] nsIDOMMozWakeLockListener aListener);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveWakeLockListener([MarshalAs(UnmanagedType.Interface)] nsIDOMMozWakeLockListener aListener);
		
		/// <summary>
        /// Query the wake lock state of the topic.
        ///
        /// Possible states are:
        ///
        /// - "unlocked" - nobody holds the wake lock.
        ///
        /// - "locked-foreground" - at least one window holds the wake lock,
        /// and it is visible.
        ///
        /// - "locked-background" - at least one window holds the wake lock,
        /// but all of them are hidden.
        ///
        /// @param aTopic The resource name related to the wake lock.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetWakeLockState([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aTopic, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase retval);
		
		/// <summary>
        /// Is the device's screen currently enabled?  This attribute controls the
        /// device's screen, so setting it to false will turn off the screen.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetScreenEnabledAttribute();
		
		/// <summary>
        /// Is the device's screen currently enabled?  This attribute controls the
        /// device's screen, so setting it to false will turn off the screen.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetScreenEnabledAttribute([MarshalAs(UnmanagedType.U1)] bool aScreenEnabled);
		
		/// <summary>
        /// How bright is the screen's backlight, on a scale from 0 (very dim) to 1
        /// (full brightness)?  Setting this attribute modifies the screen's
        /// brightness.
        ///
        /// You can read and write this attribute even when the screen is disabled,
        /// but the backlight is off while the screen is disabled.
        ///
        /// If you write a value of X into this attribute, the attribute may not have
        /// the same value X when you later read it.  Most screens don't support as
        /// many different brightness levels as there are doubles between 0 and 1, so
        /// we may reduce the value's precision before storing it.
        ///
        /// @throw NS_ERROR_INVALID_ARG if brightness is not in the range [0, 1].
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetScreenBrightnessAttribute();
		
		/// <summary>
        /// How bright is the screen's backlight, on a scale from 0 (very dim) to 1
        /// (full brightness)?  Setting this attribute modifies the screen's
        /// brightness.
        ///
        /// You can read and write this attribute even when the screen is disabled,
        /// but the backlight is off while the screen is disabled.
        ///
        /// If you write a value of X into this attribute, the attribute may not have
        /// the same value X when you later read it.  Most screens don't support as
        /// many different brightness levels as there are doubles between 0 and 1, so
        /// we may reduce the value's precision before storing it.
        ///
        /// @throw NS_ERROR_INVALID_ARG if brightness is not in the range [0, 1].
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetScreenBrightnessAttribute(double aScreenBrightness);
		
		/// <summary>
        /// Is it possible that the device's CPU will sleep after the screen is
        /// disabled?  Setting this attribute to false will prevent the device
        /// entering suspend state.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetCpuSleepAllowedAttribute();
		
		/// <summary>
        /// Is it possible that the device's CPU will sleep after the screen is
        /// disabled?  Setting this attribute to false will prevent the device
        /// entering suspend state.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCpuSleepAllowedAttribute([MarshalAs(UnmanagedType.U1)] bool aCpuSleepAllowed);
	}
}
