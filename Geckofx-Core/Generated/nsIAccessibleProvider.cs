// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIAccessibleProvider.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// nsIAccessibleProvider interface is used to link element and accessible
    ///   object. For that XBL binding of element should implement the interface.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ac0639d5-f95b-4e2b-970c-9eab281fb6a5")]
	public interface nsIAccessibleProvider
	{
		
		/// <summary>
        /// Return one of constants declared above.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetAccessibleTypeAttribute();
	}
	
	/// <summary>nsIAccessibleProviderConsts </summary>
	public class nsIAccessibleProviderConsts
	{
		
		// <summary>
        //Do not create an accessible for this object
        // This is useful if an ancestor binding already implements nsIAccessibleProvider,
        // but no accessible is desired for the inheriting binding
        // </summary>
		public const long NoAccessible = 0;
		
		// <summary>
        //For elements that spawn a new document. For example now it is used by
        //    <xul:iframe>, <xul:browser> and <xul:editor>. </summary>
		public const long OuterDoc = 0x00000001;
		
		// <summary>
        // Constants set is used by XUL controls.
        // </summary>
		public const long XULAlert = 0x00001001;
		
		// 
		public const long XULButton = 0x00001002;
		
		// 
		public const long XULCheckbox = 0x00001003;
		
		// 
		public const long XULColorPicker = 0x00001004;
		
		// 
		public const long XULColorPickerTile = 0x00001005;
		
		// 
		public const long XULCombobox = 0x00001006;
		
		// 
		public const long XULDropmarker = 0x00001007;
		
		// 
		public const long XULGroupbox = 0x00001008;
		
		// 
		public const long XULImage = 0x00001009;
		
		// 
		public const long XULLink = 0x0000100A;
		
		// 
		public const long XULListbox = 0x0000100B;
		
		// 
		public const long XULListCell = 0x00001026;
		
		// 
		public const long XULListHead = 0x00001024;
		
		// 
		public const long XULListHeader = 0x00001025;
		
		// 
		public const long XULListitem = 0x0000100C;
		
		// 
		public const long XULMenubar = 0x0000100D;
		
		// 
		public const long XULMenuitem = 0x0000100E;
		
		// 
		public const long XULMenupopup = 0x0000100F;
		
		// 
		public const long XULMenuSeparator = 0x00001010;
		
		// 
		public const long XULPane = 0x00001011;
		
		// 
		public const long XULProgressMeter = 0x00001012;
		
		// 
		public const long XULScale = 0x00001013;
		
		// 
		public const long XULStatusBar = 0x00001014;
		
		// 
		public const long XULRadioButton = 0x00001015;
		
		// 
		public const long XULRadioGroup = 0x00001016;
		
		// <summary>
        //Used for XUL tab element </summary>
		public const long XULTab = 0x00001017;
		
		// <summary>
        //Used for XUL tabs element, a container for tab elements </summary>
		public const long XULTabs = 0x00001018;
		
		// <summary>
        //Used for XUL tabpanels container element </summary>
		public const long XULTabpanels = 0x00001019;
		
		// 
		public const long XULText = 0x0000101A;
		
		// 
		public const long XULTextBox = 0x0000101B;
		
		// 
		public const long XULThumb = 0x0000101C;
		
		// 
		public const long XULTree = 0x0000101D;
		
		// 
		public const long XULTreeColumns = 0x0000101E;
		
		// 
		public const long XULTreeColumnItem = 0x0000101F;
		
		// 
		public const long XULToolbar = 0x00001020;
		
		// 
		public const long XULToolbarSeparator = 0x00001021;
		
		// 
		public const long XULTooltip = 0x00001022;
		
		// 
		public const long XULToolbarButton = 0x00001023;
		
		// <summary>
        //Used for xforms elements that provide accessible object for itself as
        // well for anonymous content. This property are used for upload,
        // input[type="xsd:gDay"] and input[type="xsd:gMonth"] </summary>
		public const long XFormsContainer = 0x00002000;
		
		// <summary>
        //Used for label element </summary>
		public const long XFormsLabel = 0x00002001;
		
		// <summary>
        //Used for output element </summary>
		public const long XFormsOutput = 0x00002002;
		
		// <summary>
        //Used for trigger and submit elements </summary>
		public const long XFormsTrigger = 0x00002003;
		
		// <summary>
        //Used for input and textarea elements </summary>
		public const long XFormsInput = 0x00002004;
		
		// <summary>
        //Used for input[xsd:boolean] element </summary>
		public const long XFormsInputBoolean = 0x00002005;
		
		// <summary>
        //Used for input[xsd:date] element </summary>
		public const long XFormsInputDate = 0x00002006;
		
		// <summary>
        //Used for secret element </summary>
		public const long XFormsSecret = 0x00002007;
		
		// <summary>
        //Used for range element represented by slider </summary>
		public const long XFormsSliderRange = 0x00002008;
		
		// <summary>
        //Used for select and select1 that are implemented using host document's
        // native widget. For example, a select1 in a xhtml document may be
        // represented by the native html control html:select </summary>
		public const long XFormsSelect = 0x00002009;
		
		// <summary>
        //Used for xforms choices element </summary>
		public const long XFormsChoices = 0x00002010;
		
		// <summary>
        //Used for xforms full select/select1 elements that may be represented by
        // group of checkboxes and radiogroup </summary>
		public const long XFormsSelectFull = 0x00002011;
		
		// <summary>
        //Used for xforms item element that is used inside xforms select elements
        // represented by group of checkboxes </summary>
		public const long XFormsItemCheckgroup = 0x00002012;
		
		// <summary>
        //Used for xforms item element that is used inside xforms select1 elements
        // represented by radio group </summary>
		public const long XFormsItemRadiogroup = 0x00002013;
		
		// <summary>
        //Used for xforms select1 element that is represented by combobox </summary>
		public const long XFormsSelectCombobox = 0x00002014;
		
		// <summary>
        //Used for xforms item element that is used inside xforms select1
        // elements represented by combobox </summary>
		public const long XFormsItemCombobox = 0x00002015;
		
		// <summary>
        //Used for dropmarker widget that is used by xforms elements </summary>
		public const long XFormsDropmarkerWidget = 0x00002101;
		
		// <summary>
        //Used for calendar widget that is used by xforms elements </summary>
		public const long XFormsCalendarWidget = 0x00002102;
		
		// <summary>
        //Used for popup widget that is used by xforms minimal select1 elements </summary>
		public const long XFormsComboboxPopupWidget = 0x00002103;
	}
}
