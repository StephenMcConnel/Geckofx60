// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file imgITools.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///-*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
    ///
    /// This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8e16f39e-7012-46bd-aa22-2a7a3265608f")]
	public interface imgITools
	{
		
		/// <summary>
        /// decodeImageData
        /// Caller provides an input stream and mimetype. We read from the stream
        /// and decompress it (according to the specified mime type) and return
        /// the resulting imgIContainer. (If the caller already has a container,
        /// it can be provided as input to be reused).
        ///
        /// @param aStream
        /// An input stream for an encoded image file.
        /// @param aMimeType
        /// Type of image in the stream.
        /// @param aContainer
        /// An imgIContainer holding the decoded image. Specify |null| when
        /// calling to have one created, otherwise specify a container to
        /// be used. It is an error to pass an already-initialized container
        /// as aContainer.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DecodeImageData([MarshalAs(UnmanagedType.Interface)] nsIInputStream aStream, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aMimeType, ref imgIContainer aContainer);
		
		/// <summary>
        /// encodeImage
        /// Caller provides an image container, and the mime type it should be
        /// encoded to. We return an input stream for the encoded image data.
        ///
        /// @param aContainer
        /// An image container.
        /// @param aMimeType
        /// Type of encoded image desired (eg "image/png").
        /// @param outputOptions
        /// Encoder-specific output options.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIInputStream EncodeImage(imgIContainer aContainer, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aMimeType, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase outputOptions);
		
		/// <summary>
        /// encodeScaledImage
        /// Caller provides an image container, and the mime type it should be
        /// encoded to. We return an input stream for the encoded image data.
        /// The encoded image is scaled to the specified dimensions.
        ///
        /// @param aContainer
        /// An image container.
        /// @param aMimeType
        /// Type of encoded image desired (eg "image/png").
        /// @param aWidth, aHeight
        /// The size (in pixels) desired for the resulting image. Specify 0 to
        /// use the given image's width or height. Values must be >= 0.
        /// @param outputOptions
        /// Encoder-specific output options.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIInputStream EncodeScaledImage(imgIContainer aContainer, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aMimeType, int aWidth, int aHeight, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase outputOptions);
		
		/// <summary>
        /// encodeCroppedImage
        /// Caller provides an image container, and the mime type it should be
        /// encoded to. We return an input stream for the encoded image data.
        /// The encoded image is cropped to the specified dimensions.
        ///
        /// The given offset and size must not exceed the image bounds.
        ///
        /// @param aContainer
        /// An image container.
        /// @param aMimeType
        /// Type of encoded image desired (eg "image/png").
        /// @param aOffsetX, aOffsetY
        /// The crop offset (in pixels). Values must be >= 0.
        /// @param aWidth, aHeight
        /// The size (in pixels) desired for the resulting image. Specify 0 to
        /// use the given image's width or height. Values must be >= 0.
        /// @param outputOptions
        /// Encoder-specific output options.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIInputStream EncodeCroppedImage(imgIContainer aContainer, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aMimeType, int aOffsetX, int aOffsetY, int aWidth, int aHeight, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase outputOptions);
	}
}
