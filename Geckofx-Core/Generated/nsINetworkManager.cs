// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsINetworkManager.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;

	
	
	/// <summary>
    /// Information about networks that is exposed to network manager API consumers.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("e016d594-3072-11e1-9b7d-0010183a41af")]
	public interface nsINetworkInterface
	{
		
		/// <summary>
        /// Current network state, one of the NETWORK_STATE_* constants.
        ///
        /// When this changes, network interface implementations notify the
        /// 'network-interface-state-changed' observer notification.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetStateAttribute();
		
		/// <summary>
        /// Network type. One of the NETWORK_TYPE_* constants.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetTypeAttribute();
		
		/// <summary>
        /// Name of the network interface. This identifier is unique.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aName);
		
		/// <summary>
        /// Indicates whether DHCP should be run when the interface connects.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetDhcpAttribute();
	}
	
	/// <summary>nsINetworkInterfaceConsts </summary>
	public class nsINetworkInterfaceConsts
	{
		
		// <summary>
        // Information about networks that is exposed to network manager API consumers.
        // </summary>
		public const long NETWORK_STATE_UNKNOWN = -1;
		
		// 
		public const long NETWORK_STATE_CONNECTING = 0;
		
		// 
		public const long NETWORK_STATE_CONNECTED = 1;
		
		// 
		public const long NETWORK_STATE_SUSPENDED = 2;
		
		// 
		public const long NETWORK_STATE_DISCONNECTING = 3;
		
		// 
		public const long NETWORK_STATE_DISCONNECTED = 4;
		
		// 
		public const long NETWORK_TYPE_WIFI = 0;
		
		// 
		public const long NETWORK_TYPE_MOBILE = 1;
		
		// 
		public const long NETWORK_TYPE_MOBILE_MMS = 2;
	}
	
	/// <summary>
    /// Manage network interfaces.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("3bc29392-2fba-11e1-80fd-0010183a41af")]
	public interface nsINetworkManager
	{
		
		/// <summary>
        /// Register the given network interface with the network manager.
        ///
        /// Consumers will be notified with the 'network-interface-registered'
        /// observer notification.
        ///
        /// Throws if there's already an interface registered that has the same
        /// name.
        ///
        /// @param network
        /// Network interface to register.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RegisterNetworkInterface([MarshalAs(UnmanagedType.Interface)] nsINetworkInterface network);
		
		/// <summary>
        /// Unregister the given network interface from the network manager.
        ///
        /// Consumers will be notified with the 'network-interface-unregistered'
        /// observer notification.
        ///
        /// Throws an exception if the specified network interface object isn't
        /// registered.
        ///
        /// @param network
        /// Network interface to unregister.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnregisterNetworkInterface([MarshalAs(UnmanagedType.Interface)] nsINetworkInterface network);
		
		/// <summary>
        /// Object containing all known network connections, keyed by their
        /// interface name.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetNetworkInterfacesAttribute();
		
		/// <summary>
        /// The preferred network type. One of the
        /// nsINetworkInterface::NETWORK_TYPE_* constants.
        ///
        /// This attribute is used for setting default route to favor
        /// interfaces with given type.  This can be overriden by calling
        /// overrideDefaultRoute().
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetPreferredNetworkTypeAttribute();
		
		/// <summary>
        /// The preferred network type. One of the
        /// nsINetworkInterface::NETWORK_TYPE_* constants.
        ///
        /// This attribute is used for setting default route to favor
        /// interfaces with given type.  This can be overriden by calling
        /// overrideDefaultRoute().
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetPreferredNetworkTypeAttribute(int aPreferredNetworkType);
		
		/// <summary>
        /// The network interface handling all data traffic.
        ///
        /// When this changes, the 'network-active-changed' observer
        /// notification is dispatched.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsINetworkInterface GetActiveAttribute();
		
		/// <summary>
        /// Override the default behaviour for preferredNetworkType and route
        /// all network traffic through the the specified interface.
        ///
        /// Consumers can observe changes to the active network by subscribing to
        /// the 'network-active-changed' observer notification.
        ///
        /// @param network
        /// Network to route all network traffic to. If this is null,
        /// a previous override is canceled.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int OverrideActive([MarshalAs(UnmanagedType.Interface)] nsINetworkInterface network);
	}
}
