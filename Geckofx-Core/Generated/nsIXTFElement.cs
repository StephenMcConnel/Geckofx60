// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIXTFElement.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("4f144387-796d-4baf-8641-5db45dba1808")]
	public interface nsIXTFElement
	{
		
		/// <summary>
        /// (i.e. holding a reference to this will not create a cycle).
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnCreated([MarshalAs(UnmanagedType.Interface)] nsIXTFElementWrapper wrapper);
		
		/// <summary>
        /// called when the wrapper object is being destroyed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnDestroyed();
		
		/// <summary>
        /// onCreated()-calls until after onDestroyed()-calls).
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsAttributeHandlerAttribute();
		
		/// <summary>
        /// @note 'Normal' DOM interfaces are always automatically scriptable.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetScriptingInterfaces(ref uint count, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] ref System.Guid[] array);
		
		/// <summary>
        /// Event notifications:
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WillChangeDocument([MarshalAs(UnmanagedType.Interface)] nsIDOMDocument newDoc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DocumentChanged([MarshalAs(UnmanagedType.Interface)] nsIDOMDocument newDoc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WillChangeParent([MarshalAs(UnmanagedType.Interface)] nsIDOMElement newParent);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ParentChanged([MarshalAs(UnmanagedType.Interface)] nsIDOMElement newParent);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WillInsertChild([MarshalAs(UnmanagedType.Interface)] nsIDOMNode child, uint index);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ChildInserted([MarshalAs(UnmanagedType.Interface)] nsIDOMNode child, uint index);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WillAppendChild([MarshalAs(UnmanagedType.Interface)] nsIDOMNode child);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ChildAppended([MarshalAs(UnmanagedType.Interface)] nsIDOMNode child);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WillRemoveChild(uint index);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ChildRemoved(uint index);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WillSetAttribute([MarshalAs(UnmanagedType.Interface)] nsIAtom name, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase newValue);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AttributeSet([MarshalAs(UnmanagedType.Interface)] nsIAtom name, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase newValue);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WillRemoveAttribute([MarshalAs(UnmanagedType.Interface)] nsIAtom name);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AttributeRemoved([MarshalAs(UnmanagedType.Interface)] nsIAtom name);
		
		/// <summary>
        /// added to the element.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BeginAddingChildren();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DoneAddingChildren();
		
		/// <summary>
        /// other default handlers won't be able to handle it again.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool HandleDefault([MarshalAs(UnmanagedType.Interface)] nsIDOMEvent aEvent);
		
		/// <summary>
        /// other needed state.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CloneState([MarshalAs(UnmanagedType.Interface)] nsIDOMElement aElement);
		
		/// <summary>
        /// Returns accesskey attribute node.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMAttr GetAccesskeyNodeAttribute();
		
		/// <summary>
        /// Performs accesskey. The method is called when accesskey is activated.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PerformAccesskey();
	}
	
	/// <summary>nsIXTFElementConsts </summary>
	public class nsIXTFElementConsts
	{
		
		// <summary>
        // nsIXTFElementWrapper::notificationMask.
        // </summary>
		public const ulong NOTIFY_WILL_CHANGE_DOCUMENT = 0x00000001;
		
		// 
		public const ulong NOTIFY_DOCUMENT_CHANGED = 0x00000002;
		
		// 
		public const ulong NOTIFY_WILL_CHANGE_PARENT = 0x00000004;
		
		// 
		public const ulong NOTIFY_PARENT_CHANGED = 0x00000008;
		
		// 
		public const ulong NOTIFY_WILL_INSERT_CHILD = 0x00000010;
		
		// 
		public const ulong NOTIFY_CHILD_INSERTED = 0x00000020;
		
		// 
		public const ulong NOTIFY_WILL_APPEND_CHILD = 0x00000040;
		
		// 
		public const ulong NOTIFY_CHILD_APPENDED = 0x00000080;
		
		// 
		public const ulong NOTIFY_WILL_REMOVE_CHILD = 0x00000100;
		
		// 
		public const ulong NOTIFY_CHILD_REMOVED = 0x00000200;
		
		// 
		public const ulong NOTIFY_WILL_SET_ATTRIBUTE = 0x00000400;
		
		// 
		public const ulong NOTIFY_ATTRIBUTE_SET = 0x00000800;
		
		// 
		public const ulong NOTIFY_WILL_REMOVE_ATTRIBUTE = 0x00001000;
		
		// 
		public const ulong NOTIFY_ATTRIBUTE_REMOVED = 0x00002000;
		
		// 
		public const ulong NOTIFY_BEGIN_ADDING_CHILDREN = 0x00004000;
		
		// 
		public const ulong NOTIFY_DONE_ADDING_CHILDREN = 0x00008000;
		
		// 
		public const ulong NOTIFY_HANDLE_DEFAULT = 0x00010000;
		
		// 
		public const ulong NOTIFY_PERFORM_ACCESSKEY = 0x00020000;
	}
}
