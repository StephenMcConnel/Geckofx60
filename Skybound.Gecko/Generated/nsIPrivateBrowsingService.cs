// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPrivateBrowsingService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIPrivateBrowsingService </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("4b731983-9542-49f4-b16b-de68ad1c2068")]
	public interface nsIPrivateBrowsingService
	{
		
		/// <summary>
        /// by the private browsing service throws NS_ERROR_FAILURE.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetPrivateBrowsingEnabledAttribute();
		
		/// <summary>
        /// by the private browsing service throws NS_ERROR_FAILURE.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetPrivateBrowsingEnabledAttribute([MarshalAs(UnmanagedType.U1)] bool aPrivateBrowsingEnabled);
		
		/// <summary>
        /// This value will never be true if privateBrowsingEnabled is false.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetAutoStartedAttribute();
		
		/// <summary>
        /// the command line (using either the -private or -private-toggle switches).
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetLastChangedByCommandLineAttribute();
		
		/// <summary>
        /// Removes all data stored for a given domain.  This includes all data for
        /// subdomains of the given domain.
        ///
        /// @param aDomain
        /// The domain that will have its data removed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveDataFromDomain([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aDomain);
	}
}
