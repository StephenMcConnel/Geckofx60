// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIControllerCommandTable.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIControllerCommandTable.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIControllerCommandTable </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("d1a47834-6ad4-11d7-bfad-000393636592")]
	public interface nsIControllerCommandTable
	{
		
		/// <summary>Member MakeImmutable </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MakeImmutable();
		
		/// <summary>Member RegisterCommand </summary>
		/// <param name='aCommandName'> </param>
		/// <param name='aCommand'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RegisterCommand([MarshalAs(UnmanagedType.LPStr)] System.String  aCommandName, [MarshalAs(UnmanagedType.Interface)] nsIControllerCommand  aCommand);
		
		/// <summary>Member UnregisterCommand </summary>
		/// <param name='aCommandName'> </param>
		/// <param name='aCommand'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnregisterCommand([MarshalAs(UnmanagedType.LPStr)] System.String  aCommandName, [MarshalAs(UnmanagedType.Interface)] nsIControllerCommand  aCommand);
		
		/// <summary>Member FindCommandHandler </summary>
		/// <param name='aCommandName'> </param>
		/// <returns>A nsIControllerCommand</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIControllerCommand FindCommandHandler([MarshalAs(UnmanagedType.LPStr)] System.String  aCommandName);
		
		/// <summary>Member IsCommandEnabled </summary>
		/// <param name='aCommandName'> </param>
		/// <param name='aCommandRefCon'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsCommandEnabled([MarshalAs(UnmanagedType.LPStr)] System.String  aCommandName, [MarshalAs(UnmanagedType.Interface)] nsISupports  aCommandRefCon);
		
		/// <summary>Member UpdateCommandState </summary>
		/// <param name='aCommandName'> </param>
		/// <param name='aCommandRefCon'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UpdateCommandState([MarshalAs(UnmanagedType.LPStr)] System.String  aCommandName, [MarshalAs(UnmanagedType.Interface)] nsISupports  aCommandRefCon);
		
		/// <summary>Member SupportsCommand </summary>
		/// <param name='aCommandName'> </param>
		/// <param name='aCommandRefCon'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool SupportsCommand([MarshalAs(UnmanagedType.LPStr)] System.String  aCommandName, [MarshalAs(UnmanagedType.Interface)] nsISupports  aCommandRefCon);
		
		/// <summary>Member DoCommand </summary>
		/// <param name='aCommandName'> </param>
		/// <param name='aCommandRefCon'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DoCommand([MarshalAs(UnmanagedType.LPStr)] System.String  aCommandName, [MarshalAs(UnmanagedType.Interface)] nsISupports  aCommandRefCon);
		
		/// <summary>Member DoCommandParams </summary>
		/// <param name='aCommandName'> </param>
		/// <param name='aParam'> </param>
		/// <param name='aCommandRefCon'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DoCommandParams([MarshalAs(UnmanagedType.LPStr)] System.String  aCommandName, [MarshalAs(UnmanagedType.Interface)] nsICommandParams  aParam, [MarshalAs(UnmanagedType.Interface)] nsISupports  aCommandRefCon);
		
		/// <summary>Member GetCommandState </summary>
		/// <param name='aCommandName'> </param>
		/// <param name='aParam'> </param>
		/// <param name='aCommandRefCon'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetCommandState([MarshalAs(UnmanagedType.LPStr)] System.String  aCommandName, [MarshalAs(UnmanagedType.Interface)] nsICommandParams  aParam, [MarshalAs(UnmanagedType.Interface)] nsISupports  aCommandRefCon);
	}
}
