// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIPopupBoxObject.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIPopupBoxObject.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIPopupBoxObject </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("548a9e3f-af78-42b0-a260-035ece15c19f")]
	public interface nsIPopupBoxObject
	{
		
		/// <summary>Member ShowPopup </summary>
		/// <param name='srcContent'> </param>
		/// <param name='popupContent'> </param>
		/// <param name='xpos'> </param>
		/// <param name='ypos'> </param>
		/// <param name='popupType'> </param>
		/// <param name='anchorAlignment'> </param>
		/// <param name='popupAlignment'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ShowPopup([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  srcContent, [MarshalAs(UnmanagedType.Interface)] nsIDOMElement  popupContent, System.Int32  xpos, System.Int32  ypos, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Skybound.Gecko.XpCom.WStringMarshaler")] string popupType, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Skybound.Gecko.XpCom.WStringMarshaler")] string anchorAlignment, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Skybound.Gecko.XpCom.WStringMarshaler")] string popupAlignment);
		
		/// <summary>Member HidePopup </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HidePopup();
		
		/// <summary>Member GetAutoPositionAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetAutoPositionAttribute();
		
		/// <summary>Member SetAutoPositionAttribute </summary>
		/// <param name='aAutoPosition'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetAutoPositionAttribute(System.Boolean  aAutoPosition);
		
		/// <summary>Member EnableKeyboardNavigator </summary>
		/// <param name='enableKeyboardNavigator'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EnableKeyboardNavigator(System.Boolean  enableKeyboardNavigator);
		
		/// <summary>Member EnableRollup </summary>
		/// <param name='enableRollup'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EnableRollup(System.Boolean  enableRollup);
		
		/// <summary>Member SetConsumeRollupEvent </summary>
		/// <param name='consume'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetConsumeRollupEvent(System.UInt32  consume);
		
		/// <summary>Member SizeTo </summary>
		/// <param name='width'> </param>
		/// <param name='height'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SizeTo(System.Int32  width, System.Int32  height);
		
		/// <summary>Member MoveTo </summary>
		/// <param name='left'> </param>
		/// <param name='top'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MoveTo(System.Int32  left, System.Int32  top);
		
		/// <summary>Member OpenPopup </summary>
		/// <param name='anchorElement'> </param>
		/// <param name='position'> </param>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='isContextMenu'> </param>
		/// <param name='attributesOverride'> </param>
		/// <param name='triggerEvent'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OpenPopup([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  anchorElement, [MarshalAs(UnmanagedType.LPStruct)] nsAString position, System.Int32  x, System.Int32  y, System.Boolean  isContextMenu, System.Boolean  attributesOverride, [MarshalAs(UnmanagedType.Interface)] nsIDOMEvent  triggerEvent);
		
		/// <summary>Member OpenPopupAtScreen </summary>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='isContextMenu'> </param>
		/// <param name='triggerEvent'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OpenPopupAtScreen(System.Int32  x, System.Int32  y, System.Boolean  isContextMenu, [MarshalAs(UnmanagedType.Interface)] nsIDOMEvent  triggerEvent);
		
		/// <summary>Member GetPopupStateAttribute </summary>
		/// <param name='aPopupState'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetPopupStateAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aPopupState);
		
		/// <summary>Member GetTriggerNodeAttribute </summary>
		/// <returns>A nsIDOMNode </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMNode  GetTriggerNodeAttribute();
		
		/// <summary>Member GetAnchorNodeAttribute </summary>
		/// <returns>A nsIDOMElement </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMElement  GetAnchorNodeAttribute();
	}
}
