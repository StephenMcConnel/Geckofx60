// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIMultiPartChannel.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>
    /// An interface to access the the base channel
    /// associated with a MultiPartChannel.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ba78db7b-b88c-4b76-baf9-3c2296a585ae")]
	public interface nsIMultiPartChannel
	{
		
		/// <summary>
        /// readonly attribute to access the underlying channel
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIChannel GetBaseChannelAttribute();
		
		/// <summary>
        /// Access to the Content-Disposition header field of this part of
        /// a multipart message.  This allows getting the preferred
        /// handling method, preferred filename, etc.  See RFC 2183.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetContentDispositionAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACString aContentDisposition);
		
		/// <summary>
        /// Access to the Content-Disposition header field of this part of
        /// a multipart message.  This allows getting the preferred
        /// handling method, preferred filename, etc.  See RFC 2183.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetContentDispositionAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACString aContentDisposition);
		
		/// <summary>
        /// Attribute guaranteed to be different for different parts of
        /// the same multipart document.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetPartIDAttribute();
		
		/// <summary>
        /// Set to true when onStopRequest is received from the base channel.
        /// The listener can check this from its onStopRequest to determine
        /// whether more data can be expected.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsLastPartAttribute();
	}
}
