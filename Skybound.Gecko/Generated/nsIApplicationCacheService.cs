// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIApplicationCacheService.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIApplicationCacheService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIApplicationCacheService </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("611161c8-37d0-450f-a4fe-457c47bbaf64")]
	public interface nsIApplicationCacheService
	{
		
		/// <summary>Member CreateApplicationCache </summary>
		/// <param name='group'> </param>
		/// <returns>A nsIApplicationCache</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIApplicationCache CreateApplicationCache([MarshalAs(UnmanagedType.LPStruct)] nsAString  group);
		
		/// <summary>Member GetApplicationCache </summary>
		/// <param name='clientID'> </param>
		/// <returns>A nsIApplicationCache</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIApplicationCache GetApplicationCache([MarshalAs(UnmanagedType.LPStruct)] nsAString  clientID);
		
		/// <summary>Member GetActiveCache </summary>
		/// <param name='group'> </param>
		/// <returns>A nsIApplicationCache</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIApplicationCache GetActiveCache([MarshalAs(UnmanagedType.LPStruct)] nsAString  group);
		
		/// <summary>Member DeactivateGroup </summary>
		/// <param name='group'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeactivateGroup([MarshalAs(UnmanagedType.LPStruct)] nsAString  group);
		
		/// <summary>Member ChooseApplicationCache </summary>
		/// <param name='key'> </param>
		/// <returns>A nsIApplicationCache</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIApplicationCache ChooseApplicationCache([MarshalAs(UnmanagedType.LPStruct)] nsAString  key);
		
		/// <summary>Member CacheOpportunistically </summary>
		/// <param name='cache'> </param>
		/// <param name='key'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CacheOpportunistically([MarshalAs(UnmanagedType.Interface)] nsIApplicationCache  cache, [MarshalAs(UnmanagedType.LPStruct)] nsAString  key);
		
		/// <summary>Member GetGroups </summary>
		/// <param name='count'> </param>
		/// <returns>A System.String </returns>
		[return: MarshalAs(UnmanagedType.LPStr, SizeParamIndex=0)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.String  GetGroups(out System.UInt32  count);
	}
}
