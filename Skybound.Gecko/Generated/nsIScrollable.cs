// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIScrollable.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIScrollable.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIScrollable </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("919e792a-6490-40b8-bba5-f9e9ad5640c8")]
	public interface nsIScrollable
	{
		
		/// <summary>Member GetCurScrollPos </summary>
		/// <param name='scrollOrientation'> </param>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetCurScrollPos(System.Int32  scrollOrientation);
		
		/// <summary>Member SetCurScrollPos </summary>
		/// <param name='scrollOrientation'> </param>
		/// <param name='curPos'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCurScrollPos(System.Int32  scrollOrientation, System.Int32  curPos);
		
		/// <summary>Member SetCurScrollPosEx </summary>
		/// <param name='curHorizontalPos'> </param>
		/// <param name='curVerticalPos'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCurScrollPosEx(System.Int32  curHorizontalPos, System.Int32  curVerticalPos);
		
		/// <summary>Member GetScrollRange </summary>
		/// <param name='scrollOrientation'> </param>
		/// <param name='minPos'> </param>
		/// <param name='maxPos'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetScrollRange(System.Int32  scrollOrientation, out System.Int32  minPos, out System.Int32  maxPos);
		
		/// <summary>Member SetScrollRange </summary>
		/// <param name='scrollOrientation'> </param>
		/// <param name='minPos'> </param>
		/// <param name='maxPos'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetScrollRange(System.Int32  scrollOrientation, System.Int32  minPos, System.Int32  maxPos);
		
		/// <summary>Member SetScrollRangeEx </summary>
		/// <param name='minHorizontalPos'> </param>
		/// <param name='maxHorizontalPos'> </param>
		/// <param name='minVerticalPos'> </param>
		/// <param name='maxVerticalPos'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetScrollRangeEx(System.Int32  minHorizontalPos, System.Int32  maxHorizontalPos, System.Int32  minVerticalPos, System.Int32  maxVerticalPos);
		
		/// <summary>Member GetDefaultScrollbarPreferences </summary>
		/// <param name='scrollOrientation'> </param>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetDefaultScrollbarPreferences(System.Int32  scrollOrientation);
		
		/// <summary>Member SetDefaultScrollbarPreferences </summary>
		/// <param name='scrollOrientation'> </param>
		/// <param name='scrollbarPref'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDefaultScrollbarPreferences(System.Int32  scrollOrientation, System.Int32  scrollbarPref);
		
		/// <summary>Member GetScrollbarVisibility </summary>
		/// <param name='verticalVisible'> </param>
		/// <param name='horizontalVisible'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetScrollbarVisibility(out System.Boolean  verticalVisible, out System.Boolean  horizontalVisible);
	}
}
