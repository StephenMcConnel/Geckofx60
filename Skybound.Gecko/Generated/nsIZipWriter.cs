// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIZipWriter.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIZipWriter.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIZipWriter </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("6d4ef074-206c-4649-9884-57bc355864d6")]
	public interface nsIZipWriter
	{
		
		/// <summary>Member GetCommentAttribute </summary>
		/// <param name='aComment'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetCommentAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aComment);
		
		/// <summary>Member SetCommentAttribute </summary>
		/// <param name='aComment'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCommentAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aComment);
		
		/// <summary>Member GetInQueueAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetInQueueAttribute();
		
		/// <summary>Member GetFileAttribute </summary>
		/// <returns>A nsIFile </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIFile  GetFileAttribute();
		
		/// <summary>Member Open </summary>
		/// <param name='aFile'> </param>
		/// <param name='aIoFlags'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Open([MarshalAs(UnmanagedType.Interface)] nsIFile  aFile, System.Int32  aIoFlags);
		
		/// <summary>Member GetEntry </summary>
		/// <param name='aZipEntry'> </param>
		/// <returns>A nsIZipEntry</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIZipEntry GetEntry([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String  aZipEntry);
		
		/// <summary>Member HasEntry </summary>
		/// <param name='aZipEntry'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool HasEntry([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String  aZipEntry);
		
		/// <summary>Member AddEntryDirectory </summary>
		/// <param name='aZipEntry'> </param>
		/// <param name='aModTime'> </param>
		/// <param name='aQueue'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddEntryDirectory([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String  aZipEntry, System.UInt32  aModTime, System.Boolean  aQueue);
		
		/// <summary>Member AddEntryFile </summary>
		/// <param name='aZipEntry'> </param>
		/// <param name='aCompression'> </param>
		/// <param name='aFile'> </param>
		/// <param name='aQueue'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddEntryFile([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String  aZipEntry, System.Int32  aCompression, [MarshalAs(UnmanagedType.Interface)] nsIFile  aFile, System.Boolean  aQueue);
		
		/// <summary>Member AddEntryChannel </summary>
		/// <param name='aZipEntry'> </param>
		/// <param name='aModTime'> </param>
		/// <param name='aCompression'> </param>
		/// <param name='aChannel'> </param>
		/// <param name='aQueue'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddEntryChannel([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String  aZipEntry, System.UInt32  aModTime, System.Int32  aCompression, [MarshalAs(UnmanagedType.Interface)] nsIChannel  aChannel, System.Boolean  aQueue);
		
		/// <summary>Member AddEntryStream </summary>
		/// <param name='aZipEntry'> </param>
		/// <param name='aModTime'> </param>
		/// <param name='aCompression'> </param>
		/// <param name='aStream'> </param>
		/// <param name='aQueue'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddEntryStream([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String  aZipEntry, System.UInt32  aModTime, System.Int32  aCompression, [MarshalAs(UnmanagedType.Interface)] nsIInputStream  aStream, System.Boolean  aQueue);
		
		/// <summary>Member RemoveEntry </summary>
		/// <param name='aZipEntry'> </param>
		/// <param name='aQueue'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveEntry([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String  aZipEntry, System.Boolean  aQueue);
		
		/// <summary>Member ProcessQueue </summary>
		/// <param name='aObserver'> </param>
		/// <param name='aContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ProcessQueue([MarshalAs(UnmanagedType.Interface)] nsIRequestObserver  aObserver, [MarshalAs(UnmanagedType.Interface)] nsISupports  aContext);
		
		/// <summary>Member Close </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Close();
	}
}
