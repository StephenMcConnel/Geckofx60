// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsICMSMessage.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsICMSMessage.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsICMSMessage </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("a4557478-ae16-11d5-ba4b-00108303b117")]
	public interface nsICMSMessage
	{
		
		/// <summary>Member ContentIsSigned </summary>
		/// <param name='aSigned'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ContentIsSigned(out System.Boolean  aSigned);
		
		/// <summary>Member ContentIsEncrypted </summary>
		/// <param name='aEncrypted'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ContentIsEncrypted(out System.Boolean  aEncrypted);
		
		/// <summary>Member GetSignerCommonName </summary>
		/// <param name='aName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetSignerCommonName([MarshalAs(UnmanagedType.LPStr)] out System.String  aName);
		
		/// <summary>Member GetSignerEmailAddress </summary>
		/// <param name='aEmail'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetSignerEmailAddress([MarshalAs(UnmanagedType.LPStr)] out System.String  aEmail);
		
		/// <summary>Member GetSignerCert </summary>
		/// <param name='scert'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetSignerCert([MarshalAs(UnmanagedType.Interface)] out nsIX509Cert  scert);
		
		/// <summary>Member GetEncryptionCert </summary>
		/// <param name='ecert'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetEncryptionCert([MarshalAs(UnmanagedType.Interface)] out nsIX509Cert  ecert);
		
		/// <summary>Member VerifySignature </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void VerifySignature();
		
		/// <summary>Member VerifyDetachedSignature </summary>
		/// <param name='aDigestData'> </param>
		/// <param name='aDigestDataLen'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void VerifyDetachedSignature(System.IntPtr  aDigestData, System.UInt32  aDigestDataLen);
		
		/// <summary>Member CreateEncrypted </summary>
		/// <param name='aRecipientCerts'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CreateEncrypted([MarshalAs(UnmanagedType.Interface)] nsIArray  aRecipientCerts);
		
		/// <summary>Member CreateSigned </summary>
		/// <param name='scert'> </param>
		/// <param name='ecert'> </param>
		/// <param name='aDigestData'> </param>
		/// <param name='aDigestDataLen'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CreateSigned([MarshalAs(UnmanagedType.Interface)] nsIX509Cert  scert, [MarshalAs(UnmanagedType.Interface)] nsIX509Cert  ecert, System.IntPtr  aDigestData, System.UInt32  aDigestDataLen);
	}
}
