// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIWindowsRegKey.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIWindowsRegKey.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIWindowsRegKey </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("2555b930-d64f-437e-9be7-0a2cb252c1f4")]
	public interface nsIWindowsRegKey
	{
		
		/// <summary>Member GetKeyAttribute </summary>
		/// <returns>A System.IntPtr</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr GetKeyAttribute();
		
		/// <summary>Member SetKeyAttribute </summary>
		/// <param name='aKey'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetKeyAttribute(System.IntPtr aKey);
		
		/// <summary>Member Close </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Close();
		
		/// <summary>Member Open </summary>
		/// <param name='rootKey'> </param>
		/// <param name='relPath'> </param>
		/// <param name='mode'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Open(System.UInt32  rootKey, [MarshalAs(UnmanagedType.LPStruct)] nsAString relPath, System.UInt32  mode);
		
		/// <summary>Member Create </summary>
		/// <param name='rootKey'> </param>
		/// <param name='relPath'> </param>
		/// <param name='mode'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Create(System.UInt32  rootKey, [MarshalAs(UnmanagedType.LPStruct)] nsAString relPath, System.UInt32  mode);
		
		/// <summary>Member OpenChild </summary>
		/// <param name='relPath'> </param>
		/// <param name='mode'> </param>
		/// <returns>A nsIWindowsRegKey</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIWindowsRegKey OpenChild([MarshalAs(UnmanagedType.LPStruct)] nsAString relPath, System.UInt32  mode);
		
		/// <summary>Member CreateChild </summary>
		/// <param name='relPath'> </param>
		/// <param name='mode'> </param>
		/// <returns>A nsIWindowsRegKey</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIWindowsRegKey CreateChild([MarshalAs(UnmanagedType.LPStruct)] nsAString relPath, System.UInt32  mode);
		
		/// <summary>Member GetChildCountAttribute </summary>
		/// <returns>A System.UInt32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetChildCountAttribute();
		
		/// <summary>Member GetChildName </summary>
		/// <param name='index'> </param>
		/// <returns>A nsAString</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString GetChildName(System.UInt32  index);
		
		/// <summary>Member HasChild </summary>
		/// <param name='name'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool HasChild([MarshalAs(UnmanagedType.LPStruct)] nsAString name);
		
		/// <summary>Member GetValueCountAttribute </summary>
		/// <returns>A System.UInt32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetValueCountAttribute();
		
		/// <summary>Member GetValueName </summary>
		/// <param name='index'> </param>
		/// <returns>A nsAString</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString GetValueName(System.UInt32  index);
		
		/// <summary>Member HasValue </summary>
		/// <param name='name'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool HasValue([MarshalAs(UnmanagedType.LPStruct)] nsAString name);
		
		/// <summary>Member RemoveChild </summary>
		/// <param name='relPath'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveChild([MarshalAs(UnmanagedType.LPStruct)] nsAString relPath);
		
		/// <summary>Member RemoveValue </summary>
		/// <param name='name'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveValue([MarshalAs(UnmanagedType.LPStruct)] nsAString name);
		
		/// <summary>Member GetValueType </summary>
		/// <param name='name'> </param>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetValueType([MarshalAs(UnmanagedType.LPStruct)] nsAString name);
		
		/// <summary>Member ReadStringValue </summary>
		/// <param name='name'> </param>
		/// <returns>A nsAString</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString ReadStringValue([MarshalAs(UnmanagedType.LPStruct)] nsAString name);
		
		/// <summary>Member ReadIntValue </summary>
		/// <param name='name'> </param>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint ReadIntValue([MarshalAs(UnmanagedType.LPStruct)] nsAString name);
		
		/// <summary>Member ReadInt64Value </summary>
		/// <param name='name'> </param>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint ReadInt64Value([MarshalAs(UnmanagedType.LPStruct)] nsAString name);
		
		/// <summary>Member ReadBinaryValue </summary>
		/// <param name='name'> </param>
		/// <returns>A nsAString</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString ReadBinaryValue([MarshalAs(UnmanagedType.LPStruct)] nsAString name);
		
		/// <summary>Member WriteStringValue </summary>
		/// <param name='name'> </param>
		/// <param name='data'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WriteStringValue([MarshalAs(UnmanagedType.LPStruct)] nsAString name, [MarshalAs(UnmanagedType.LPStruct)] nsAString data);
		
		/// <summary>Member WriteIntValue </summary>
		/// <param name='name'> </param>
		/// <param name='data'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WriteIntValue([MarshalAs(UnmanagedType.LPStruct)] nsAString name, System.UInt32  data);
		
		/// <summary>Member WriteInt64Value </summary>
		/// <param name='name'> </param>
		/// <param name='data'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WriteInt64Value([MarshalAs(UnmanagedType.LPStruct)] nsAString name, System.UInt32  data);
		
		/// <summary>Member WriteBinaryValue </summary>
		/// <param name='name'> </param>
		/// <param name='data'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WriteBinaryValue([MarshalAs(UnmanagedType.LPStruct)] nsAString name, [MarshalAs(UnmanagedType.LPStruct)] nsAString  data);
		
		/// <summary>Member StartWatching </summary>
		/// <param name='recurse'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StartWatching(System.Boolean  recurse);
		
		/// <summary>Member StopWatching </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StopWatching();
		
		/// <summary>Member IsWatching </summary>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsWatching();
		
		/// <summary>Member HasChanged </summary>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool HasChanged();
	}
}
