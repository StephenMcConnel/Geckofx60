// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsITableEditor.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsITableEditor.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsITableEditor </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("4805e684-49b9-11d3-9ce4-ed60bd6cb5bc")]
	public interface nsITableEditor
	{
		
		/// <summary>Member InsertTableCell </summary>
		/// <param name='aNumber'> </param>
		/// <param name='aAfter'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InsertTableCell(System.Int32  aNumber, System.Boolean  aAfter);
		
		/// <summary>Member InsertTableColumn </summary>
		/// <param name='aNumber'> </param>
		/// <param name='aAfter'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InsertTableColumn(System.Int32  aNumber, System.Boolean  aAfter);
		
		/// <summary>Member InsertTableRow </summary>
		/// <param name='aNumber'> </param>
		/// <param name='aAfter'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InsertTableRow(System.Int32  aNumber, System.Boolean  aAfter);
		
		/// <summary>Member DeleteTable </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeleteTable();
		
		/// <summary>Member DeleteTableCellContents </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeleteTableCellContents();
		
		/// <summary>Member DeleteTableCell </summary>
		/// <param name='aNumber'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeleteTableCell(System.Int32  aNumber);
		
		/// <summary>Member DeleteTableColumn </summary>
		/// <param name='aNumber'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeleteTableColumn(System.Int32  aNumber);
		
		/// <summary>Member DeleteTableRow </summary>
		/// <param name='aNumber'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeleteTableRow(System.Int32  aNumber);
		
		/// <summary>Member SelectTableCell </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SelectTableCell();
		
		/// <summary>Member SelectBlockOfCells </summary>
		/// <param name='aStartCell'> </param>
		/// <param name='aEndCell'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SelectBlockOfCells([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  aStartCell, [MarshalAs(UnmanagedType.Interface)] nsIDOMElement  aEndCell);
		
		/// <summary>Member SelectTableRow </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SelectTableRow();
		
		/// <summary>Member SelectTableColumn </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SelectTableColumn();
		
		/// <summary>Member SelectTable </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SelectTable();
		
		/// <summary>Member SelectAllTableCells </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SelectAllTableCells();
		
		/// <summary>Member SwitchTableCellHeaderType </summary>
		/// <param name='aSourceCell'> </param>
		/// <returns>A nsIDOMElement</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMElement SwitchTableCellHeaderType([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  aSourceCell);
		
		/// <summary>Member JoinTableCells </summary>
		/// <param name='aMergeNonContiguousContents'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void JoinTableCells(System.Boolean  aMergeNonContiguousContents);
		
		/// <summary>Member SplitTableCell </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SplitTableCell();
		
		/// <summary>Member NormalizeTable </summary>
		/// <param name='aTable'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NormalizeTable([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  aTable);
		
		/// <summary>Member GetCellIndexes </summary>
		/// <param name='aCell'> </param>
		/// <param name='aRowIndex'> </param>
		/// <param name='aColIndex'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetCellIndexes([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  aCell, out System.Int32  aRowIndex, out System.Int32  aColIndex);
		
		/// <summary>Member GetTableSize </summary>
		/// <param name='aTable'> </param>
		/// <param name='aRowCount'> </param>
		/// <param name='aColCount'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetTableSize([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  aTable, out System.Int32  aRowCount, out System.Int32  aColCount);
		
		/// <summary>Member GetCellAt </summary>
		/// <param name='aTable'> </param>
		/// <param name='aRowIndex'> </param>
		/// <param name='aColIndex'> </param>
		/// <returns>A nsIDOMElement</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMElement GetCellAt([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  aTable, System.Int32  aRowIndex, System.Int32  aColIndex);
		
		/// <summary>Member GetCellDataAt </summary>
		/// <param name='aTable'> </param>
		/// <param name='aRowIndex'> </param>
		/// <param name='aColIndex'> </param>
		/// <param name='aCell'> </param>
		/// <param name='aStartRowIndex'> </param>
		/// <param name='aStartColIndex'> </param>
		/// <param name='aRowSpan'> </param>
		/// <param name='aColSpan'> </param>
		/// <param name='aActualRowSpan'> </param>
		/// <param name='aActualColSpan'> </param>
		/// <param name='aIsSelected'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetCellDataAt([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  aTable, System.Int32  aRowIndex, System.Int32  aColIndex, [MarshalAs(UnmanagedType.Interface)] out nsIDOMElement  aCell, out System.Int32  aStartRowIndex, out System.Int32  aStartColIndex, out System.Int32  aRowSpan, out System.Int32  aColSpan, out System.Int32  aActualRowSpan, out System.Int32  aActualColSpan, out System.Boolean  aIsSelected);
		
		/// <summary>Member GetFirstRow </summary>
		/// <param name='aTableElement'> </param>
		/// <returns>A nsIDOMNode</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMNode GetFirstRow([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  aTableElement);
		
		/// <summary>Member GetNextRow </summary>
		/// <param name='aTableElement'> </param>
		/// <returns>A nsIDOMNode</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMNode GetNextRow([MarshalAs(UnmanagedType.Interface)] nsIDOMNode  aTableElement);
		
		/// <summary>Member SetSelectionAfterTableEdit </summary>
		/// <param name='aTable'> </param>
		/// <param name='aRow'> </param>
		/// <param name='aCol'> </param>
		/// <param name='aDirection'> </param>
		/// <param name='aSelected'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetSelectionAfterTableEdit([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  aTable, System.Int32  aRow, System.Int32  aCol, System.Int32  aDirection, System.Boolean  aSelected);
		
		/// <summary>Member GetSelectedOrParentTableElement </summary>
		/// <param name='aTagName'> </param>
		/// <param name='aCount'> </param>
		/// <returns>A nsIDOMElement</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMElement GetSelectedOrParentTableElement([MarshalAs(UnmanagedType.LPStruct)] nsAString aTagName, out System.Int32  aCount);
		
		/// <summary>Member GetSelectedCellsType </summary>
		/// <param name='aElement'> </param>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetSelectedCellsType([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  aElement);
		
		/// <summary>Member GetFirstSelectedCell </summary>
		/// <param name='aRange'> </param>
		/// <returns>A nsIDOMElement</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMElement GetFirstSelectedCell([MarshalAs(UnmanagedType.Interface)] out nsIDOMRange  aRange);
		
		/// <summary>Member GetFirstSelectedCellInTable </summary>
		/// <param name='aRowIndex'> </param>
		/// <param name='aColIndex'> </param>
		/// <returns>A nsIDOMElement</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMElement GetFirstSelectedCellInTable(out System.Int32  aRowIndex, out System.Int32  aColIndex);
		
		/// <summary>Member GetNextSelectedCell </summary>
		/// <param name='aRange'> </param>
		/// <returns>A nsIDOMElement</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMElement GetNextSelectedCell([MarshalAs(UnmanagedType.Interface)] out nsIDOMRange  aRange);
	}
}
