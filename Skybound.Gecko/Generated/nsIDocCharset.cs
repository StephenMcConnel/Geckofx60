// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIDocCharset.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>
    /// The nsIDocCharset interface allows the user to view,
    /// hint, and set which converter is used to read the document's
    /// data.
    ///
    /// <P>Inside Mozilla all text is encoded as Unicode. By standardizing
    /// on Unicode every piece of code that handles characters no longer
    /// needs to:
    ///
    /// Have access to a character encoding parameter.
    /// Ask is the data stateful?
    /// Ask is the data single byte?
    /// Ask is the data multi-byte?
    /// If multi-byte: have access to a routine that can
    /// determine how many bytes in the current character.
    ///
    /// When the document is read in a converter is used to convert
    /// the document's data to Unicode.
    ///
    /// nsIDocCharset provides the ability to:
    ///
    /// See what converter was used when inputting the documents
    /// data.
    ///
    /// Override the character set for documents where the specified
    /// fallback, or auto-detected character set is incorrect
    ///
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("9c18bb4e-1dd1-11b2-bf91-9cc82c275823")]
	public interface nsIDocCharset
	{
		
		/// <summary>
        /// Get/sets the encoding (converter) used to read the
        /// document. Get returns the encoding used. Set forces
        /// (overrides) the encoding. After forcing the charset the
        /// embedding application will need to cause the data to be
        /// reparsed in order to update the DOM / display.
        ///
        /// A force also sets the fallback encoding for this frame.
        /// </summary>
		[return: MarshalAs(UnmanagedType.LPStr)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.String  GetCharsetAttribute();
		
		/// <summary>
        /// Get/sets the encoding (converter) used to read the
        /// document. Get returns the encoding used. Set forces
        /// (overrides) the encoding. After forcing the charset the
        /// embedding application will need to cause the data to be
        /// reparsed in order to update the DOM / display.
        ///
        /// A force also sets the fallback encoding for this frame.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCharsetAttribute([MarshalAs(UnmanagedType.LPStr)] System.String  aCharset);
	}
}
