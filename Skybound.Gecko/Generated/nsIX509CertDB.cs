// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIX509CertDB.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIX509CertDB.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIX509CertDB </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("da48b3c0-1284-11d5-ac67-000064657374")]
	public interface nsIX509CertDB
	{
		
		/// <summary>Member FindCertByNickname </summary>
		/// <param name='aToken'> </param>
		/// <param name='aNickname'> </param>
		/// <returns>A nsIX509Cert</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIX509Cert FindCertByNickname([MarshalAs(UnmanagedType.Interface)] nsISupports  aToken, [MarshalAs(UnmanagedType.LPStruct)] nsAString aNickname);
		
		/// <summary>Member FindCertByDBKey </summary>
		/// <param name='aDBkey'> </param>
		/// <param name='aToken'> </param>
		/// <returns>A nsIX509Cert</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIX509Cert FindCertByDBKey([MarshalAs(UnmanagedType.LPStr)] System.String  aDBkey, [MarshalAs(UnmanagedType.Interface)] nsISupports  aToken);
		
		/// <summary>Member FindCertNicknames </summary>
		/// <param name='aToken'> </param>
		/// <param name='aType'> </param>
		/// <param name='count'> </param>
		/// <param name='certNameList'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FindCertNicknames([MarshalAs(UnmanagedType.Interface)] nsISupports  aToken, System.UInt32  aType, out System.UInt32  count, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Skybound.Gecko.XpCom.WStringMarshaler", SizeParamIndex=2)] out string certNameList);
		
		/// <summary>Member FindEmailEncryptionCert </summary>
		/// <param name='aNickname'> </param>
		/// <returns>A nsIX509Cert</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIX509Cert FindEmailEncryptionCert([MarshalAs(UnmanagedType.LPStruct)] nsAString aNickname);
		
		/// <summary>Member FindEmailSigningCert </summary>
		/// <param name='aNickname'> </param>
		/// <returns>A nsIX509Cert</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIX509Cert FindEmailSigningCert([MarshalAs(UnmanagedType.LPStruct)] nsAString aNickname);
		
		/// <summary>Member FindCertByEmailAddress </summary>
		/// <param name='aToken'> </param>
		/// <param name='aEmailAddress'> </param>
		/// <returns>A nsIX509Cert</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIX509Cert FindCertByEmailAddress([MarshalAs(UnmanagedType.Interface)] nsISupports  aToken, [MarshalAs(UnmanagedType.LPStr)] System.String  aEmailAddress);
		
		/// <summary>Member ImportCertificates </summary>
		/// <param name='data'> </param>
		/// <param name='length'> </param>
		/// <param name='type'> </param>
		/// <param name='ctx'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ImportCertificates(System.IntPtr  data, System.UInt32  length, System.UInt32  type, [MarshalAs(UnmanagedType.Interface)] nsIInterfaceRequestor  ctx);
		
		/// <summary>Member ImportEmailCertificate </summary>
		/// <param name='data'> </param>
		/// <param name='length'> </param>
		/// <param name='ctx'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ImportEmailCertificate(System.IntPtr  data, System.UInt32  length, [MarshalAs(UnmanagedType.Interface)] nsIInterfaceRequestor  ctx);
		
		/// <summary>Member ImportServerCertificate </summary>
		/// <param name='data'> </param>
		/// <param name='length'> </param>
		/// <param name='ctx'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ImportServerCertificate(System.IntPtr  data, System.UInt32  length, [MarshalAs(UnmanagedType.Interface)] nsIInterfaceRequestor  ctx);
		
		/// <summary>Member ImportUserCertificate </summary>
		/// <param name='data'> </param>
		/// <param name='length'> </param>
		/// <param name='ctx'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ImportUserCertificate(System.IntPtr  data, System.UInt32  length, [MarshalAs(UnmanagedType.Interface)] nsIInterfaceRequestor  ctx);
		
		/// <summary>Member DeleteCertificate </summary>
		/// <param name='aCert'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeleteCertificate([MarshalAs(UnmanagedType.Interface)] nsIX509Cert  aCert);
		
		/// <summary>Member SetCertTrust </summary>
		/// <param name='cert'> </param>
		/// <param name='type'> </param>
		/// <param name='trust'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCertTrust([MarshalAs(UnmanagedType.Interface)] nsIX509Cert  cert, System.UInt32  type, System.UInt32  trust);
		
		/// <summary>Member IsCertTrusted </summary>
		/// <param name='cert'> </param>
		/// <param name='certType'> </param>
		/// <param name='trustType'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsCertTrusted([MarshalAs(UnmanagedType.Interface)] nsIX509Cert  cert, System.UInt32  certType, System.UInt32  trustType);
		
		/// <summary>Member ImportCertsFromFile </summary>
		/// <param name='aToken'> </param>
		/// <param name='aFile'> </param>
		/// <param name='aType'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ImportCertsFromFile([MarshalAs(UnmanagedType.Interface)] nsISupports  aToken, [MarshalAs(UnmanagedType.Interface)] nsILocalFile  aFile, System.UInt32  aType);
		
		/// <summary>Member ImportPKCS12File </summary>
		/// <param name='aToken'> </param>
		/// <param name='aFile'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ImportPKCS12File([MarshalAs(UnmanagedType.Interface)] nsISupports  aToken, [MarshalAs(UnmanagedType.Interface)] nsILocalFile  aFile);
		
		/// <summary>Member ExportPKCS12File </summary>
		/// <param name='aToken'> </param>
		/// <param name='aFile'> </param>
		/// <param name='count'> </param>
		/// <param name='aCerts'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ExportPKCS12File([MarshalAs(UnmanagedType.Interface)] nsISupports  aToken, [MarshalAs(UnmanagedType.Interface)] nsILocalFile  aFile, System.UInt32  count, nsIX509Cert  aCerts);
		
		/// <summary>Member GetOCSPResponders </summary>
		/// <returns>A nsIArray</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIArray GetOCSPResponders();
		
		/// <summary>Member GetIsOcspOnAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetIsOcspOnAttribute();
		
		/// <summary>Member ConstructX509FromBase64 </summary>
		/// <param name='base64'> </param>
		/// <returns>A nsIX509Cert</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIX509Cert ConstructX509FromBase64([MarshalAs(UnmanagedType.LPStr)] System.String  base64);
	}
}
