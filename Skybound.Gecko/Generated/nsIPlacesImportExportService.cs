// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPlacesImportExportService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>
    /// The PlacesImportExport interface provides methods for importing
    /// and exporting Places data.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("47a4a09e-c708-4e68-b2f2-664d982ce026")]
	public interface nsIPlacesImportExportService
	{
		
		/// <summary>
        /// Loads the given bookmarks.html file and replaces it with the current
        /// bookmarks hierarchy (if aIsInitialImport is true) or appends it
        /// (if aIsInitialImport is false).
        ///
        /// Three nsIObserverService notifications are fired as a result of the
        /// import.  "bookmarks-restore-begin" is fired just before the import is
        /// started.  "bookmarks-restore-success" is fired right after the
        /// bookmarks are successfully imported.  "bookmarks-restore-failed" is
        /// fired right after a failure occurs when importing the bookmarks.
        /// Observers will be passed through their data parameters either "html"
        /// if aIsInitialImport is false or "html-initial" if aIsInitialImport is
        /// true.  The observer subject will be null.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ImportHTMLFromFile([MarshalAs(UnmanagedType.Interface)] nsILocalFile  aFile, System.Boolean  aIsInitialImport);
		
		/// <summary>
        /// Same thing as importHTMLFromFile, but takes a URI instead
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ImportHTMLFromURI([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI, System.Boolean  aIsInitialImport);
		
		/// <summary>
        /// Loads the given bookmarks.html file and puts it in the given folder
        ///
        /// Three nsIObserverService notifications are fired as a result of the
        /// import.  "bookmarks-restore-begin" is fired just before the import is
        /// started.  "bookmarks-restore-success" is fired right after the
        /// bookmarks are successfully imported.  "bookmarks-restore-failed" is
        /// fired right after a failure occurs when importing the bookmarks.
        /// Observers will be passed through their data parameters either "html"
        /// if aIsInitialImport is false or "html-initial" if aIsInitialImport is
        /// true.  The observer subject will be an nsISupportsPRInt64 whose value
        /// is aFolder.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ImportHTMLFromFileToFolder([MarshalAs(UnmanagedType.Interface)] nsILocalFile  aFile, System.Int64  aFolder, System.Boolean  aIsInitialImport);
		
		/// <summary>
        /// Saves the current bookmarks hierarchy to a bookmarks.html file.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ExportHTMLToFile([MarshalAs(UnmanagedType.Interface)] nsILocalFile  aFile);
		
		/// <summary>
        /// Backup the bookmarks.html file.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BackupBookmarksFile();
	}
}
