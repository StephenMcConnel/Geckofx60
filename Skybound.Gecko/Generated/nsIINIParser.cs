// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIINIParser.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIINIParser </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("7eb955f6-3e78-4d39-b72f-c1bf12a94bce")]
	public interface nsIINIParser
	{
		
		/// <summary>
        /// Enumerates the [section]s available in the INI file.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIUTF8StringEnumerator GetSections();
		
		/// <summary>
        /// Enumerates the keys available within a section.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIUTF8StringEnumerator GetKeys([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String aSection);
		
		/// <summary>
        /// Get the value of a string for a particular section and key.
        /// </summary>
		[return: MarshalAs(UnmanagedType.LPStruct)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAUTF8String GetString([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String aSection, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String aKey);
	}
	
	/// <summary>nsIINIParserWriter </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("712dc5da-8d09-45d0-ba2e-de27eb384c4c")]
	public interface nsIINIParserWriter
	{
		
		/// <summary>
        /// Set the value of a string for a particular section and key.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetString([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String aSection, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String aKey, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String aValue);
		
		/// <summary>
        /// Write to the INI file.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WriteFile([MarshalAs(UnmanagedType.Interface)] nsILocalFile aINIFile);
	}
	
	/// <summary>nsIINIParserFactory </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ccae7ea5-1218-4b51-aecb-c2d8ecd46af9")]
	public interface nsIINIParserFactory
	{
		
		/// <summary>
        /// Create an iniparser instance from a local file.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIINIParser CreateINIParser([MarshalAs(UnmanagedType.Interface)] nsILocalFile aINIFile);
	}
}
