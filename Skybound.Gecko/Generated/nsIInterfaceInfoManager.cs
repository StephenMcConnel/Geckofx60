// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIInterfaceInfoManager.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIInterfaceInfoManager.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIInterfaceInfoManager </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8B161900-BE2B-11d2-9831-006008962422")]
	public interface nsIInterfaceInfoManager
	{
		
		/// <summary>Member GetInfoForIID </summary>
		/// <param name='iid'> </param>
		/// <returns>A nsIInterfaceInfo</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIInterfaceInfo GetInfoForIID(System.Guid iid);
		
		/// <summary>Member GetInfoForName </summary>
		/// <param name='name'> </param>
		/// <returns>A nsIInterfaceInfo</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIInterfaceInfo GetInfoForName([MarshalAs(UnmanagedType.LPStr)] System.String  name);
		
		/// <summary>Member GetIIDForName </summary>
		/// <param name='name'> </param>
		/// <returns>A System.Guid</returns>
		System.Guid GetIIDForName([MarshalAs(UnmanagedType.LPStr)] System.String  name);
		
		/// <summary>Member GetNameForIID </summary>
		/// <param name='iid'> </param>
		/// <returns>A System.String</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		string GetNameForIID(System.Guid iid);
		
		/// <summary>Member EnumerateInterfaces </summary>
		/// <returns>A nsIEnumerator</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIEnumerator EnumerateInterfaces();
		
		/// <summary>Member AutoRegisterInterfaces </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AutoRegisterInterfaces();
		
		/// <summary>Member EnumerateInterfacesWhoseNamesStartWith </summary>
		/// <param name='prefix'> </param>
		/// <returns>A nsIEnumerator</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIEnumerator EnumerateInterfacesWhoseNamesStartWith([MarshalAs(UnmanagedType.LPStr)] System.String  prefix);
	}
	
	/// <summary>nsIInterfaceInfoSuperManager </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0ee22850-bc6a-11d5-9134-0010a4e73d9a")]
	public interface nsIInterfaceInfoSuperManager : nsIInterfaceInfoManager
	{
		
		/// <summary>Member GetInfoForIID </summary>
		/// <param name='iid'> </param>
		/// <returns>A nsIInterfaceInfo</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIInterfaceInfo GetInfoForIID(System.Guid iid);
		
		/// <summary>Member GetInfoForName </summary>
		/// <param name='name'> </param>
		/// <returns>A nsIInterfaceInfo</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIInterfaceInfo GetInfoForName([MarshalAs(UnmanagedType.LPStr)] System.String  name);
		
		/// <summary>Member GetIIDForName </summary>
		/// <param name='name'> </param>
		/// <returns>A System.Guid</returns>
		new System.Guid GetIIDForName([MarshalAs(UnmanagedType.LPStr)] System.String  name);
		
		/// <summary>Member GetNameForIID </summary>
		/// <param name='iid'> </param>
		/// <returns>A System.String</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new string GetNameForIID(System.Guid iid);
		
		/// <summary>Member EnumerateInterfaces </summary>
		/// <returns>A nsIEnumerator</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIEnumerator EnumerateInterfaces();
		
		/// <summary>Member AutoRegisterInterfaces </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void AutoRegisterInterfaces();
		
		/// <summary>Member EnumerateInterfacesWhoseNamesStartWith </summary>
		/// <param name='prefix'> </param>
		/// <returns>A nsIEnumerator</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIEnumerator EnumerateInterfacesWhoseNamesStartWith([MarshalAs(UnmanagedType.LPStr)] System.String  prefix);
		
		/// <summary>Member AddAdditionalManager </summary>
		/// <param name='manager'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddAdditionalManager([MarshalAs(UnmanagedType.Interface)] nsIInterfaceInfoManager  manager);
		
		/// <summary>Member RemoveAdditionalManager </summary>
		/// <param name='manager'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveAdditionalManager([MarshalAs(UnmanagedType.Interface)] nsIInterfaceInfoManager  manager);
		
		/// <summary>Member HasAdditionalManagers </summary>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool HasAdditionalManagers();
		
		/// <summary>Member EnumerateAdditionalManagers </summary>
		/// <returns>A nsISimpleEnumerator</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISimpleEnumerator EnumerateAdditionalManagers();
	}
}
