// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file inIDOMView.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>inIDOMView </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("FBB67442-27A3-483C-8EB2-29C3EED7514C")]
	public interface inIDOMView
	{
		
		/// <summary>Member GetRootNodeAttribute </summary>
		/// <returns>A nsIDOMNode</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMNode GetRootNodeAttribute();
		
		/// <summary>Member SetRootNodeAttribute </summary>
		/// <param name='aRootNode'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetRootNodeAttribute([MarshalAs(UnmanagedType.Interface)] nsIDOMNode aRootNode);
		
		/// <summary>Member GetShowAnonymousContentAttribute </summary>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetShowAnonymousContentAttribute();
		
		/// <summary>Member SetShowAnonymousContentAttribute </summary>
		/// <param name='aShowAnonymousContent'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetShowAnonymousContentAttribute([MarshalAs(UnmanagedType.Bool)] bool aShowAnonymousContent);
		
		/// <summary>Member GetShowSubDocumentsAttribute </summary>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetShowSubDocumentsAttribute();
		
		/// <summary>Member SetShowSubDocumentsAttribute </summary>
		/// <param name='aShowSubDocuments'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetShowSubDocumentsAttribute([MarshalAs(UnmanagedType.Bool)] bool aShowSubDocuments);
		
		/// <summary>Member GetShowWhitespaceNodesAttribute </summary>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetShowWhitespaceNodesAttribute();
		
		/// <summary>Member SetShowWhitespaceNodesAttribute </summary>
		/// <param name='aShowWhitespaceNodes'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetShowWhitespaceNodesAttribute([MarshalAs(UnmanagedType.Bool)] bool aShowWhitespaceNodes);
		
		/// <summary>Member GetShowAccessibleNodesAttribute </summary>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetShowAccessibleNodesAttribute();
		
		/// <summary>Member SetShowAccessibleNodesAttribute </summary>
		/// <param name='aShowAccessibleNodes'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetShowAccessibleNodesAttribute([MarshalAs(UnmanagedType.Bool)] bool aShowAccessibleNodes);
		
		/// <summary>Member GetWhatToShowAttribute </summary>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetWhatToShowAttribute();
		
		/// <summary>Member SetWhatToShowAttribute </summary>
		/// <param name='aWhatToShow'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetWhatToShowAttribute(uint aWhatToShow);
		
		/// <summary>Member GetNodeFromRowIndex </summary>
		/// <param name='rowIndex'> </param>
		/// <returns>A nsIDOMNode</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMNode GetNodeFromRowIndex(int rowIndex);
		
		/// <summary>Member GetRowIndexFromNode </summary>
		/// <param name='node'> </param>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetRowIndexFromNode([MarshalAs(UnmanagedType.Interface)] nsIDOMNode node);
		
		/// <summary>Member Rebuild </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Rebuild();
	}
}
