// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIPipe.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIPipe.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIPipe </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("f4211abc-61b3-11d4-9877-00c04fa0cf4a")]
	public interface nsIPipe
	{
		
		/// <summary>Member Init </summary>
		/// <param name='nonBlockingInput'> </param>
		/// <param name='nonBlockingOutput'> </param>
		/// <param name='segmentSize'> </param>
		/// <param name='segmentCount'> </param>
		/// <param name='segmentAllocator'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Init(System.Boolean  nonBlockingInput, System.Boolean  nonBlockingOutput, System.UInt32  segmentSize, System.UInt32  segmentCount, [MarshalAs(UnmanagedType.Interface)] nsIMemory  segmentAllocator);
		
		/// <summary>Member GetInputStreamAttribute </summary>
		/// <returns>A nsIAsyncInputStream </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIAsyncInputStream  GetInputStreamAttribute();
		
		/// <summary>Member GetOutputStreamAttribute </summary>
		/// <returns>A nsIAsyncOutputStream </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIAsyncOutputStream  GetOutputStreamAttribute();
	}
	
	/// <summary>nsISearchableInputStream </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8C39EF62-F7C9-11d4-98F5-001083010E9B")]
	public interface nsISearchableInputStream
	{
		
		/// <summary>Member Search </summary>
		/// <param name='forString'> </param>
		/// <param name='ignoreCase'> </param>
		/// <param name='found'> </param>
		/// <param name='offsetSearchedTo'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Search([MarshalAs(UnmanagedType.LPStr)] System.String  forString, System.Boolean  ignoreCase, out System.Boolean  found, out System.UInt32  offsetSearchedTo);
	}
}
