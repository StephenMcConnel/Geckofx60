// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIPluginHost.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIPluginHost.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIPluginHost </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("C198DEAA-3F93-482D-A47C-85FF6514FE07")]
	public interface nsIPluginHost
	{
		
		/// <summary>Member Init </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Init();
		
		/// <summary>Member Destroy </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Destroy();
		
		/// <summary>Member LoadPlugins </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LoadPlugins();
		
		/// <summary>Member ReloadPlugins </summary>
		/// <param name='reloadPages'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ReloadPlugins(System.Boolean  reloadPages);
		
		/// <summary>Member GetPlugin </summary>
		/// <param name='aMimeType'> </param>
		/// <returns>A nsIPlugin</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPlugin GetPlugin([MarshalAs(UnmanagedType.LPStr)] System.String  aMimeType);
		
		/// <summary>Member InstantiateEmbeddedPlugin </summary>
		/// <param name='aMimeType'> </param>
		/// <param name='aURL'> </param>
		/// <param name='aOwner'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InstantiateEmbeddedPlugin([MarshalAs(UnmanagedType.LPStr)] System.String  aMimeType, [MarshalAs(UnmanagedType.Interface)] nsIURI  aURL, [MarshalAs(UnmanagedType.Interface)] nsIPluginInstanceOwner  aOwner);
		
		/// <summary>Member InstantiateFullPagePlugin </summary>
		/// <param name='aMimeType'> </param>
		/// <param name='aURI'> </param>
		/// <param name='aOwner'> </param>
		/// <param name='aStreamListener'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InstantiateFullPagePlugin([MarshalAs(UnmanagedType.LPStr)] System.String  aMimeType, [MarshalAs(UnmanagedType.Interface)] nsIURI  aURI, [MarshalAs(UnmanagedType.Interface)] nsIPluginInstanceOwner  aOwner, [MarshalAs(UnmanagedType.Interface)] out nsIStreamListener  aStreamListener);
		
		/// <summary>Member InstantiatePluginForChannel </summary>
		/// <param name='aChannel'> </param>
		/// <param name='aOwner'> </param>
		/// <returns>A nsIStreamListener</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStreamListener InstantiatePluginForChannel([MarshalAs(UnmanagedType.Interface)] nsIChannel  aChannel, [MarshalAs(UnmanagedType.Interface)] nsIPluginInstanceOwner  aOwner);
		
		/// <summary>Member SetUpPluginInstance </summary>
		/// <param name='aMimeType'> </param>
		/// <param name='aURL'> </param>
		/// <param name='aOwner'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetUpPluginInstance([MarshalAs(UnmanagedType.LPStr)] System.String  aMimeType, [MarshalAs(UnmanagedType.Interface)] nsIURI  aURL, [MarshalAs(UnmanagedType.Interface)] nsIPluginInstanceOwner  aOwner);
		
		/// <summary>Member IsPluginEnabledForType </summary>
		/// <param name='aMimeType'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void IsPluginEnabledForType([MarshalAs(UnmanagedType.LPStr)] System.String  aMimeType);
		
		/// <summary>Member IsPluginEnabledForExtension </summary>
		/// <param name='aExtension'> </param>
		/// <param name='aMimeType'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void IsPluginEnabledForExtension([MarshalAs(UnmanagedType.LPStr)] System.String  aExtension, System.IntPtr aMimeType);
		
		/// <summary>Member GetPluginCountAttribute </summary>
		/// <returns>A System.UInt32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetPluginCountAttribute();
		
		/// <summary>Member GetPlugins </summary>
		/// <param name='aPluginCount'> </param>
		/// <param name='aPluginArray'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetPlugins(System.UInt32  aPluginCount, [MarshalAs(UnmanagedType.Interface)] out nsIDOMPlugin  aPluginArray);
		
		/// <summary>Member GetPluginTags </summary>
		/// <param name='aPluginCount'> </param>
		/// <returns>A nsIPluginTag </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPluginTag  GetPluginTags(out System.UInt32  aPluginCount);
		
		/// <summary>Member StopPluginInstance </summary>
		/// <param name='aInstance'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StopPluginInstance([MarshalAs(UnmanagedType.Interface)] nsIPluginInstance  aInstance);
		
		/// <summary>Member HandleBadPlugin </summary>
		/// <param name='aLibrary'> </param>
		/// <param name='instance'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HandleBadPlugin(System.IntPtr aLibrary, [MarshalAs(UnmanagedType.Interface)] nsIPluginInstance  instance);
		
		/// <summary>Member FindProxyForURL </summary>
		/// <param name='aURL'> </param>
		/// <param name='aResult'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FindProxyForURL([MarshalAs(UnmanagedType.LPStr)] System.String  aURL, [MarshalAs(UnmanagedType.LPStr)] out System.String  aResult);
		
		/// <summary>Member UserAgent </summary>
		/// <param name='resultingAgentString'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UserAgent(System.IntPtr resultingAgentString);
		
		/// <summary>Member ParsePostBufferToFixHeaders </summary>
		/// <param name='aInPostData'> </param>
		/// <param name='aInPostDataLen'> </param>
		/// <param name='aOutPostData'> </param>
		/// <param name='aOutPostDataLen'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ParsePostBufferToFixHeaders([MarshalAs(UnmanagedType.LPStr)] System.String  aInPostData, System.UInt32  aInPostDataLen, [MarshalAs(UnmanagedType.LPStr)] out System.String  aOutPostData, out System.UInt32  aOutPostDataLen);
		
		/// <summary>Member CreateTempFileToPost </summary>
		/// <param name='aPostDataURL'> </param>
		/// <returns>A nsIFile</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIFile CreateTempFileToPost([MarshalAs(UnmanagedType.LPStr)] System.String  aPostDataURL);
		
		/// <summary>Member NewPluginNativeWindow </summary>
		/// <param name='aPluginNativeWindow'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NewPluginNativeWindow(out System.IntPtr aPluginNativeWindow);
		
		/// <summary>Member DeletePluginNativeWindow </summary>
		/// <param name='aPluginNativeWindow'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeletePluginNativeWindow(System.IntPtr aPluginNativeWindow);
		
		/// <summary>Member InstantiateDummyJavaPlugin </summary>
		/// <param name='aOwner'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InstantiateDummyJavaPlugin([MarshalAs(UnmanagedType.Interface)] nsIPluginInstanceOwner  aOwner);
		
		/// <summary>Member GetPluginName </summary>
		/// <param name='aInstance'> </param>
		/// <param name='aPluginName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetPluginName([MarshalAs(UnmanagedType.Interface)] nsIPluginInstance  aInstance, [MarshalAs(UnmanagedType.LPStr)] out System.String  aPluginName);
		
		/// <summary>Member GetPluginTagForInstance </summary>
		/// <param name='aInstance'> </param>
		/// <returns>A nsIPluginTag</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPluginTag GetPluginTagForInstance([MarshalAs(UnmanagedType.Interface)] nsIPluginInstance  aInstance);
	}
	
	/// <summary>nsIPluginHost_MOZILLA_2_0_BRANCH </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0b0a2fb8-dc2b-4df2-b721-4b7a4008df6c")]
	public interface nsIPluginHost_MOZILLA_2_0_BRANCH
	{
		
		/// <summary>Member ClearSiteData </summary>
		/// <param name='plugin'> </param>
		/// <param name='domain'> </param>
		/// <param name='flags'> </param>
		/// <param name='maxAge'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ClearSiteData([MarshalAs(UnmanagedType.Interface)] nsIPluginTag  plugin, [MarshalAs(UnmanagedType.LPStruct)] nsAString  domain, System.UInt64  flags, System.Int64  maxAge);
		
		/// <summary>Member SiteHasData </summary>
		/// <param name='plugin'> </param>
		/// <param name='domain'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool SiteHasData([MarshalAs(UnmanagedType.Interface)] nsIPluginTag  plugin, [MarshalAs(UnmanagedType.LPStruct)] nsAString  domain);
	}
}
