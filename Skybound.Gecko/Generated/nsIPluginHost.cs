// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPluginHost.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIPluginHost </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("C198DEAA-3F93-482D-A47C-85FF6514FE07")]
	public interface nsIPluginHost
	{
		
		/// <summary>Member Init </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Init();
		
		/// <summary>Member Destroy </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Destroy();
		
		/// <summary>Member LoadPlugins </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LoadPlugins();
		
		/// <summary>
        /// Causes the plugins directory to be searched again for new plugin
        /// libraries.
        ///
        /// @param reloadPages - indicates whether currently visible pages should
        /// also be reloaded
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ReloadPlugins(bool reloadPages);
		
		/// <summary>Member GetPlugin </summary>
		/// <param name='aMimeType'> </param>
		/// <returns>A nsIPlugin</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPlugin GetPlugin([MarshalAs(UnmanagedType.LPStr)] string aMimeType);
		
		/// <summary>Member InstantiateEmbeddedPlugin </summary>
		/// <param name='aMimeType'> </param>
		/// <param name='aURL'> </param>
		/// <param name='aOwner'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InstantiateEmbeddedPlugin([MarshalAs(UnmanagedType.LPStr)] string aMimeType, [MarshalAs(UnmanagedType.Interface)] nsIURI aURL, [MarshalAs(UnmanagedType.Interface)] nsIPluginInstanceOwner aOwner);
		
		/// <summary>Member InstantiateFullPagePlugin </summary>
		/// <param name='aMimeType'> </param>
		/// <param name='aURI'> </param>
		/// <param name='aOwner'> </param>
		/// <param name='aStreamListener'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InstantiateFullPagePlugin([MarshalAs(UnmanagedType.LPStr)] string aMimeType, [MarshalAs(UnmanagedType.Interface)] nsIURI aURI, [MarshalAs(UnmanagedType.Interface)] nsIPluginInstanceOwner aOwner, [MarshalAs(UnmanagedType.Interface)] out nsIStreamListener aStreamListener);
		
		/// <summary>
        /// Instantiate an embedded plugin for an existing channel. The caller is
        /// responsible for opening the channel. It may or may not be already opened
        /// when this function is called.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStreamListener InstantiatePluginForChannel([MarshalAs(UnmanagedType.Interface)] nsIChannel aChannel, [MarshalAs(UnmanagedType.Interface)] nsIPluginInstanceOwner aOwner);
		
		/// <summary>Member SetUpPluginInstance </summary>
		/// <param name='aMimeType'> </param>
		/// <param name='aURL'> </param>
		/// <param name='aOwner'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetUpPluginInstance([MarshalAs(UnmanagedType.LPStr)] string aMimeType, [MarshalAs(UnmanagedType.Interface)] nsIURI aURL, [MarshalAs(UnmanagedType.Interface)] nsIPluginInstanceOwner aOwner);
		
		/// <summary>
        /// NS_ERROR_FAILURE if there is no plugin for this type.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void IsPluginEnabledForType([MarshalAs(UnmanagedType.LPStr)] string aMimeType);
		
		/// <summary>
        /// the plugin is explicitly disabled or there is no plugin.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void IsPluginEnabledForExtension([MarshalAs(UnmanagedType.LPStr)] string aExtension, System.IntPtr aMimeType);
		
		/// <summary>Member GetPluginCountAttribute </summary>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetPluginCountAttribute();
		
		/// <summary>
        ///array </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetPlugins(uint aPluginCount, [MarshalAs(UnmanagedType.Interface)] out nsIDOMPlugin aPluginArray);
		
		/// <summary>Member GetPluginTags </summary>
		/// <param name='aPluginCount'> </param>
		/// <returns>A nsIPluginTag</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPluginTag GetPluginTags(out uint aPluginCount);
		
		/// <summary>Member StopPluginInstance </summary>
		/// <param name='aInstance'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StopPluginInstance([MarshalAs(UnmanagedType.Interface)] nsIPluginInstance aInstance);
		
		/// <summary>Member HandleBadPlugin </summary>
		/// <param name='aLibrary'> </param>
		/// <param name='instance'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HandleBadPlugin(System.IntPtr aLibrary, [MarshalAs(UnmanagedType.Interface)] nsIPluginInstance instance);
		
		/// <summary>
        /// Returns the proxy info for a given URL. The caller is required to
        /// free the resulting memory with nsIMalloc::Free. The result will be in the
        /// following format
        ///
        /// i)   "DIRECT"  -- no proxy
        /// ii)  "PROXY xxx.xxx.xxx.xxx"   -- use proxy
        /// iii) "SOCKS xxx.xxx.xxx.xxx"  -- use SOCKS
        /// iv)  Mixed. e.g. "PROXY 111.111.111.111;PROXY 112.112.112.112",
        /// "PROXY 111.111.111.111;SOCKS 112.112.112.112"....
        ///
        /// Which proxy/SOCKS to use is determined by the plugin.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FindProxyForURL([MarshalAs(UnmanagedType.LPStr)] string aURL, [MarshalAs(UnmanagedType.LPStr)] out string aResult);
		
		/// <summary>Member UserAgent </summary>
		/// <param name='resultingAgentString'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UserAgent(System.IntPtr resultingAgentString);
		
		/// <summary>
        /// This method parses post buffer to find out case insensitive "Content-length" string
        /// and CR or LF some where after that, then it assumes there is http headers in
        /// the input buffer and continue to search for end of headers (CRLFCRLF or LFLF).
        /// It will *always malloc()* output buffer (caller is responsible to free it)
        /// if input buffer starts with LF, which comes from 4.x spec
        /// http://developer.netscape.com/docs/manuals/communicator/plugin/pgfn2.htm#1007754
        /// "If no custom headers are required, simply add a blank
        /// line ('\n') to the beginning of the file or buffer.",
        /// it skips that '\n' and considers rest of the input buffer as data.
        /// If "Content-length" string and end of headers is found
        /// it substitutes single LF with CRLF in the headers, so the end of headers
        /// always will be CRLFCRLF (single CR in headers, if any, remain untouched)
        /// else
        /// it puts "Content-length: "+size_of_data+CRLFCRLF at the beginning of the output buffer
        /// and memcpy data to the output buffer
        ///
        /// On failure outPostData and outPostDataLen will be set in 0.
        /// @param aInPostData      - the post data
        /// @param aInPostDataLen   - the length aInPostData
        /// @param aOutPostData     - the buffer
        /// @param aOutPostDataLen  - the length of aOutPostData
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ParsePostBufferToFixHeaders([MarshalAs(UnmanagedType.LPStr)] string aInPostData, uint aInPostDataLen, [MarshalAs(UnmanagedType.LPStr)] out string aOutPostData, out uint aOutPostDataLen);
		
		/// <summary>
        /// To create temp file with Content len header in, it will use by http POST
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIFile CreateTempFileToPost([MarshalAs(UnmanagedType.LPStr)] string aPostDataURL);
		
		/// <summary>
        /// Creates a new plugin native window object
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NewPluginNativeWindow(out System.IntPtr aPluginNativeWindow);
		
		/// <summary>
        /// Deletes plugin native window object created by NewPluginNativeWindow
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeletePluginNativeWindow(System.IntPtr aPluginNativeWindow);
		
		/// <summary>
        /// Instantiate a "dummy" java plugin if a java plugin that supports
        /// NPRuntime is installed. This plugin is used for exposing
        /// window.java and window.Packages. If the java plugin supports
        /// NPRuntime and instantiation was successful, aOwners instance will
        /// be non-null, if not, it will be null.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InstantiateDummyJavaPlugin([MarshalAs(UnmanagedType.Interface)] nsIPluginInstanceOwner aOwner);
		
		/// <summary>
        /// Get the plugin name for the plugin instance.
        /// @param aInstance the plugin instance object
        /// @param aPluginName returns a pointer to a shared readonly string value,
        /// it's only valid for the lifetime of the plugin instance - you must
        /// copy the string value if you need it longer than that.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetPluginName([MarshalAs(UnmanagedType.Interface)] nsIPluginInstance aInstance, [MarshalAs(UnmanagedType.LPStr)] out string aPluginName);
		
		/// <summary>
        /// Get the plugin tag associated with a given plugin instance.
        /// @param aInstance the plugin instance object
        /// @return plugin tag object
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPluginTag GetPluginTagForInstance([MarshalAs(UnmanagedType.Interface)] nsIPluginInstance aInstance);
	}
	
	/// <summary>
    /// Methods for clearing plugin private data. These should be moved onto
    /// nsIPluginHost proper post-Gecko 2.0.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0b0a2fb8-dc2b-4df2-b721-4b7a4008df6c")]
	public interface nsIPluginHost_MOZILLA_2_0_BRANCH
	{
		
		/// <summary>
        /// Clear site data for a given plugin.
        ///
        /// @param plugin: the plugin to clear data for, such as one returned by
        /// nsIPluginHost.getPluginTags.
        /// @param domain: the domain to clear data for. If this argument is null,
        /// clear data for all domains. Otherwise, it must be a domain
        /// only (not a complete URI or IRI). The base domain for the
        /// given site will be determined; any data for the base domain
        /// or its subdomains will be cleared.
        /// @param flags: a flag value defined above.
        /// @param maxAge: the maximum age in seconds of data to clear, inclusive. If
        /// maxAge is 0, no data is cleared; if it is -1, all data is
        /// cleared.
        ///
        /// @throws NS_ERROR_INVALID_ARG if the domain argument is malformed.
        /// @throws NS_ERROR_PLUGIN_TIME_RANGE_NOT_SUPPORTED if maxAge is a value other
        /// than -1 and the plugin does not support clearing by timerange in
        /// general or for that particular site and/or flag combination.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ClearSiteData([MarshalAs(UnmanagedType.Interface)] nsIPluginTag plugin, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String domain, ulong flags, long maxAge);
		
		/// <summary>
        /// Determine if a plugin has stored data for a given site.
        ///
        /// @param plugin: the plugin to query, such as one returned by
        /// nsIPluginHost.getPluginTags.
        /// @param domain: the domain to test. If this argument is null, test if data
        /// is stored for any site. The base domain for the given domain
        /// will be determined; if any data for the base domain or its
        /// subdomains is found, return true.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool SiteHasData([MarshalAs(UnmanagedType.Interface)] nsIPluginTag plugin, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String domain);
	}
}
