// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: IWeaveCrypto.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file IWeaveCrypto.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>IWeaveCrypto </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("f4463043-315e-41f3-b779-82e900e6fffa")]
	public interface IWeaveCrypto
	{
		
		/// <summary>Member GetAlgorithmAttribute </summary>
		/// <returns>A System.UInt32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetAlgorithmAttribute();
		
		/// <summary>Member SetAlgorithmAttribute </summary>
		/// <param name='aAlgorithm'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetAlgorithmAttribute(System.UInt32  aAlgorithm);
		
		/// <summary>Member GetKeypairBitsAttribute </summary>
		/// <returns>A System.UInt32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetKeypairBitsAttribute();
		
		/// <summary>Member SetKeypairBitsAttribute </summary>
		/// <param name='aKeypairBits'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetKeypairBitsAttribute(System.UInt32  aKeypairBits);
		
		/// <summary>Member Encrypt </summary>
		/// <param name='clearText'> </param>
		/// <param name='symmetricKey'> </param>
		/// <param name='iv'> </param>
		/// <returns>A nsAString</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString Encrypt([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String  clearText, [MarshalAs(UnmanagedType.LPStruct)] nsAString  symmetricKey, [MarshalAs(UnmanagedType.LPStruct)] nsAString  iv);
		
		/// <summary>Member Decrypt </summary>
		/// <param name='cipherText'> </param>
		/// <param name='symmetricKey'> </param>
		/// <param name='iv'> </param>
		/// <returns>A nsAUTF8String</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAUTF8String Decrypt([MarshalAs(UnmanagedType.LPStruct)] nsAString  cipherText, [MarshalAs(UnmanagedType.LPStruct)] nsAString  symmetricKey, [MarshalAs(UnmanagedType.LPStruct)] nsAString  iv);
		
		/// <summary>Member GenerateKeypair </summary>
		/// <param name='aPassphrase'> </param>
		/// <param name='aSalt'> </param>
		/// <param name='aIV'> </param>
		/// <param name='aEncodedPublicKey'> </param>
		/// <param name='aWrappedPrivateKey'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GenerateKeypair([MarshalAs(UnmanagedType.LPStruct)] nsAString  aPassphrase, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aSalt, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aIV, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aEncodedPublicKey, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aWrappedPrivateKey);
		
		/// <summary>Member GenerateRandomKey </summary>
		/// <returns>A nsAString</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString GenerateRandomKey();
		
		/// <summary>Member GenerateRandomIV </summary>
		/// <returns>A nsAString</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString GenerateRandomIV();
		
		/// <summary>Member GenerateRandomBytes </summary>
		/// <param name='aByteCount'> </param>
		/// <returns>A nsAString</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString GenerateRandomBytes(System.UInt32  aByteCount);
		
		/// <summary>Member WrapSymmetricKey </summary>
		/// <param name='aSymmetricKey'> </param>
		/// <param name='aEncodedPublicKey'> </param>
		/// <returns>A nsAString</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString WrapSymmetricKey([MarshalAs(UnmanagedType.LPStruct)] nsAString  aSymmetricKey, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aEncodedPublicKey);
		
		/// <summary>Member UnwrapSymmetricKey </summary>
		/// <param name='aWrappedSymmetricKey'> </param>
		/// <param name='aWrappedPrivateKey'> </param>
		/// <param name='aPassphrase'> </param>
		/// <param name='aSalt'> </param>
		/// <param name='aIV'> </param>
		/// <returns>A nsAString</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString UnwrapSymmetricKey([MarshalAs(UnmanagedType.LPStruct)] nsAString  aWrappedSymmetricKey, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aWrappedPrivateKey, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aPassphrase, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aSalt, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aIV);
		
		/// <summary>Member RewrapPrivateKey </summary>
		/// <param name='aWrappedPrivateKey'> </param>
		/// <param name='aPassphrase'> </param>
		/// <param name='aSalt'> </param>
		/// <param name='aIV'> </param>
		/// <param name='aNewPassphrase'> </param>
		/// <returns>A nsAString</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString RewrapPrivateKey([MarshalAs(UnmanagedType.LPStruct)] nsAString  aWrappedPrivateKey, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aPassphrase, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aSalt, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aIV, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aNewPassphrase);
		
		/// <summary>Member VerifyPassphrase </summary>
		/// <param name='aWrappedPrivateKey'> </param>
		/// <param name='aPassphrase'> </param>
		/// <param name='aSalt'> </param>
		/// <param name='aIV'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool VerifyPassphrase([MarshalAs(UnmanagedType.LPStruct)] nsAString  aWrappedPrivateKey, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aPassphrase, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aSalt, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aIV);
	}
}
