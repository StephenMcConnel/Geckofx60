// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file IWeaveCrypto.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>IWeaveCrypto </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("f4463043-315e-41f3-b779-82e900e6fffa")]
	public interface IWeaveCrypto
	{
		
		/// <summary>
        /// One of the above constants. Used as the mechanism for encrypting bulk
        /// data and wrapping keys.
        ///
        /// Default is AES_256_CBC.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetAlgorithmAttribute();
		
		/// <summary>
        /// One of the above constants. Used as the mechanism for encrypting bulk
        /// data and wrapping keys.
        ///
        /// Default is AES_256_CBC.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetAlgorithmAttribute(System.UInt32  aAlgorithm);
		
		/// <summary>
        /// The size of the RSA key to create with generateKeypair().
        ///
        /// Default is 2048.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetKeypairBitsAttribute();
		
		/// <summary>
        /// The size of the RSA key to create with generateKeypair().
        ///
        /// Default is 2048.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetKeypairBitsAttribute(System.UInt32  aKeypairBits);
		
		/// <summary>
        /// Encrypt data using a symmetric key.
        /// The algorithm attribute specifies how the encryption is performed.
        ///
        /// @param   clearText
        /// The data to be encrypted (not base64 encoded).
        /// @param   symmetricKey
        /// A base64-encoded symmetric key (eg, one from generateRandomKey).
        /// @param   iv
        /// A base64-encoded initialization vector
        /// @returns Encrypted data, base64 encoded
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString Encrypt([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String  clearText, [MarshalAs(UnmanagedType.LPStruct)] nsAString  symmetricKey, [MarshalAs(UnmanagedType.LPStruct)] nsAString  iv);
		
		/// <summary>
        /// Encrypt data using a symmetric key.
        /// The algorithm attribute specifies how the encryption is performed.
        ///
        /// @param   cipherText
        /// The base64-encoded data to be decrypted
        /// @param   symmetricKey
        /// A base64-encoded symmetric key (eg, one from unwrapSymmetricKey)
        /// @param   iv
        /// A base64-encoded initialization vector
        /// @returns Decrypted data (not base64-encoded)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAUTF8String Decrypt([MarshalAs(UnmanagedType.LPStruct)] nsAString  cipherText, [MarshalAs(UnmanagedType.LPStruct)] nsAString  symmetricKey, [MarshalAs(UnmanagedType.LPStruct)] nsAString  iv);
		
		/// <summary>
        /// Generate a RSA public/private keypair.
        ///
        /// @param aPassphrase
        /// User's passphrase. Used with PKCS#5 to generate a symmetric key
        /// for wrapping the private key.
        /// @param aSalt
        /// Salt for the user's passphrase.
        /// @param aIV
        /// Random IV, used when wrapping the private key.
        /// @param aEncodedPublicKey
        /// The public key, base-64 encoded.
        /// @param aWrappedPrivateKey
        /// The public key, encrypted with the user's passphrase, and base-64 encoded.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GenerateKeypair([MarshalAs(UnmanagedType.LPStruct)] nsAString  aPassphrase, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aSalt, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aIV, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aEncodedPublicKey, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aWrappedPrivateKey);
		
		/// <summary>
        /// Generate a random symmetric key.
        ///
        /// @returns The random key, base64 encoded
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString GenerateRandomKey();
		
		/// <summary>
        /// Generate a random IV.
        ///
        /// The IV will be sized for the algorithm specified in the algorithm
        /// attribute of IWeaveCrypto.
        ///
        /// @returns The random IV, base64 encoded
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString GenerateRandomIV();
		
		/// <summary>
        /// Generate random data.
        ///
        /// @param aByteCount
        /// The number of bytes of random data to generate.
        /// @returns The random bytes, base64-encoded
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString GenerateRandomBytes(System.UInt32  aByteCount);
		
		/// <summary>
        /// Encrypts a symmetric key with a user's public key.
        ///
        /// @param aSymmetricKey
        /// The base64 encoded string holding a symmetric key.
        /// @param aEncodedPublicKey
        /// The base64 encoded string holding a public key.
        /// @returns The wrapped symmetric key, base64 encoded
        ///
        /// For RSA, the unencoded public key is a PKCS#1 object.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString WrapSymmetricKey([MarshalAs(UnmanagedType.LPStruct)] nsAString  aSymmetricKey, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aEncodedPublicKey);
		
		/// <summary>
        /// Decrypts a symmetric key with a user's private key.
        ///
        /// @param aWrappedSymmetricKey
        /// The base64 encoded string holding an encrypted symmetric key.
        /// @param aWrappedPrivateKey
        /// The base64 encoded string holdering an encrypted private key.
        /// @param aPassphrase
        /// The passphrase to decrypt the private key.
        /// @param aSalt
        /// The salt for the passphrase.
        /// @param aIV
        /// The random IV used when unwrapping the private key.
        /// @returns The unwrapped symmetric key, base64 encoded
        ///
        /// For RSA, the unencoded, decrypted key is a PKCS#1 object.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString UnwrapSymmetricKey([MarshalAs(UnmanagedType.LPStruct)] nsAString  aWrappedSymmetricKey, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aWrappedPrivateKey, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aPassphrase, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aSalt, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aIV);
		
		/// <summary>
        /// Rewrap a private key with a new user passphrase.
        ///
        /// @param aWrappedPrivateKey
        /// The base64 encoded string holding an encrypted private key.
        /// @param aPassphrase
        /// The passphrase to decrypt the private key.
        /// @param aSalt
        /// The salt for the passphrase.
        /// @param aIV
        /// The random IV used when unwrapping the private key.
        /// @param aNewPassphrase
        /// The new passphrase to wrap the private key with.
        /// @returns The (re)wrapped private key, base64 encoded
        ///
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString RewrapPrivateKey([MarshalAs(UnmanagedType.LPStruct)] nsAString  aWrappedPrivateKey, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aPassphrase, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aSalt, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aIV, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aNewPassphrase);
		
		/// <summary>
        /// Verify a user's passphrase against a private key.
        ///
        /// @param aWrappedPrivateKey
        /// The base64 encoded string holding an encrypted private key.
        /// @param aPassphrase
        /// The passphrase to decrypt the private key.
        /// @param aSalt
        /// The salt for the passphrase.
        /// @param aIV
        /// The random IV used when unwrapping the private key.
        /// @returns Boolean true if the passphrase decrypted the key correctly.
        ///
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool VerifyPassphrase([MarshalAs(UnmanagedType.LPStruct)] nsAString  aWrappedPrivateKey, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aPassphrase, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aSalt, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aIV);
	}
}
