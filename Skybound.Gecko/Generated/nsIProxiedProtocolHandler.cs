// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIProxiedProtocolHandler.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIProxiedProtocolHandler.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIProxiedProtocolHandler </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0a24fed4-1dd2-11b2-a75c-9f8b9a8f9ba7")]
	public interface nsIProxiedProtocolHandler : nsIProtocolHandler
	{
		
		/// <summary>Member GetSchemeAttribute </summary>
		/// <param name='aScheme'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetSchemeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aScheme);
		
		/// <summary>Member GetDefaultPortAttribute </summary>
		/// <returns>A System.Int32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.Int32  GetDefaultPortAttribute();
		
		/// <summary>Member GetProtocolFlagsAttribute </summary>
		/// <returns>A System.UInt32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.UInt32  GetProtocolFlagsAttribute();
		
		/// <summary>Member NewURI </summary>
		/// <param name='aSpec'> </param>
		/// <param name='aOriginCharset'> </param>
		/// <param name='aBaseURI'> </param>
		/// <returns>A nsIURI</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIURI NewURI([MarshalAs(UnmanagedType.LPStruct)] nsAString  aSpec, [MarshalAs(UnmanagedType.LPStr)] System.String  aOriginCharset, [MarshalAs(UnmanagedType.Interface)] nsIURI  aBaseURI);
		
		/// <summary>Member NewChannel </summary>
		/// <param name='aURI'> </param>
		/// <returns>A nsIChannel</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIChannel NewChannel([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI);
		
		/// <summary>Member AllowPort </summary>
		/// <param name='port'> </param>
		/// <param name='scheme'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool AllowPort(System.Int32  port, [MarshalAs(UnmanagedType.LPStr)] System.String  scheme);
		
		/// <summary>Member NewProxiedChannel </summary>
		/// <param name='uri'> </param>
		/// <param name='proxyInfo'> </param>
		/// <returns>A nsIChannel</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIChannel NewProxiedChannel([MarshalAs(UnmanagedType.Interface)] nsIURI  uri, [MarshalAs(UnmanagedType.Interface)] nsIProxyInfo  proxyInfo);
	}
}
