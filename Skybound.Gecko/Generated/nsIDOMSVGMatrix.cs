// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIDOMSVGMatrix.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIDOMSVGMatrix.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIDOMSVGMatrix </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ec2da3ef-5a99-49ed-aaef-b5af916c14ac")]
	public interface nsIDOMSVGMatrix
	{
		
		/// <summary>Member GetAAttribute </summary>
		/// <returns>A System.Double</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetAAttribute();
		
		/// <summary>Member SetAAttribute </summary>
		/// <param name='aA'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetAAttribute(double aA);
		
		/// <summary>Member GetBAttribute </summary>
		/// <returns>A System.Double</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetBAttribute();
		
		/// <summary>Member SetBAttribute </summary>
		/// <param name='aB'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetBAttribute(double aB);
		
		/// <summary>Member GetCAttribute </summary>
		/// <returns>A System.Double</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetCAttribute();
		
		/// <summary>Member SetCAttribute </summary>
		/// <param name='aC'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCAttribute(double aC);
		
		/// <summary>Member GetDAttribute </summary>
		/// <returns>A System.Double</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetDAttribute();
		
		/// <summary>Member SetDAttribute </summary>
		/// <param name='aD'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDAttribute(double aD);
		
		/// <summary>Member GetEAttribute </summary>
		/// <returns>A System.Double</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetEAttribute();
		
		/// <summary>Member SetEAttribute </summary>
		/// <param name='aE'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetEAttribute(double aE);
		
		/// <summary>Member GetFAttribute </summary>
		/// <returns>A System.Double</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetFAttribute();
		
		/// <summary>Member SetFAttribute </summary>
		/// <param name='aF'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetFAttribute(double aF);
		
		/// <summary>Member Multiply </summary>
		/// <param name='secondMatrix'> </param>
		/// <returns>A nsIDOMSVGMatrix</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMSVGMatrix Multiply([MarshalAs(UnmanagedType.Interface)] nsIDOMSVGMatrix  secondMatrix);
		
		/// <summary>Member Inverse </summary>
		/// <returns>A nsIDOMSVGMatrix</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMSVGMatrix Inverse();
		
		/// <summary>Member Translate </summary>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <returns>A nsIDOMSVGMatrix</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMSVGMatrix Translate(double x, double y);
		
		/// <summary>Member Scale </summary>
		/// <param name='scaleFactor'> </param>
		/// <returns>A nsIDOMSVGMatrix</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMSVGMatrix Scale(double scaleFactor);
		
		/// <summary>Member ScaleNonUniform </summary>
		/// <param name='scaleFactorX'> </param>
		/// <param name='scaleFactorY'> </param>
		/// <returns>A nsIDOMSVGMatrix</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMSVGMatrix ScaleNonUniform(double scaleFactorX, double scaleFactorY);
		
		/// <summary>Member Rotate </summary>
		/// <param name='angle'> </param>
		/// <returns>A nsIDOMSVGMatrix</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMSVGMatrix Rotate(double angle);
		
		/// <summary>Member RotateFromVector </summary>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <returns>A nsIDOMSVGMatrix</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMSVGMatrix RotateFromVector(double x, double y);
		
		/// <summary>Member FlipX </summary>
		/// <returns>A nsIDOMSVGMatrix</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMSVGMatrix FlipX();
		
		/// <summary>Member FlipY </summary>
		/// <returns>A nsIDOMSVGMatrix</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMSVGMatrix FlipY();
		
		/// <summary>Member SkewX </summary>
		/// <param name='angle'> </param>
		/// <returns>A nsIDOMSVGMatrix</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMSVGMatrix SkewX(double angle);
		
		/// <summary>Member SkewY </summary>
		/// <param name='angle'> </param>
		/// <returns>A nsIDOMSVGMatrix</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMSVGMatrix SkewY(double angle);
	}
}
