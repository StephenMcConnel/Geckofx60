// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file xpcIJSModuleLoader.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>xpcIJSModuleLoader </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("3f945a8e-58ca-47ba-a789-82d022e837fd")]
	public interface xpcIJSModuleLoader
	{
		
		/// <summary>
        ///, [optional] in JSObject targetObj </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Import([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String aResourceURI);
		
		/// <summary>
        /// Imports the JS module at aResourceURI to the JS object
        /// 'targetObj' (if != null) as described for importModule() and
        /// returns the module's global object.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr ImportInto([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String aResourceURI, System.IntPtr targetObj, System.IntPtr cc);
		
		/// <summary>
        /// Unloads the JS module at aResourceURI. Existing references to the module
        /// will continue to work but any subsequent import of the module will
        /// reload it and give new reference. If the JS module hasn't yet been imported
        /// then this method will do nothing.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Unload([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String aResourceURI);
	}
}
