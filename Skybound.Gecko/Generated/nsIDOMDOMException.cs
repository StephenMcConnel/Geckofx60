// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIDOMDOMException.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>
    /// In general, DOM methods return specific error values in ordinary
    /// processing situations, such as out-of-bound errors.
    /// However, DOM operations can raise exceptions in "exceptional"
    /// circumstances, i.e., when an operation is impossible to perform
    /// (either for logical reasons, because data is lost, or because the
    /// implementation has become unstable)
    ///
    /// For more information on this interface please see
    /// http://www.w3.org/TR/DOM-Level-3-Core/
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("a6cf910a-15b3-11d2-932e-00805f8add32")]
	public interface nsIDOMDOMException
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetCodeAttribute();
	}
	
	/// <summary>nsIDOMDOMExceptionConsts </summary>
	public class nsIDOMDOMExceptionConsts
	{
		
		// <summary>
        // In general, DOM methods return specific error values in ordinary
        // processing situations, such as out-of-bound errors.
        // However, DOM operations can raise exceptions in "exceptional"
        // circumstances, i.e., when an operation is impossible to perform
        // (either for logical reasons, because data is lost, or because the
        // implementation has become unstable)
        //
        // For more information on this interface please see
        // http://www.w3.org/TR/DOM-Level-3-Core/
        // </summary>
		public const ulong INDEX_SIZE_ERR = 1;
		
		// 
		public const ulong DOMSTRING_SIZE_ERR = 2;
		
		// 
		public const ulong HIERARCHY_REQUEST_ERR = 3;
		
		// 
		public const ulong WRONG_DOCUMENT_ERR = 4;
		
		// 
		public const ulong INVALID_CHARACTER_ERR = 5;
		
		// 
		public const ulong NO_DATA_ALLOWED_ERR = 6;
		
		// 
		public const ulong NO_MODIFICATION_ALLOWED_ERR = 7;
		
		// 
		public const ulong NOT_FOUND_ERR = 8;
		
		// 
		public const ulong NOT_SUPPORTED_ERR = 9;
		
		// 
		public const ulong INUSE_ATTRIBUTE_ERR = 10;
		
		// <summary>
        // Introduced in DOM Level 2:
        // </summary>
		public const ulong INVALID_STATE_ERR = 11;
		
		// <summary>
        // Introduced in DOM Level 2:
        // </summary>
		public const ulong SYNTAX_ERR = 12;
		
		// <summary>
        // Introduced in DOM Level 2:
        // </summary>
		public const ulong INVALID_MODIFICATION_ERR = 13;
		
		// <summary>
        // Introduced in DOM Level 2:
        // </summary>
		public const ulong NAMESPACE_ERR = 14;
		
		// <summary>
        // Introduced in DOM Level 2:
        // </summary>
		public const ulong INVALID_ACCESS_ERR = 15;
		
		// <summary>
        // Introduced in DOM Level 3:
        // </summary>
		public const ulong VALIDATION_ERR = 16;
		
		// <summary>
        // Introduced in DOM Level 3:
        // </summary>
		public const ulong TYPE_MISMATCH_ERR = 17;
		
		// 
		public const ulong DATA_CLONE_ERR = 25;
	}
}
