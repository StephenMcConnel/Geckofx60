// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIWebBrowserChrome3.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIWebBrowserChrome3.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIWebBrowserChrome3 </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("7f2aa813-b250-4e46-afeb-97b1e91bc9a5")]
	public interface nsIWebBrowserChrome3 : nsIWebBrowserChrome2
	{
		
		/// <summary>Member SetStatus </summary>
		/// <param name='statusType'> </param>
		/// <param name='status'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetStatus(System.UInt32  statusType, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Skybound.Gecko.XpCom.WStringMarshaler")] string status);
		
		/// <summary>Member GetWebBrowserAttribute </summary>
		/// <returns>A nsIWebBrowser </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIWebBrowser  GetWebBrowserAttribute();
		
		/// <summary>Member SetWebBrowserAttribute </summary>
		/// <param name='aWebBrowser'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetWebBrowserAttribute([MarshalAs(UnmanagedType.Interface)] nsIWebBrowser  aWebBrowser);
		
		/// <summary>Member GetChromeFlagsAttribute </summary>
		/// <returns>A System.UInt32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.UInt32  GetChromeFlagsAttribute();
		
		/// <summary>Member SetChromeFlagsAttribute </summary>
		/// <param name='aChromeFlags'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetChromeFlagsAttribute(System.UInt32  aChromeFlags);
		
		/// <summary>Member DestroyBrowserWindow </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void DestroyBrowserWindow();
		
		/// <summary>Member SizeBrowserTo </summary>
		/// <param name='aCX'> </param>
		/// <param name='aCY'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SizeBrowserTo(System.Int32  aCX, System.Int32  aCY);
		
		/// <summary>Member ShowAsModal </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void ShowAsModal();
		
		/// <summary>Member IsWindowModal </summary>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool IsWindowModal();
		
		/// <summary>Member ExitModalEventLoop </summary>
		/// <param name='aStatus'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void ExitModalEventLoop(System.Int32  aStatus);
		
		/// <summary>Member SetStatusWithContext </summary>
		/// <param name='statusType'> </param>
		/// <param name='statusText'> </param>
		/// <param name='statusContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetStatusWithContext(System.UInt32  statusType, [MarshalAs(UnmanagedType.LPStruct)] nsAString statusText, [MarshalAs(UnmanagedType.Interface)] nsISupports  statusContext);
		
		/// <summary>Member OnBeforeLinkTraversal </summary>
		/// <param name='originalTarget'> </param>
		/// <param name='linkURI'> </param>
		/// <param name='linkNode'> </param>
		/// <param name='isAppTab'> </param>
		/// <returns>A nsAString</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString OnBeforeLinkTraversal([MarshalAs(UnmanagedType.LPStruct)] nsAString originalTarget, [MarshalAs(UnmanagedType.Interface)] nsIURI  linkURI, [MarshalAs(UnmanagedType.Interface)] nsIDOMNode  linkNode, System.Boolean  isAppTab);
	}
}
