// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsITreeSelection.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsITreeSelection.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsITreeSelection </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ab6fe746-300b-4ab4-abb9-1c0e3977874c")]
	public interface nsITreeSelection
	{
		
		/// <summary>Member GetTreeAttribute </summary>
		/// <returns>A nsITreeBoxObject </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsITreeBoxObject  GetTreeAttribute();
		
		/// <summary>Member SetTreeAttribute </summary>
		/// <param name='aTree'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetTreeAttribute([MarshalAs(UnmanagedType.Interface)] nsITreeBoxObject  aTree);
		
		/// <summary>Member GetSingleAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetSingleAttribute();
		
		/// <summary>Member GetCountAttribute </summary>
		/// <returns>A System.Int32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Int32  GetCountAttribute();
		
		/// <summary>Member IsSelected </summary>
		/// <param name='index'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsSelected(System.Int32  index);
		
		/// <summary>Member Select </summary>
		/// <param name='index'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Select(System.Int32  index);
		
		/// <summary>Member TimedSelect </summary>
		/// <param name='index'> </param>
		/// <param name='delay'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void TimedSelect(System.Int32  index, System.Int32  delay);
		
		/// <summary>Member ToggleSelect </summary>
		/// <param name='index'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ToggleSelect(System.Int32  index);
		
		/// <summary>Member RangedSelect </summary>
		/// <param name='startIndex'> </param>
		/// <param name='endIndex'> </param>
		/// <param name='augment'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RangedSelect(System.Int32  startIndex, System.Int32  endIndex, System.Boolean  augment);
		
		/// <summary>Member ClearRange </summary>
		/// <param name='startIndex'> </param>
		/// <param name='endIndex'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ClearRange(System.Int32  startIndex, System.Int32  endIndex);
		
		/// <summary>Member ClearSelection </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ClearSelection();
		
		/// <summary>Member InvertSelection </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InvertSelection();
		
		/// <summary>Member SelectAll </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SelectAll();
		
		/// <summary>Member GetRangeCount </summary>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetRangeCount();
		
		/// <summary>Member GetRangeAt </summary>
		/// <param name='i'> </param>
		/// <param name='min'> </param>
		/// <param name='max'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetRangeAt(System.Int32  i, out System.Int32  min, out System.Int32  max);
		
		/// <summary>Member InvalidateSelection </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InvalidateSelection();
		
		/// <summary>Member AdjustSelection </summary>
		/// <param name='index'> </param>
		/// <param name='count'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AdjustSelection(System.Int32  index, System.Int32  count);
		
		/// <summary>Member GetSelectEventsSuppressedAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetSelectEventsSuppressedAttribute();
		
		/// <summary>Member SetSelectEventsSuppressedAttribute </summary>
		/// <param name='aSelectEventsSuppressed'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetSelectEventsSuppressedAttribute(System.Boolean  aSelectEventsSuppressed);
		
		/// <summary>Member GetCurrentIndexAttribute </summary>
		/// <returns>A System.Int32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Int32  GetCurrentIndexAttribute();
		
		/// <summary>Member SetCurrentIndexAttribute </summary>
		/// <param name='aCurrentIndex'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCurrentIndexAttribute(System.Int32  aCurrentIndex);
		
		/// <summary>Member GetCurrentColumnAttribute </summary>
		/// <returns>A nsITreeColumn </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsITreeColumn  GetCurrentColumnAttribute();
		
		/// <summary>Member SetCurrentColumnAttribute </summary>
		/// <param name='aCurrentColumn'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCurrentColumnAttribute([MarshalAs(UnmanagedType.Interface)] nsITreeColumn  aCurrentColumn);
		
		/// <summary>Member GetShiftSelectPivotAttribute </summary>
		/// <returns>A System.Int32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Int32  GetShiftSelectPivotAttribute();
	}
	
	/// <summary>nsINativeTreeSelection </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("1bd59678-5cb3-4316-b246-31a91b19aabe")]
	public interface nsINativeTreeSelection : nsITreeSelection
	{
		
		/// <summary>Member GetTreeAttribute </summary>
		/// <returns>A nsITreeBoxObject </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsITreeBoxObject  GetTreeAttribute();
		
		/// <summary>Member SetTreeAttribute </summary>
		/// <param name='aTree'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetTreeAttribute([MarshalAs(UnmanagedType.Interface)] nsITreeBoxObject  aTree);
		
		/// <summary>Member GetSingleAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.Boolean  GetSingleAttribute();
		
		/// <summary>Member GetCountAttribute </summary>
		/// <returns>A System.Int32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.Int32  GetCountAttribute();
		
		/// <summary>Member IsSelected </summary>
		/// <param name='index'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool IsSelected(System.Int32  index);
		
		/// <summary>Member Select </summary>
		/// <param name='index'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Select(System.Int32  index);
		
		/// <summary>Member TimedSelect </summary>
		/// <param name='index'> </param>
		/// <param name='delay'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void TimedSelect(System.Int32  index, System.Int32  delay);
		
		/// <summary>Member ToggleSelect </summary>
		/// <param name='index'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void ToggleSelect(System.Int32  index);
		
		/// <summary>Member RangedSelect </summary>
		/// <param name='startIndex'> </param>
		/// <param name='endIndex'> </param>
		/// <param name='augment'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void RangedSelect(System.Int32  startIndex, System.Int32  endIndex, System.Boolean  augment);
		
		/// <summary>Member ClearRange </summary>
		/// <param name='startIndex'> </param>
		/// <param name='endIndex'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void ClearRange(System.Int32  startIndex, System.Int32  endIndex);
		
		/// <summary>Member ClearSelection </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void ClearSelection();
		
		/// <summary>Member InvertSelection </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void InvertSelection();
		
		/// <summary>Member SelectAll </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SelectAll();
		
		/// <summary>Member GetRangeCount </summary>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new int GetRangeCount();
		
		/// <summary>Member GetRangeAt </summary>
		/// <param name='i'> </param>
		/// <param name='min'> </param>
		/// <param name='max'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetRangeAt(System.Int32  i, out System.Int32  min, out System.Int32  max);
		
		/// <summary>Member InvalidateSelection </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void InvalidateSelection();
		
		/// <summary>Member AdjustSelection </summary>
		/// <param name='index'> </param>
		/// <param name='count'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void AdjustSelection(System.Int32  index, System.Int32  count);
		
		/// <summary>Member GetSelectEventsSuppressedAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.Boolean  GetSelectEventsSuppressedAttribute();
		
		/// <summary>Member SetSelectEventsSuppressedAttribute </summary>
		/// <param name='aSelectEventsSuppressed'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetSelectEventsSuppressedAttribute(System.Boolean  aSelectEventsSuppressed);
		
		/// <summary>Member GetCurrentIndexAttribute </summary>
		/// <returns>A System.Int32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.Int32  GetCurrentIndexAttribute();
		
		/// <summary>Member SetCurrentIndexAttribute </summary>
		/// <param name='aCurrentIndex'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetCurrentIndexAttribute(System.Int32  aCurrentIndex);
		
		/// <summary>Member GetCurrentColumnAttribute </summary>
		/// <returns>A nsITreeColumn </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsITreeColumn  GetCurrentColumnAttribute();
		
		/// <summary>Member SetCurrentColumnAttribute </summary>
		/// <param name='aCurrentColumn'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetCurrentColumnAttribute([MarshalAs(UnmanagedType.Interface)] nsITreeColumn  aCurrentColumn);
		
		/// <summary>Member GetShiftSelectPivotAttribute </summary>
		/// <returns>A System.Int32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.Int32  GetShiftSelectPivotAttribute();
		
		/// <summary>Member EnsureNative </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EnsureNative();
	}
}
