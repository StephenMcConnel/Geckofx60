// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIControllers.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIControllers.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIControllers </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("f36e3ec1-9197-4ad8-8d4c-d3b1927fd6df")]
	public interface nsIControllers
	{
		
		/// <summary>Member GetControllerForCommand </summary>
		/// <param name='command'> </param>
		/// <returns>A nsIController</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIController GetControllerForCommand([MarshalAs(UnmanagedType.LPStr)] System.String  command);
		
		/// <summary>Member InsertControllerAt </summary>
		/// <param name='index'> </param>
		/// <param name='controller'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InsertControllerAt(System.UInt32  index, [MarshalAs(UnmanagedType.Interface)] nsIController  controller);
		
		/// <summary>Member RemoveControllerAt </summary>
		/// <param name='index'> </param>
		/// <returns>A nsIController</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIController RemoveControllerAt(System.UInt32  index);
		
		/// <summary>Member GetControllerAt </summary>
		/// <param name='index'> </param>
		/// <returns>A nsIController</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIController GetControllerAt(System.UInt32  index);
		
		/// <summary>Member AppendController </summary>
		/// <param name='controller'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AppendController([MarshalAs(UnmanagedType.Interface)] nsIController  controller);
		
		/// <summary>Member RemoveController </summary>
		/// <param name='controller'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveController([MarshalAs(UnmanagedType.Interface)] nsIController  controller);
		
		/// <summary>Member GetControllerId </summary>
		/// <param name='controller'> </param>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetControllerId([MarshalAs(UnmanagedType.Interface)] nsIController  controller);
		
		/// <summary>Member GetControllerById </summary>
		/// <param name='controllerID'> </param>
		/// <returns>A nsIController</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIController GetControllerById(System.UInt32  controllerID);
		
		/// <summary>Member GetControllerCount </summary>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetControllerCount();
	}
}
