// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIScriptableRegion.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIScriptableRegion.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIScriptableRegion </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("4d179656-a5bd-42a6-a937-c81f820dcf2f")]
	public interface nsIScriptableRegion
	{
		
		/// <summary>Member Init </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Init();
		
		/// <summary>Member SetToRegion </summary>
		/// <param name='aRegion'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetToRegion([MarshalAs(UnmanagedType.Interface)] nsIScriptableRegion  aRegion);
		
		/// <summary>Member SetToRect </summary>
		/// <param name='aX'> </param>
		/// <param name='aY'> </param>
		/// <param name='aWidth'> </param>
		/// <param name='aHeight'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetToRect(System.Int32  aX, System.Int32  aY, System.Int32  aWidth, System.Int32  aHeight);
		
		/// <summary>Member IntersectRegion </summary>
		/// <param name='aRegion'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void IntersectRegion([MarshalAs(UnmanagedType.Interface)] nsIScriptableRegion  aRegion);
		
		/// <summary>Member IntersectRect </summary>
		/// <param name='aX'> </param>
		/// <param name='aY'> </param>
		/// <param name='aWidth'> </param>
		/// <param name='aHeight'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void IntersectRect(System.Int32  aX, System.Int32  aY, System.Int32  aWidth, System.Int32  aHeight);
		
		/// <summary>Member UnionRegion </summary>
		/// <param name='aRegion'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnionRegion([MarshalAs(UnmanagedType.Interface)] nsIScriptableRegion  aRegion);
		
		/// <summary>Member UnionRect </summary>
		/// <param name='aX'> </param>
		/// <param name='aY'> </param>
		/// <param name='aWidth'> </param>
		/// <param name='aHeight'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnionRect(System.Int32  aX, System.Int32  aY, System.Int32  aWidth, System.Int32  aHeight);
		
		/// <summary>Member SubtractRegion </summary>
		/// <param name='aRegion'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SubtractRegion([MarshalAs(UnmanagedType.Interface)] nsIScriptableRegion  aRegion);
		
		/// <summary>Member SubtractRect </summary>
		/// <param name='aX'> </param>
		/// <param name='aY'> </param>
		/// <param name='aWidth'> </param>
		/// <param name='aHeight'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SubtractRect(System.Int32  aX, System.Int32  aY, System.Int32  aWidth, System.Int32  aHeight);
		
		/// <summary>Member IsEmpty </summary>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsEmpty();
		
		/// <summary>Member IsEqualRegion </summary>
		/// <param name='aRegion'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsEqualRegion([MarshalAs(UnmanagedType.Interface)] nsIScriptableRegion  aRegion);
		
		/// <summary>Member GetBoundingBox </summary>
		/// <param name='aX'> </param>
		/// <param name='aY'> </param>
		/// <param name='aWidth'> </param>
		/// <param name='aHeight'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetBoundingBox(out System.Int32  aX, out System.Int32  aY, out System.Int32  aWidth, out System.Int32  aHeight);
		
		/// <summary>Member Offset </summary>
		/// <param name='aXOffset'> </param>
		/// <param name='aYOffset'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Offset(System.Int32  aXOffset, System.Int32  aYOffset);
		
		/// <summary>Member GetRects </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetRects();
		
		/// <summary>Member ContainsRect </summary>
		/// <param name='aX'> </param>
		/// <param name='aY'> </param>
		/// <param name='aWidth'> </param>
		/// <param name='aHeight'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool ContainsRect(System.Int32  aX, System.Int32  aY, System.Int32  aWidth, System.Int32  aHeight);
		
		/// <summary>Member GetRegionAttribute </summary>
		/// <returns>A System.IntPtr</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr GetRegionAttribute();
	}
}
