// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIExternalHelperAppService.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIExternalHelperAppService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIExternalHelperAppService </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("9e456297-ba3e-42b1-92bd-b7db014268cb")]
	public interface nsIExternalHelperAppService
	{
		
		/// <summary>Member DoContent </summary>
		/// <param name='aMimeContentType'> </param>
		/// <param name='aRequest'> </param>
		/// <param name='aWindowContext'> </param>
		/// <param name='aForceSave'> </param>
		/// <returns>A nsIStreamListener</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStreamListener DoContent([MarshalAs(UnmanagedType.LPStruct)] nsAString  aMimeContentType, [MarshalAs(UnmanagedType.Interface)] nsIRequest  aRequest, [MarshalAs(UnmanagedType.Interface)] nsIInterfaceRequestor  aWindowContext, System.Boolean  aForceSave);
		
		/// <summary>Member ApplyDecodingForExtension </summary>
		/// <param name='aExtension'> </param>
		/// <param name='aEncodingType'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool ApplyDecodingForExtension([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String  aExtension, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aEncodingType);
	}
	
	/// <summary>nsPIExternalAppLauncher </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("d0b5d7d3-9565-403d-9fb5-e5089c4567c6")]
	public interface nsPIExternalAppLauncher
	{
		
		/// <summary>Member DeleteTemporaryFileOnExit </summary>
		/// <param name='aTemporaryFile'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeleteTemporaryFileOnExit([MarshalAs(UnmanagedType.Interface)] nsIFile  aTemporaryFile);
	}
	
	/// <summary>nsIHelperAppLauncher </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("d9a19faf-497b-408c-b995-777d956b72c0")]
	public interface nsIHelperAppLauncher : nsICancelable
	{
		
		/// <summary>Member Cancel </summary>
		/// <param name='aReason'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Cancel(System.Int32  aReason);
		
		/// <summary>Member GetMIMEInfoAttribute </summary>
		/// <returns>A nsIMIMEInfo </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIMIMEInfo  GetMIMEInfoAttribute();
		
		/// <summary>Member GetSourceAttribute </summary>
		/// <returns>A nsIURI </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIURI  GetSourceAttribute();
		
		/// <summary>Member GetSuggestedFileNameAttribute </summary>
		/// <param name='aSuggestedFileName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetSuggestedFileNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aSuggestedFileName);
		
		/// <summary>Member SaveToDisk </summary>
		/// <param name='aNewFileLocation'> </param>
		/// <param name='aRememberThisPreference'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SaveToDisk([MarshalAs(UnmanagedType.Interface)] nsIFile  aNewFileLocation, System.Boolean  aRememberThisPreference);
		
		/// <summary>Member LaunchWithApplication </summary>
		/// <param name='aApplication'> </param>
		/// <param name='aRememberThisPreference'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LaunchWithApplication([MarshalAs(UnmanagedType.Interface)] nsIFile  aApplication, System.Boolean  aRememberThisPreference);
		
		/// <summary>Member SetWebProgressListener </summary>
		/// <param name='aWebProgressListener'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetWebProgressListener([MarshalAs(UnmanagedType.Interface)] nsIWebProgressListener2  aWebProgressListener);
		
		/// <summary>Member CloseProgressWindow </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CloseProgressWindow();
		
		/// <summary>Member GetTargetFileAttribute </summary>
		/// <returns>A nsIFile </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIFile  GetTargetFileAttribute();
		
		/// <summary>Member GetTargetFileIsExecutableAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetTargetFileIsExecutableAttribute();
		
		/// <summary>Member GetTimeDownloadStartedAttribute </summary>
		/// <returns>A System.UInt32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetTimeDownloadStartedAttribute();
		
		/// <summary>Member GetContentLengthAttribute </summary>
		/// <returns>A System.Int64 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Int64  GetContentLengthAttribute();
	}
}
