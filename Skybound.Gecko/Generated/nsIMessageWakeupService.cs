// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIMessageWakeupService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>
    /// This service lets other components be woken up when particular
    /// messageManager messages arrive. By using this wakeup service,
    /// those components do not need to be started until they are
    /// needed.
    ///
    /// The parentprocessmessagemanager is used for this, so messages
    /// send from childprocessmessagemanagers will be heard.
    ///
    /// Components can request wakeups using the .manifest files, or
    /// by someone else calling requestWakeup. For .manifest files,
    /// the line should look something like
    ///
    /// category wakeup-request nsComponent @mozilla.org/myservice;1,
    /// nsIMyInterface,getService,myMessage1,myMessage2[,..]
    ///
    /// Currently we require services to expose wrappedJSObject, but
    /// that will be cleaned up in bug 593407, at which point the
    /// service that will be woken up must implement
    /// nsIFrameMessageListener.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("968e31b6-b859-42f3-8140-014378fe1783")]
	public interface nsIMessageWakeupService
	{
		
		/// <summary>
        /// Requests that the wakeup service wake us up when a particular
        /// message arrives. At that time the service will be woken up
        /// and subscribed to receive further messages of that name as
        /// well.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool RequestWakeup([MarshalAs(UnmanagedType.LPStruct)] nsAString aMessageName, [MarshalAs(UnmanagedType.LPStruct)] nsAString aCid, [MarshalAs(UnmanagedType.LPStruct)] nsAString aIid, [MarshalAs(UnmanagedType.LPStruct)] nsAString aMethod);
	}
}
