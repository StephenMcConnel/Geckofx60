// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIDOMCanvasRenderingContext2D.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIDOMCanvasRenderingContext2D.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIDOMCanvasGradient </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("bbb20a59-524e-4662-981e-5e142814b20c")]
	public interface nsIDOMCanvasGradient
	{
		
		/// <summary>Member AddColorStop </summary>
		/// <param name='offset'> </param>
		/// <param name='color'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddColorStop(double offset, [MarshalAs(UnmanagedType.LPStruct)] nsAString color);
	}
	
	/// <summary>nsIDOMCanvasPattern </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("21dea65c-5c08-4eb1-ac82-81fe95be77b8")]
	public interface nsIDOMCanvasPattern
	{
	}
	
	/// <summary>nsIDOMTextMetrics </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("2d01715c-ec7d-424a-ab85-e0fd70c8665c")]
	public interface nsIDOMTextMetrics
	{
		
		/// <summary>Member GetWidthAttribute </summary>
		/// <returns>A System.Double</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetWidthAttribute();
	}
	
	/// <summary>nsIDOMCanvasRenderingContext2D </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("408be1b9-4d75-4873-b50b-9b651626e41d")]
	public interface nsIDOMCanvasRenderingContext2D
	{
		
		/// <summary>Member GetCanvasAttribute </summary>
		/// <returns>A nsIDOMHTMLCanvasElement </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMHTMLCanvasElement  GetCanvasAttribute();
		
		/// <summary>Member Save </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Save();
		
		/// <summary>Member Restore </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Restore();
		
		/// <summary>Member Scale </summary>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Scale(double x, double y);
		
		/// <summary>Member Rotate </summary>
		/// <param name='angle'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Rotate(double angle);
		
		/// <summary>Member Translate </summary>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Translate(double x, double y);
		
		/// <summary>Member Transform </summary>
		/// <param name='m11'> </param>
		/// <param name='m12'> </param>
		/// <param name='m21'> </param>
		/// <param name='m22'> </param>
		/// <param name='dx'> </param>
		/// <param name='dy'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Transform(double m11, double m12, double m21, double m22, double dx, double dy);
		
		/// <summary>Member SetTransform </summary>
		/// <param name='m11'> </param>
		/// <param name='m12'> </param>
		/// <param name='m21'> </param>
		/// <param name='m22'> </param>
		/// <param name='dx'> </param>
		/// <param name='dy'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetTransform(double m11, double m12, double m21, double m22, double dx, double dy);
		
		/// <summary>Member GetGlobalAlphaAttribute </summary>
		/// <returns>A System.Double</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetGlobalAlphaAttribute();
		
		/// <summary>Member SetGlobalAlphaAttribute </summary>
		/// <param name='aGlobalAlpha'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetGlobalAlphaAttribute(double aGlobalAlpha);
		
		/// <summary>Member GetGlobalCompositeOperationAttribute </summary>
		/// <param name='aGlobalCompositeOperation'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetGlobalCompositeOperationAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aGlobalCompositeOperation);
		
		/// <summary>Member SetGlobalCompositeOperationAttribute </summary>
		/// <param name='aGlobalCompositeOperation'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetGlobalCompositeOperationAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aGlobalCompositeOperation);
		
		/// <summary>Member GetStrokeStyleAttribute </summary>
		/// <returns>A nsIVariant </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIVariant  GetStrokeStyleAttribute();
		
		/// <summary>Member SetStrokeStyleAttribute </summary>
		/// <param name='aStrokeStyle'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetStrokeStyleAttribute([MarshalAs(UnmanagedType.Interface)] nsIVariant  aStrokeStyle);
		
		/// <summary>Member GetFillStyleAttribute </summary>
		/// <returns>A nsIVariant </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIVariant  GetFillStyleAttribute();
		
		/// <summary>Member SetFillStyleAttribute </summary>
		/// <param name='aFillStyle'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetFillStyleAttribute([MarshalAs(UnmanagedType.Interface)] nsIVariant  aFillStyle);
		
		/// <summary>Member SetStrokeStyle_multi </summary>
		/// <param name='str'> </param>
		/// <param name='iface'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetStrokeStyle_multi([MarshalAs(UnmanagedType.LPStruct)] nsAString str, [MarshalAs(UnmanagedType.Interface)] nsISupports  iface);
		
		/// <summary>Member GetStrokeStyle_multi </summary>
		/// <param name='str'> </param>
		/// <param name='iface'> </param>
		/// <param name='type'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetStrokeStyle_multi([MarshalAs(UnmanagedType.LPStruct)] nsAString str, [MarshalAs(UnmanagedType.Interface)] out nsISupports  iface, out System.Int32  type);
		
		/// <summary>Member SetFillStyle_multi </summary>
		/// <param name='str'> </param>
		/// <param name='iface'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetFillStyle_multi([MarshalAs(UnmanagedType.LPStruct)] nsAString str, [MarshalAs(UnmanagedType.Interface)] nsISupports  iface);
		
		/// <summary>Member GetFillStyle_multi </summary>
		/// <param name='str'> </param>
		/// <param name='iface'> </param>
		/// <param name='type'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetFillStyle_multi([MarshalAs(UnmanagedType.LPStruct)] nsAString str, [MarshalAs(UnmanagedType.Interface)] out nsISupports  iface, out System.Int32  type);
		
		/// <summary>Member CreateLinearGradient </summary>
		/// <param name='x0'> </param>
		/// <param name='y0'> </param>
		/// <param name='x1'> </param>
		/// <param name='y1'> </param>
		/// <returns>A nsIDOMCanvasGradient</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMCanvasGradient CreateLinearGradient(double x0, double y0, double x1, double y1);
		
		/// <summary>Member CreateRadialGradient </summary>
		/// <param name='x0'> </param>
		/// <param name='y0'> </param>
		/// <param name='r0'> </param>
		/// <param name='x1'> </param>
		/// <param name='y1'> </param>
		/// <param name='r1'> </param>
		/// <returns>A nsIDOMCanvasGradient</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMCanvasGradient CreateRadialGradient(double x0, double y0, double r0, double x1, double y1, double r1);
		
		/// <summary>Member CreatePattern </summary>
		/// <param name='image'> </param>
		/// <param name='repetition'> </param>
		/// <returns>A nsIDOMCanvasPattern</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMCanvasPattern CreatePattern([MarshalAs(UnmanagedType.Interface)] nsIDOMHTMLElement  image, [MarshalAs(UnmanagedType.LPStruct)] nsAString repetition);
		
		/// <summary>Member GetLineWidthAttribute </summary>
		/// <returns>A System.Double</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetLineWidthAttribute();
		
		/// <summary>Member SetLineWidthAttribute </summary>
		/// <param name='aLineWidth'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetLineWidthAttribute(double aLineWidth);
		
		/// <summary>Member GetLineCapAttribute </summary>
		/// <param name='aLineCap'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetLineCapAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aLineCap);
		
		/// <summary>Member SetLineCapAttribute </summary>
		/// <param name='aLineCap'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetLineCapAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aLineCap);
		
		/// <summary>Member GetLineJoinAttribute </summary>
		/// <param name='aLineJoin'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetLineJoinAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aLineJoin);
		
		/// <summary>Member SetLineJoinAttribute </summary>
		/// <param name='aLineJoin'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetLineJoinAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aLineJoin);
		
		/// <summary>Member GetMiterLimitAttribute </summary>
		/// <returns>A System.Double</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetMiterLimitAttribute();
		
		/// <summary>Member SetMiterLimitAttribute </summary>
		/// <param name='aMiterLimit'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetMiterLimitAttribute(double aMiterLimit);
		
		/// <summary>Member GetShadowOffsetXAttribute </summary>
		/// <returns>A System.Double</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetShadowOffsetXAttribute();
		
		/// <summary>Member SetShadowOffsetXAttribute </summary>
		/// <param name='aShadowOffsetX'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetShadowOffsetXAttribute(double aShadowOffsetX);
		
		/// <summary>Member GetShadowOffsetYAttribute </summary>
		/// <returns>A System.Double</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetShadowOffsetYAttribute();
		
		/// <summary>Member SetShadowOffsetYAttribute </summary>
		/// <param name='aShadowOffsetY'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetShadowOffsetYAttribute(double aShadowOffsetY);
		
		/// <summary>Member GetShadowBlurAttribute </summary>
		/// <returns>A System.Double</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetShadowBlurAttribute();
		
		/// <summary>Member SetShadowBlurAttribute </summary>
		/// <param name='aShadowBlur'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetShadowBlurAttribute(double aShadowBlur);
		
		/// <summary>Member GetShadowColorAttribute </summary>
		/// <param name='aShadowColor'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetShadowColorAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aShadowColor);
		
		/// <summary>Member SetShadowColorAttribute </summary>
		/// <param name='aShadowColor'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetShadowColorAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aShadowColor);
		
		/// <summary>Member ClearRect </summary>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='w'> </param>
		/// <param name='h'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ClearRect(double x, double y, double w, double h);
		
		/// <summary>Member FillRect </summary>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='w'> </param>
		/// <param name='h'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FillRect(double x, double y, double w, double h);
		
		/// <summary>Member StrokeRect </summary>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='w'> </param>
		/// <param name='h'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StrokeRect(double x, double y, double w, double h);
		
		/// <summary>Member BeginPath </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BeginPath();
		
		/// <summary>Member ClosePath </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ClosePath();
		
		/// <summary>Member MoveTo </summary>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MoveTo(double x, double y);
		
		/// <summary>Member LineTo </summary>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LineTo(double x, double y);
		
		/// <summary>Member QuadraticCurveTo </summary>
		/// <param name='cpx'> </param>
		/// <param name='cpy'> </param>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void QuadraticCurveTo(double cpx, double cpy, double x, double y);
		
		/// <summary>Member BezierCurveTo </summary>
		/// <param name='cp1x'> </param>
		/// <param name='cp1y'> </param>
		/// <param name='cp2x'> </param>
		/// <param name='cp2y'> </param>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BezierCurveTo(double cp1x, double cp1y, double cp2x, double cp2y, double x, double y);
		
		/// <summary>Member ArcTo </summary>
		/// <param name='x1'> </param>
		/// <param name='y1'> </param>
		/// <param name='x2'> </param>
		/// <param name='y2'> </param>
		/// <param name='radius'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ArcTo(double x1, double y1, double x2, double y2, double radius);
		
		/// <summary>Member Arc </summary>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='r'> </param>
		/// <param name='startAngle'> </param>
		/// <param name='endAngle'> </param>
		/// <param name='anticlockwise'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Arc(double x, double y, double r, double startAngle, double endAngle, System.Boolean  anticlockwise);
		
		/// <summary>Member Rect </summary>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='w'> </param>
		/// <param name='h'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Rect(double x, double y, double w, double h);
		
		/// <summary>Member Fill </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Fill();
		
		/// <summary>Member Stroke </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Stroke();
		
		/// <summary>Member Clip </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Clip();
		
		/// <summary>Member GetFontAttribute </summary>
		/// <param name='aFont'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetFontAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aFont);
		
		/// <summary>Member SetFontAttribute </summary>
		/// <param name='aFont'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetFontAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aFont);
		
		/// <summary>Member GetTextAlignAttribute </summary>
		/// <param name='aTextAlign'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetTextAlignAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aTextAlign);
		
		/// <summary>Member SetTextAlignAttribute </summary>
		/// <param name='aTextAlign'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetTextAlignAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aTextAlign);
		
		/// <summary>Member GetTextBaselineAttribute </summary>
		/// <param name='aTextBaseline'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetTextBaselineAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aTextBaseline);
		
		/// <summary>Member SetTextBaselineAttribute </summary>
		/// <param name='aTextBaseline'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetTextBaselineAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aTextBaseline);
		
		/// <summary>Member FillText </summary>
		/// <param name='text'> </param>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='maxWidth'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FillText([MarshalAs(UnmanagedType.LPStruct)] nsAString text, double x, double y, double maxWidth);
		
		/// <summary>Member StrokeText </summary>
		/// <param name='text'> </param>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='maxWidth'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StrokeText([MarshalAs(UnmanagedType.LPStruct)] nsAString text, double x, double y, double maxWidth);
		
		/// <summary>Member MeasureText </summary>
		/// <param name='text'> </param>
		/// <returns>A nsIDOMTextMetrics</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMTextMetrics MeasureText([MarshalAs(UnmanagedType.LPStruct)] nsAString text);
		
		/// <summary>Member GetMozTextStyleAttribute </summary>
		/// <param name='aMozTextStyle'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetMozTextStyleAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aMozTextStyle);
		
		/// <summary>Member SetMozTextStyleAttribute </summary>
		/// <param name='aMozTextStyle'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetMozTextStyleAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aMozTextStyle);
		
		/// <summary>Member MozDrawText </summary>
		/// <param name='textToDraw'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MozDrawText([MarshalAs(UnmanagedType.LPStruct)] nsAString textToDraw);
		
		/// <summary>Member MozMeasureText </summary>
		/// <param name='textToMeasure'> </param>
		/// <returns>A System.Double</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double MozMeasureText([MarshalAs(UnmanagedType.LPStruct)] nsAString textToMeasure);
		
		/// <summary>Member MozPathText </summary>
		/// <param name='textToPath'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MozPathText([MarshalAs(UnmanagedType.LPStruct)] nsAString textToPath);
		
		/// <summary>Member MozTextAlongPath </summary>
		/// <param name='textToDraw'> </param>
		/// <param name='stroke'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MozTextAlongPath([MarshalAs(UnmanagedType.LPStruct)] nsAString textToDraw, System.Boolean  stroke);
		
		/// <summary>Member DrawImage </summary>
		/// <param name='image'> </param>
		/// <param name='a1'> </param>
		/// <param name='a2'> </param>
		/// <param name='a3'> </param>
		/// <param name='a4'> </param>
		/// <param name='a5'> </param>
		/// <param name='a6'> </param>
		/// <param name='a7'> </param>
		/// <param name='a8'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DrawImage([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  image, double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8);
		
		/// <summary>Member IsPointInPath </summary>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsPointInPath(double x, double y);
		
		/// <summary>Member GetImageData </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetImageData();
		
		/// <summary>Member PutImageData </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PutImageData();
		
		/// <summary>Member GetImageData_explicit </summary>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='width'> </param>
		/// <param name='height'> </param>
		/// <param name='dataPtr'> </param>
		/// <param name='dataLen'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetImageData_explicit(System.Int32  x, System.Int32  y, System.UInt32  width, System.UInt32  height, System.IntPtr  dataPtr, System.UInt32  dataLen);
		
		/// <summary>Member PutImageData_explicit </summary>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='width'> </param>
		/// <param name='height'> </param>
		/// <param name='dataPtr'> </param>
		/// <param name='dataLen'> </param>
		/// <param name='hasDirtyRect'> </param>
		/// <param name='dirtyX'> </param>
		/// <param name='dirtyY'> </param>
		/// <param name='dirtyWidth'> </param>
		/// <param name='dirtyHeight'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PutImageData_explicit(System.Int32  x, System.Int32  y, System.UInt32  width, System.UInt32  height, System.IntPtr  dataPtr, System.UInt32  dataLen, System.Boolean  hasDirtyRect, System.Int32  dirtyX, System.Int32  dirtyY, System.Int32  dirtyWidth, System.Int32  dirtyHeight);
		
		/// <summary>Member CreateImageData </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CreateImageData();
		
		/// <summary>Member GetMozImageSmoothingEnabledAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetMozImageSmoothingEnabledAttribute();
		
		/// <summary>Member SetMozImageSmoothingEnabledAttribute </summary>
		/// <param name='aMozImageSmoothingEnabled'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetMozImageSmoothingEnabledAttribute(System.Boolean  aMozImageSmoothingEnabled);
		
		/// <summary>Member DrawWindow </summary>
		/// <param name='window'> </param>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='w'> </param>
		/// <param name='h'> </param>
		/// <param name='bgColor'> </param>
		/// <param name='flags'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DrawWindow([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  window, double x, double y, double w, double h, [MarshalAs(UnmanagedType.LPStruct)] nsAString bgColor, System.UInt32  flags);
		
		/// <summary>Member AsyncDrawXULElement </summary>
		/// <param name='elem'> </param>
		/// <param name='x'> </param>
		/// <param name='y'> </param>
		/// <param name='w'> </param>
		/// <param name='h'> </param>
		/// <param name='bgColor'> </param>
		/// <param name='flags'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AsyncDrawXULElement([MarshalAs(UnmanagedType.Interface)] nsIDOMXULElement  elem, double x, double y, double w, double h, [MarshalAs(UnmanagedType.LPStruct)] nsAString bgColor, System.UInt32  flags);
	}
}
