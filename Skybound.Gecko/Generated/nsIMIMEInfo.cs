// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIMIMEInfo.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIMIMEInfo.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIHandlerInfo </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("325e56a7-3762-4312-aec7-f1fcf84b4145")]
	public interface nsIHandlerInfo
	{
		
		/// <summary>Member GetTypeAttribute </summary>
		/// <param name='aType'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetTypeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aType);
		
		/// <summary>Member GetDescriptionAttribute </summary>
		/// <param name='aDescription'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetDescriptionAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aDescription);
		
		/// <summary>Member SetDescriptionAttribute </summary>
		/// <param name='aDescription'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDescriptionAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aDescription);
		
		/// <summary>Member GetPreferredApplicationHandlerAttribute </summary>
		/// <returns>A nsIHandlerApp </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIHandlerApp  GetPreferredApplicationHandlerAttribute();
		
		/// <summary>Member SetPreferredApplicationHandlerAttribute </summary>
		/// <param name='aPreferredApplicationHandler'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetPreferredApplicationHandlerAttribute([MarshalAs(UnmanagedType.Interface)] nsIHandlerApp  aPreferredApplicationHandler);
		
		/// <summary>Member GetPossibleApplicationHandlersAttribute </summary>
		/// <returns>A nsIMutableArray </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIMutableArray  GetPossibleApplicationHandlersAttribute();
		
		/// <summary>Member GetHasDefaultHandlerAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetHasDefaultHandlerAttribute();
		
		/// <summary>Member GetDefaultDescriptionAttribute </summary>
		/// <param name='aDefaultDescription'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetDefaultDescriptionAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aDefaultDescription);
		
		/// <summary>Member LaunchWithURI </summary>
		/// <param name='aURI'> </param>
		/// <param name='aWindowContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LaunchWithURI([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI, [MarshalAs(UnmanagedType.Interface)] nsIInterfaceRequestor  aWindowContext);
		
		/// <summary>Member GetPreferredActionAttribute </summary>
		/// <returns>A System.IntPtr</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr GetPreferredActionAttribute();
		
		/// <summary>Member SetPreferredActionAttribute </summary>
		/// <param name='aPreferredAction'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetPreferredActionAttribute(System.IntPtr aPreferredAction);
		
		/// <summary>Member GetAlwaysAskBeforeHandlingAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetAlwaysAskBeforeHandlingAttribute();
		
		/// <summary>Member SetAlwaysAskBeforeHandlingAttribute </summary>
		/// <param name='aAlwaysAskBeforeHandling'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetAlwaysAskBeforeHandlingAttribute(System.Boolean  aAlwaysAskBeforeHandling);
	}
	
	/// <summary>nsIMIMEInfo </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("1c21acef-c7a1-40c6-9d40-a20480ee53a1")]
	public interface nsIMIMEInfo : nsIHandlerInfo
	{
		
		/// <summary>Member GetTypeAttribute </summary>
		/// <param name='aType'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetTypeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aType);
		
		/// <summary>Member GetDescriptionAttribute </summary>
		/// <param name='aDescription'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetDescriptionAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aDescription);
		
		/// <summary>Member SetDescriptionAttribute </summary>
		/// <param name='aDescription'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetDescriptionAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aDescription);
		
		/// <summary>Member GetPreferredApplicationHandlerAttribute </summary>
		/// <returns>A nsIHandlerApp </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIHandlerApp  GetPreferredApplicationHandlerAttribute();
		
		/// <summary>Member SetPreferredApplicationHandlerAttribute </summary>
		/// <param name='aPreferredApplicationHandler'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetPreferredApplicationHandlerAttribute([MarshalAs(UnmanagedType.Interface)] nsIHandlerApp  aPreferredApplicationHandler);
		
		/// <summary>Member GetPossibleApplicationHandlersAttribute </summary>
		/// <returns>A nsIMutableArray </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIMutableArray  GetPossibleApplicationHandlersAttribute();
		
		/// <summary>Member GetHasDefaultHandlerAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.Boolean  GetHasDefaultHandlerAttribute();
		
		/// <summary>Member GetDefaultDescriptionAttribute </summary>
		/// <param name='aDefaultDescription'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetDefaultDescriptionAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aDefaultDescription);
		
		/// <summary>Member LaunchWithURI </summary>
		/// <param name='aURI'> </param>
		/// <param name='aWindowContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void LaunchWithURI([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI, [MarshalAs(UnmanagedType.Interface)] nsIInterfaceRequestor  aWindowContext);
		
		/// <summary>Member GetPreferredActionAttribute </summary>
		/// <returns>A System.IntPtr</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.IntPtr GetPreferredActionAttribute();
		
		/// <summary>Member SetPreferredActionAttribute </summary>
		/// <param name='aPreferredAction'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetPreferredActionAttribute(System.IntPtr aPreferredAction);
		
		/// <summary>Member GetAlwaysAskBeforeHandlingAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.Boolean  GetAlwaysAskBeforeHandlingAttribute();
		
		/// <summary>Member SetAlwaysAskBeforeHandlingAttribute </summary>
		/// <param name='aAlwaysAskBeforeHandling'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetAlwaysAskBeforeHandlingAttribute(System.Boolean  aAlwaysAskBeforeHandling);
		
		/// <summary>Member GetFileExtensions </summary>
		/// <returns>A nsIUTF8StringEnumerator</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIUTF8StringEnumerator GetFileExtensions();
		
		/// <summary>Member SetFileExtensions </summary>
		/// <param name='aExtensions'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetFileExtensions([MarshalAs(UnmanagedType.LPStruct)] nsAString  aExtensions);
		
		/// <summary>Member ExtensionExists </summary>
		/// <param name='aExtension'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool ExtensionExists([MarshalAs(UnmanagedType.LPStruct)] nsAString  aExtension);
		
		/// <summary>Member AppendExtension </summary>
		/// <param name='aExtension'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AppendExtension([MarshalAs(UnmanagedType.LPStruct)] nsAString  aExtension);
		
		/// <summary>Member GetPrimaryExtensionAttribute </summary>
		/// <param name='aPrimaryExtension'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetPrimaryExtensionAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aPrimaryExtension);
		
		/// <summary>Member SetPrimaryExtensionAttribute </summary>
		/// <param name='aPrimaryExtension'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetPrimaryExtensionAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aPrimaryExtension);
		
		/// <summary>Member GetMIMETypeAttribute </summary>
		/// <param name='aMIMEType'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetMIMETypeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aMIMEType);
		
		/// <summary>Member Equals </summary>
		/// <param name='aMIMEInfo'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool Equals([MarshalAs(UnmanagedType.Interface)] nsIMIMEInfo  aMIMEInfo);
		
		/// <summary>Member GetPossibleLocalHandlersAttribute </summary>
		/// <returns>A nsIArray </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIArray  GetPossibleLocalHandlersAttribute();
		
		/// <summary>Member LaunchWithFile </summary>
		/// <param name='aFile'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LaunchWithFile([MarshalAs(UnmanagedType.Interface)] nsIFile  aFile);
	}
	
	/// <summary>nsIHandlerApp </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8BDF20A4-9170-4548-AF52-78311A44F920")]
	public interface nsIHandlerApp
	{
		
		/// <summary>Member GetNameAttribute </summary>
		/// <param name='aName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aName);
		
		/// <summary>Member SetNameAttribute </summary>
		/// <param name='aName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aName);
		
		/// <summary>Member GetDetailedDescriptionAttribute </summary>
		/// <param name='aDetailedDescription'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetDetailedDescriptionAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aDetailedDescription);
		
		/// <summary>Member SetDetailedDescriptionAttribute </summary>
		/// <param name='aDetailedDescription'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDetailedDescriptionAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aDetailedDescription);
		
		/// <summary>Member Equals </summary>
		/// <param name='aHandlerApp'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool Equals([MarshalAs(UnmanagedType.Interface)] nsIHandlerApp  aHandlerApp);
		
		/// <summary>Member LaunchWithURI </summary>
		/// <param name='aURI'> </param>
		/// <param name='aWindowContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LaunchWithURI([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI, [MarshalAs(UnmanagedType.Interface)] nsIInterfaceRequestor  aWindowContext);
	}
	
	/// <summary>nsILocalHandlerApp </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("D36B6329-52AE-4f45-80F4-B2536AE5F8B2")]
	public interface nsILocalHandlerApp : nsIHandlerApp
	{
		
		/// <summary>Member GetNameAttribute </summary>
		/// <param name='aName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aName);
		
		/// <summary>Member SetNameAttribute </summary>
		/// <param name='aName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aName);
		
		/// <summary>Member GetDetailedDescriptionAttribute </summary>
		/// <param name='aDetailedDescription'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetDetailedDescriptionAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aDetailedDescription);
		
		/// <summary>Member SetDetailedDescriptionAttribute </summary>
		/// <param name='aDetailedDescription'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetDetailedDescriptionAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aDetailedDescription);
		
		/// <summary>Member Equals </summary>
		/// <param name='aHandlerApp'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool Equals([MarshalAs(UnmanagedType.Interface)] nsIHandlerApp  aHandlerApp);
		
		/// <summary>Member LaunchWithURI </summary>
		/// <param name='aURI'> </param>
		/// <param name='aWindowContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void LaunchWithURI([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI, [MarshalAs(UnmanagedType.Interface)] nsIInterfaceRequestor  aWindowContext);
		
		/// <summary>Member GetExecutableAttribute </summary>
		/// <returns>A nsIFile </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIFile  GetExecutableAttribute();
		
		/// <summary>Member SetExecutableAttribute </summary>
		/// <param name='aExecutable'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetExecutableAttribute([MarshalAs(UnmanagedType.Interface)] nsIFile  aExecutable);
		
		/// <summary>Member GetParameterCountAttribute </summary>
		/// <returns>A System.UInt32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetParameterCountAttribute();
		
		/// <summary>Member ClearParameters </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ClearParameters();
		
		/// <summary>Member AppendParameter </summary>
		/// <param name='param'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AppendParameter([MarshalAs(UnmanagedType.LPStruct)] nsAString param);
		
		/// <summary>Member GetParameter </summary>
		/// <param name='parameterIndex'> </param>
		/// <returns>A nsAString</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString GetParameter(System.UInt32  parameterIndex);
		
		/// <summary>Member ParameterExists </summary>
		/// <param name='param'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool ParameterExists([MarshalAs(UnmanagedType.LPStruct)] nsAString param);
	}
	
	/// <summary>nsIWebHandlerApp </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("7521a093-c498-45ce-b462-df7ba0d882f6")]
	public interface nsIWebHandlerApp : nsIHandlerApp
	{
		
		/// <summary>Member GetNameAttribute </summary>
		/// <param name='aName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aName);
		
		/// <summary>Member SetNameAttribute </summary>
		/// <param name='aName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aName);
		
		/// <summary>Member GetDetailedDescriptionAttribute </summary>
		/// <param name='aDetailedDescription'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetDetailedDescriptionAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aDetailedDescription);
		
		/// <summary>Member SetDetailedDescriptionAttribute </summary>
		/// <param name='aDetailedDescription'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetDetailedDescriptionAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aDetailedDescription);
		
		/// <summary>Member Equals </summary>
		/// <param name='aHandlerApp'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool Equals([MarshalAs(UnmanagedType.Interface)] nsIHandlerApp  aHandlerApp);
		
		/// <summary>Member LaunchWithURI </summary>
		/// <param name='aURI'> </param>
		/// <param name='aWindowContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void LaunchWithURI([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI, [MarshalAs(UnmanagedType.Interface)] nsIInterfaceRequestor  aWindowContext);
		
		/// <summary>Member GetUriTemplateAttribute </summary>
		/// <param name='aUriTemplate'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetUriTemplateAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aUriTemplate);
		
		/// <summary>Member SetUriTemplateAttribute </summary>
		/// <param name='aUriTemplate'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetUriTemplateAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aUriTemplate);
	}
	
	/// <summary>nsIDBusHandlerApp </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("1ffc274b-4cbf-4bb5-a635-05ad2cbb6534")]
	public interface nsIDBusHandlerApp : nsIHandlerApp
	{
		
		/// <summary>Member GetNameAttribute </summary>
		/// <param name='aName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aName);
		
		/// <summary>Member SetNameAttribute </summary>
		/// <param name='aName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aName);
		
		/// <summary>Member GetDetailedDescriptionAttribute </summary>
		/// <param name='aDetailedDescription'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetDetailedDescriptionAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aDetailedDescription);
		
		/// <summary>Member SetDetailedDescriptionAttribute </summary>
		/// <param name='aDetailedDescription'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetDetailedDescriptionAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aDetailedDescription);
		
		/// <summary>Member Equals </summary>
		/// <param name='aHandlerApp'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool Equals([MarshalAs(UnmanagedType.Interface)] nsIHandlerApp  aHandlerApp);
		
		/// <summary>Member LaunchWithURI </summary>
		/// <param name='aURI'> </param>
		/// <param name='aWindowContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void LaunchWithURI([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI, [MarshalAs(UnmanagedType.Interface)] nsIInterfaceRequestor  aWindowContext);
		
		/// <summary>Member GetServiceAttribute </summary>
		/// <param name='aService'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetServiceAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aService);
		
		/// <summary>Member SetServiceAttribute </summary>
		/// <param name='aService'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetServiceAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aService);
		
		/// <summary>Member GetObjectPathAttribute </summary>
		/// <param name='aObjectPath'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetObjectPathAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aObjectPath);
		
		/// <summary>Member SetObjectPathAttribute </summary>
		/// <param name='aObjectPath'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetObjectPathAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aObjectPath);
		
		/// <summary>Member GetDBusInterfaceAttribute </summary>
		/// <param name='aDBusInterface'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetDBusInterfaceAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aDBusInterface);
		
		/// <summary>Member SetDBusInterfaceAttribute </summary>
		/// <param name='aDBusInterface'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDBusInterfaceAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aDBusInterface);
		
		/// <summary>Member GetMethodAttribute </summary>
		/// <param name='aMethod'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetMethodAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aMethod);
		
		/// <summary>Member SetMethodAttribute </summary>
		/// <param name='aMethod'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetMethodAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aMethod);
	}
}
