// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIWebSocket.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>
    /// The nsIWebSocket interface enables Web applications to maintain
    /// bidirectional communications with server-side processes as described in:
    ///
    /// http://dev.w3.org/html5/websockets/
    ///
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("e59c8c65-df29-485c-a00b-8fac3dc1573a")]
	public interface nsIWebSocket
	{
		
		/// <summary>
        /// The nsIWebSocket interface enables Web applications to maintain
        /// bidirectional communications with server-side processes as described in:
        ///
        /// http://dev.w3.org/html5/websockets/
        ///
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetUrlAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aUrl);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetExtensionsAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aExtensions);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetProtocolAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aProtocol);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetReadyStateAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetBufferedAmountAttribute();
		
		/// <summary>
        /// values will throw SYNTAX_ERR exception.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetBinaryTypeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aBinaryType);
		
		/// <summary>
        /// values will throw SYNTAX_ERR exception.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetBinaryTypeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aBinaryType);
		
		/// <summary>
        /// event handler attributes
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMEventListener GetOnopenAttribute();
		
		/// <summary>
        /// event handler attributes
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOnopenAttribute([MarshalAs(UnmanagedType.Interface)] nsIDOMEventListener aOnopen);
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMEventListener GetOnmessageAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOnmessageAttribute([MarshalAs(UnmanagedType.Interface)] nsIDOMEventListener aOnmessage);
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMEventListener GetOnerrorAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOnerrorAttribute([MarshalAs(UnmanagedType.Interface)] nsIDOMEventListener aOnerror);
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMEventListener GetOncloseAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOncloseAttribute([MarshalAs(UnmanagedType.Interface)] nsIDOMEventListener aOnclose);
		
		/// <summary>
        /// Transmits data to other end of the connection.
        /// @param data The data to be transmitted.  Arraybuffers and Blobs are sent as
        /// binary data.  Strings are sent as UTF-8 text data.  Other types are
        /// converted to a String and sent as a String.
        /// @return if the connection is still established and the data was queued or
        /// sent successfully.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Send([MarshalAs(UnmanagedType.Interface)] nsIVariant data, System.IntPtr jsContext);
		
		/// <summary>
        /// Closes the Web Socket connection or connection attempt, if any.
        /// If the connection is already closed, it does nothing.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Close(ushort code, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase reason, int argc);
		
		/// <summary>
        /// Initialize the object for use from C++ code with the principal, script
        /// context, and owner window that should be used.
        ///
        /// @param principal The principal to use for the request. This must not be
        /// null.
        /// @param scriptContext The script context to use for the request. May be
        /// null.
        /// @param ownerWindow The associated window for the request. May be null.
        /// @param url The url for opening the socket. This must not be empty, and
        /// must have an absolute url, using either the ws or wss schemes.
        /// @param protocol  Specifies array of sub-protocols acceptable to the client.
        /// If the length of the array is at least one, the server
        /// must select one of the listed sub-protocols for the
        /// connection to be successful. If empty, no sub-protocol is
        /// specified. The server selected sub-protocol can be read
        /// from the protocol attribute after connection.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Init([MarshalAs(UnmanagedType.Interface)] nsIPrincipal principal, System.IntPtr scriptContext, System.IntPtr ownerWindow, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase url, System.IntPtr protocol);
	}
	
	/// <summary>nsIWebSocketConsts </summary>
	public class nsIWebSocketConsts
	{
		
		// <summary>
        //ready state
        // </summary>
		public const ulong CONNECTING = 0;
		
		// 
		public const ulong OPEN = 1;
		
		// 
		public const ulong CLOSING = 2;
		
		// 
		public const ulong CLOSED = 3;
	}
}
