// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsISelectionController.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsISelectionController.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsISelectionController </summary>
	[ComImport()]
	[Guid("ff11fa25-788f-444f-8f69-dcdf14348fb3")]
	public interface nsISelectionController : nsISelectionDisplay
	{
		
		/// <summary>Member SetDisplaySelection </summary>
		/// <param name='toggle'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDisplaySelection(short toggle);
		
		/// <summary>Member GetDisplaySelection </summary>
		/// <returns>A System.Int16</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		short GetDisplaySelection();
		
		/// <summary>Member GetSelection </summary>
		/// <param name='type'> </param>
		/// <returns>A nsISelection</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISelection GetSelection(short type);
		
		/// <summary>Member ScrollSelectionIntoView </summary>
		/// <param name='type'> </param>
		/// <param name='region'> </param>
		/// <param name='flags'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ScrollSelectionIntoView(short type, short region, short flags);
		
		/// <summary>Member RepaintSelection </summary>
		/// <param name='type'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RepaintSelection(short type);
		
		/// <summary>Member SetCaretEnabled </summary>
		/// <param name='enabled'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCaretEnabled(System.Boolean  enabled);
		
		/// <summary>Member SetCaretReadOnly </summary>
		/// <param name='readOnly'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCaretReadOnly(System.Boolean  readOnly);
		
		/// <summary>Member GetCaretEnabled </summary>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetCaretEnabled();
		
		/// <summary>Member GetCaretVisibleAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetCaretVisibleAttribute();
		
		/// <summary>Member SetCaretVisibilityDuringSelection </summary>
		/// <param name='visibility'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCaretVisibilityDuringSelection(System.Boolean  visibility);
		
		/// <summary>Member CharacterMove </summary>
		/// <param name='forward'> </param>
		/// <param name='extend'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CharacterMove(System.Boolean  forward, System.Boolean  extend);
		
		/// <summary>Member CharacterExtendForDelete </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CharacterExtendForDelete();
		
		/// <summary>Member CharacterExtendForBackspace </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CharacterExtendForBackspace();
		
		/// <summary>Member WordMove </summary>
		/// <param name='forward'> </param>
		/// <param name='extend'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WordMove(System.Boolean  forward, System.Boolean  extend);
		
		/// <summary>Member WordExtendForDelete </summary>
		/// <param name='forward'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WordExtendForDelete(System.Boolean  forward);
		
		/// <summary>Member LineMove </summary>
		/// <param name='forward'> </param>
		/// <param name='extend'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LineMove(System.Boolean  forward, System.Boolean  extend);
		
		/// <summary>Member IntraLineMove </summary>
		/// <param name='forward'> </param>
		/// <param name='extend'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void IntraLineMove(System.Boolean  forward, System.Boolean  extend);
		
		/// <summary>Member PageMove </summary>
		/// <param name='forward'> </param>
		/// <param name='extend'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PageMove(System.Boolean  forward, System.Boolean  extend);
		
		/// <summary>Member CompleteScroll </summary>
		/// <param name='forward'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CompleteScroll(System.Boolean  forward);
		
		/// <summary>Member CompleteMove </summary>
		/// <param name='forward'> </param>
		/// <param name='extend'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CompleteMove(System.Boolean  forward, System.Boolean  extend);
		
		/// <summary>Member ScrollPage </summary>
		/// <param name='forward'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ScrollPage(System.Boolean  forward);
		
		/// <summary>Member ScrollLine </summary>
		/// <param name='forward'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ScrollLine(System.Boolean  forward);
		
		/// <summary>Member ScrollHorizontal </summary>
		/// <param name='left'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ScrollHorizontal(System.Boolean  left);
		
		/// <summary>Member SelectAll </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SelectAll();
		
		/// <summary>Member CheckVisibility </summary>
		/// <param name='node'> </param>
		/// <param name='startOffset'> </param>
		/// <param name='endOffset'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool CheckVisibility([MarshalAs(UnmanagedType.Interface)] nsIDOMNode  node, short startOffset, short endOffset);
	}
}
