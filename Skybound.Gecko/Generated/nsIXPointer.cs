// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIXPointer.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>
    /// XXX A good XPointerResult would probably mimic XPathresult,
    /// this range list is just the minimum that will be able to represent
    /// all return values, although it would be more user friendly to return
    /// nodes and node lists when they are possible.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("D3992637-F474-4b65-83ED-323FE69C60D2")]
	public interface nsIXPointerResult
	{
		
		/// <summary>
        /// XXX A good XPointerResult would probably mimic XPathresult,
        /// this range list is just the minimum that will be able to represent
        /// all return values, although it would be more user friendly to return
        /// nodes and node lists when they are possible.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMRange Item(System.UInt32  index);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetLengthAttribute();
	}
	
	/// <summary>
    /// Scheme context for nsIXPointerSchemeProcessor. The context consists of
    /// all the scheme/data pairs that precede the scheme/data that the
    /// nsIXPointerSchemeProcessor is currently evaluating.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("781F4AA1-EBB3-4667-B1C2-2B35E94C4281")]
	public interface nsIXPointerSchemeContext
	{
		
		/// <summary>
        /// Scheme context for nsIXPointerSchemeProcessor. The context consists of
        /// all the scheme/data pairs that precede the scheme/data that the
        /// nsIXPointerSchemeProcessor is currently evaluating.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetCountAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetSchemeData(System.UInt32  index, [MarshalAs(UnmanagedType.LPStruct)] nsAString scheme, [MarshalAs(UnmanagedType.LPStruct)] nsAString data);
	}
	
	/// <summary>
    /// nsIXPointerSchemeProcessors will be called by the XPointer Processor that
    /// implements the XPointer Framework. This is done for each scheme the
    /// XPointer Processor finds, in left-to-right order.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("093D3559-B56B-44d0-8764-C25815715080")]
	public interface nsIXPointerSchemeProcessor
	{
		
		/// <summary>
        /// Evaluate.
        ///
        /// @param aDocument The document in which to resolve the XPointer.
        /// @param aContext  The XPointer context in which to process aData.
        /// @param aData     The data in the scheme that needs to be resolved.
        /// @return          The result of the evaluation.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIXPointerResult Evaluate([MarshalAs(UnmanagedType.Interface)] nsIDOMDocument  aDocument, [MarshalAs(UnmanagedType.Interface)] nsIXPointerSchemeContext  aContext, [MarshalAs(UnmanagedType.LPStruct)] nsAString aData);
	}
	
	/// <summary>
    /// nsIXPointerEvaluator resolves an XPointer expression
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ADDD0FE5-8555-45b7-B763-97D5898CE268")]
	public interface nsIXPointerEvaluator
	{
		
		/// <summary>
        /// Evaluate an XPointer expression.
        ///
        /// @param aDocument   The document in which to evaluate.
        /// @param aExpression The XPointer expression string to evaluate.
        /// @return            The result.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIXPointerResult Evaluate([MarshalAs(UnmanagedType.Interface)] nsIDOMDocument  aDocument, [MarshalAs(UnmanagedType.LPStruct)] nsAString aExpression);
	}
}
