// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsILocalFileOS2.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsILocalFileOS2 </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("26de2089-239d-4697-818b-bae1fe8e8e0d")]
	public interface nsILocalFileOS2 : nsILocalFile
	{
		
		/// <summary>
        /// append[Native]
        ///
        /// This function is used for constructing a descendent of the
        /// current nsIFile.
        ///
        /// @param node
        /// A string which is intended to be a child node of the nsIFile.
        /// For the |appendNative| method, the node must be in the native
        /// filesystem charset.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Append([MarshalAs(UnmanagedType.LPStruct)] nsAString node);
		
		/// <summary>Member AppendNative </summary>
		/// <param name='node'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void AppendNative([MarshalAs(UnmanagedType.LPStruct)] nsACString node);
		
		/// <summary>
        /// Normalize the pathName (e.g. removing .. and . components on Unix).
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Normalize();
		
		/// <summary>
        /// create
        ///
        /// This function will create a new file or directory in the
        /// file system. Any nodes that have not been created or
        /// resolved, will be.  If the file or directory already
        /// exists create() will return NS_ERROR_FILE_ALREADY_EXISTS.
        ///
        /// @param type
        /// This specifies the type of file system object
        /// to be made.  The only two types at this time
        /// are file and directory which are defined above.
        /// If the type is unrecongnized, we will return an
        /// error (NS_ERROR_FILE_UNKNOWN_TYPE).
        ///
        /// @param permissions
        /// The unix style octal permissions.  This may
        /// be ignored on systems that do not need to do
        /// permissions.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Create(uint type, uint permissions);
		
		/// <summary>
        /// Accessor to the leaf name of the file itself.
        /// For the |nativeLeafName| method, the nativeLeafName must
        /// be in the native filesystem charset.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetLeafNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aLeafName);
		
		/// <summary>
        /// Accessor to the leaf name of the file itself.
        /// For the |nativeLeafName| method, the nativeLeafName must
        /// be in the native filesystem charset.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetLeafNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aLeafName);
		
		/// <summary>Member GetNativeLeafNameAttribute </summary>
		/// <param name='aNativeLeafName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetNativeLeafNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACString aNativeLeafName);
		
		/// <summary>Member SetNativeLeafNameAttribute </summary>
		/// <param name='aNativeLeafName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetNativeLeafNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACString aNativeLeafName);
		
		/// <summary>
        /// copyTo[Native]
        ///
        /// This will copy this file to the specified newParentDir.
        /// If a newName is specified, the file will be renamed.
        /// If 'this' is not created we will return an error
        /// (NS_ERROR_FILE_TARGET_DOES_NOT_EXIST).
        ///
        /// copyTo may fail if the file already exists in the destination
        /// directory.
        ///
        /// copyTo will NOT resolve aliases/shortcuts during the copy.
        ///
        /// @param newParentDir
        /// This param is the destination directory. If the
        /// newParentDir is null, copyTo() will use the parent
        /// directory of this file. If the newParentDir is not
        /// empty and is not a directory, an error will be
        /// returned (NS_ERROR_FILE_DESTINATION_NOT_DIR). For the
        /// |CopyToNative| method, the newName must be in the
        /// native filesystem charset.
        ///
        /// @param newName
        /// This param allows you to specify a new name for
        /// the file to be copied. This param may be empty, in
        /// which case the current leaf name will be used.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void CopyTo([MarshalAs(UnmanagedType.Interface)] nsIFile newParentDir, [MarshalAs(UnmanagedType.LPStruct)] nsAString newName);
		
		/// <summary>Member CopyToNative </summary>
		/// <param name='newParentDir'> </param>
		/// <param name='newName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void CopyToNative([MarshalAs(UnmanagedType.Interface)] nsIFile newParentDir, [MarshalAs(UnmanagedType.LPStruct)] nsACString newName);
		
		/// <summary>
        /// copyToFollowingLinks[Native]
        ///
        /// This function is identical to copyTo with the exception that,
        /// as the name implies, it follows symbolic links.  The XP_UNIX
        /// implementation always follow symbolic links when copying.  For
        /// the |CopyToFollowingLinks| method, the newName must be in the
        /// native filesystem charset.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void CopyToFollowingLinks([MarshalAs(UnmanagedType.Interface)] nsIFile newParentDir, [MarshalAs(UnmanagedType.LPStruct)] nsAString newName);
		
		/// <summary>Member CopyToFollowingLinksNative </summary>
		/// <param name='newParentDir'> </param>
		/// <param name='newName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void CopyToFollowingLinksNative([MarshalAs(UnmanagedType.Interface)] nsIFile newParentDir, [MarshalAs(UnmanagedType.LPStruct)] nsACString newName);
		
		/// <summary>
        /// moveTo[Native]
        ///
        /// A method to move this file or directory to newParentDir.
        /// If a newName is specified, the file or directory will be renamed.
        /// If 'this' is not created we will return an error
        /// (NS_ERROR_FILE_TARGET_DOES_NOT_EXIST).
        /// If 'this' is a file, and the destination file already exists, moveTo
        /// will replace the old file.
        /// This object is updated to refer to the new file.
        ///
        /// moveTo will NOT resolve aliases/shortcuts during the copy.
        /// moveTo will do the right thing and allow copies across volumes.
        /// moveTo will return an error (NS_ERROR_FILE_DIR_NOT_EMPTY) if 'this' is
        /// a directory and the destination directory is not empty.
        /// moveTo will return an error (NS_ERROR_FILE_ACCESS_DENIED) if 'this' is
        /// a directory and the destination directory is not writable.
        ///
        /// @param newParentDir
        /// This param is the destination directory. If the
        /// newParentDir is empty, moveTo() will rename the file
        /// within its current directory. If the newParentDir is
        /// not empty and does not name a directory, an error will
        /// be returned (NS_ERROR_FILE_DESTINATION_NOT_DIR).  For
        /// the |moveToNative| method, the newName must be in the
        /// native filesystem charset.
        ///
        /// @param newName
        /// This param allows you to specify a new name for
        /// the file to be moved. This param may be empty, in
        /// which case the current leaf name will be used.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void MoveTo([MarshalAs(UnmanagedType.Interface)] nsIFile newParentDir, [MarshalAs(UnmanagedType.LPStruct)] nsAString newName);
		
		/// <summary>Member MoveToNative </summary>
		/// <param name='newParentDir'> </param>
		/// <param name='newName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void MoveToNative([MarshalAs(UnmanagedType.Interface)] nsIFile newParentDir, [MarshalAs(UnmanagedType.LPStruct)] nsACString newName);
		
		/// <summary>
        /// This will try to delete this file.  The 'recursive' flag
        /// must be PR_TRUE to delete directories which are not empty.
        ///
        /// This will not resolve any symlinks.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Remove([MarshalAs(UnmanagedType.Bool)] bool recursive);
		
		/// <summary>
        /// Attributes of nsIFile.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new uint GetPermissionsAttribute();
		
		/// <summary>
        /// Attributes of nsIFile.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetPermissionsAttribute(uint aPermissions);
		
		/// <summary>Member GetPermissionsOfLinkAttribute </summary>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new uint GetPermissionsOfLinkAttribute();
		
		/// <summary>Member SetPermissionsOfLinkAttribute </summary>
		/// <param name='aPermissionsOfLink'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetPermissionsOfLinkAttribute(uint aPermissionsOfLink);
		
		/// <summary>
        /// File Times are to be in milliseconds from
        /// midnight (00:00:00), January 1, 1970 Greenwich Mean
        /// Time (GMT).
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new long GetLastModifiedTimeAttribute();
		
		/// <summary>
        /// File Times are to be in milliseconds from
        /// midnight (00:00:00), January 1, 1970 Greenwich Mean
        /// Time (GMT).
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetLastModifiedTimeAttribute(long aLastModifiedTime);
		
		/// <summary>Member GetLastModifiedTimeOfLinkAttribute </summary>
		/// <returns>A System.Int64</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new long GetLastModifiedTimeOfLinkAttribute();
		
		/// <summary>Member SetLastModifiedTimeOfLinkAttribute </summary>
		/// <param name='aLastModifiedTimeOfLink'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetLastModifiedTimeOfLinkAttribute(long aLastModifiedTimeOfLink);
		
		/// <summary>
        /// WARNING!  On the Mac, getting/setting the file size with nsIFile
        /// only deals with the size of the data fork.  If you need to
        /// know the size of the combined data and resource forks use the
        /// GetFileSizeWithResFork() method defined on nsILocalFileMac.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new long GetFileSizeAttribute();
		
		/// <summary>
        /// WARNING!  On the Mac, getting/setting the file size with nsIFile
        /// only deals with the size of the data fork.  If you need to
        /// know the size of the combined data and resource forks use the
        /// GetFileSizeWithResFork() method defined on nsILocalFileMac.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetFileSizeAttribute(long aFileSize);
		
		/// <summary>Member GetFileSizeOfLinkAttribute </summary>
		/// <returns>A System.Int64</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new long GetFileSizeOfLinkAttribute();
		
		/// <summary>
        /// target & path
        ///
        /// Accessor to the string path.  The native version of these
        /// strings are not guaranteed to be a usable path to pass to
        /// NSPR or the C stdlib.  There are problems that affect
        /// platforms on which a path does not fully specify a file
        /// because two volumes can have the same name (e.g., mac).
        /// This is solved by holding "private", native data in the
        /// nsIFile implementation.  This native data is lost when
        /// you convert to a string.
        ///
        /// DO NOT PASS TO USE WITH NSPR OR STDLIB!
        ///
        /// target
        /// Find out what the symlink points at.  Will give error
        /// (NS_ERROR_FILE_INVALID_PATH) if not a symlink.
        ///
        /// path
        /// Find out what the nsIFile points at.
        ///
        /// Note that the ACString attributes are returned in the
        /// native filesystem charset.
        ///
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetTargetAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aTarget);
		
		/// <summary>Member GetNativeTargetAttribute </summary>
		/// <param name='aNativeTarget'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetNativeTargetAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACString aNativeTarget);
		
		/// <summary>Member GetPathAttribute </summary>
		/// <param name='aPath'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetPathAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aPath);
		
		/// <summary>Member GetNativePathAttribute </summary>
		/// <param name='aNativePath'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetNativePathAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACString aNativePath);
		
		/// <summary>Member Exists </summary>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool Exists();
		
		/// <summary>Member IsWritable </summary>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool IsWritable();
		
		/// <summary>Member IsReadable </summary>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool IsReadable();
		
		/// <summary>Member IsExecutable </summary>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool IsExecutable();
		
		/// <summary>Member IsHidden </summary>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool IsHidden();
		
		/// <summary>Member IsDirectory </summary>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool IsDirectory();
		
		/// <summary>Member IsFile </summary>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool IsFile();
		
		/// <summary>Member IsSymlink </summary>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool IsSymlink();
		
		/// <summary>
        /// Not a regular file, not a directory, not a symlink.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool IsSpecial();
		
		/// <summary>
        /// createUnique
        ///
        /// This function will create a new file or directory in the
        /// file system. Any nodes that have not been created or
        /// resolved, will be.  If this file already exists, we try
        /// variations on the leaf name "suggestedName" until we find
        /// one that did not already exist.
        ///
        /// If the search for nonexistent files takes too long
        /// (thousands of the variants already exist), we give up and
        /// return NS_ERROR_FILE_TOO_BIG.
        ///
        /// @param type
        /// This specifies the type of file system object
        /// to be made.  The only two types at this time
        /// are file and directory which are defined above.
        /// If the type is unrecongnized, we will return an
        /// error (NS_ERROR_FILE_UNKNOWN_TYPE).
        ///
        /// @param permissions
        /// The unix style octal permissions.  This may
        /// be ignored on systems that do not need to do
        /// permissions.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void CreateUnique(uint type, uint permissions);
		
		/// <summary>
        /// clone()
        ///
        /// This function will allocate and initialize a nsIFile object to the
        /// exact location of the |this| nsIFile.
        ///
        /// @param file
        /// A nsIFile which this object will be initialize
        /// with.
        ///
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIFile Clone();
		
		/// <summary>
        /// Will determine if the inFile equals this.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool Equals([MarshalAs(UnmanagedType.Interface)] nsIFile inFile);
		
		/// <summary>
        /// Will determine if inFile is a descendant of this file
        /// If |recur| is true, look in subdirectories too
        /// </summary>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool Contains([MarshalAs(UnmanagedType.Interface)] nsIFile inFile, [MarshalAs(UnmanagedType.Bool)] bool recur);
		
		/// <summary>
        /// Parent will be null when this is at the top of the volume.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIFile GetParentAttribute();
		
		/// <summary>
        /// Returns an enumeration of the elements in a directory. Each
        /// element in the enumeration is an nsIFile.
        ///
        /// @return NS_ERROR_FILE_NOT_DIRECTORY if the current nsIFile does
        /// not specify a directory.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsISimpleEnumerator GetDirectoryEntriesAttribute();
		
		/// <summary>
        /// initWith[Native]Path
        ///
        /// This function will initialize the nsILocalFile object.  Any
        /// internal state information will be reset.
        ///
        /// @param filePath
        /// A string which specifies a full file path to a
        /// location.  Relative paths will be treated as an
        /// error (NS_ERROR_FILE_UNRECOGNIZED_PATH).  For
        /// initWithNativePath, the filePath must be in the native
        /// filesystem charset.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void InitWithPath([MarshalAs(UnmanagedType.LPStruct)] nsAString filePath);
		
		/// <summary>Member InitWithNativePath </summary>
		/// <param name='filePath'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void InitWithNativePath([MarshalAs(UnmanagedType.LPStruct)] nsACString filePath);
		
		/// <summary>
        /// initWithFile
        ///
        /// Initialize this object with another file
        ///
        /// @param aFile
        /// the file this becomes equivalent to
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void InitWithFile([MarshalAs(UnmanagedType.Interface)] nsILocalFile aFile);
		
		/// <summary>
        /// followLinks
        ///
        /// This attribute will determine if the nsLocalFile will auto
        /// resolve symbolic links.  By default, this value will be false
        /// on all non unix systems.  On unix, this attribute is effectively
        /// a noop.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool GetFollowLinksAttribute();
		
		/// <summary>
        /// followLinks
        ///
        /// This attribute will determine if the nsLocalFile will auto
        /// resolve symbolic links.  By default, this value will be false
        /// on all non unix systems.  On unix, this attribute is effectively
        /// a noop.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetFollowLinksAttribute([MarshalAs(UnmanagedType.Bool)] bool aFollowLinks);
		
		/// <summary>
        /// Return the result of PR_Open on the file.  The caller is
        /// responsible for calling PR_Close on the result.
        ///
        /// @param flags the PR_Open flags from prio.h, plus optionally
        /// DELETE_ON_CLOSE. DELETE_ON_CLOSE may be implemented by removing
        /// the file (by path name) immediately after opening it, so beware
        /// of possible races; the file should be exclusively owned by this
        /// process.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.IntPtr OpenNSPRFileDesc(int flags, int mode);
		
		/// <summary>
        /// Return the result of fopen on the file.  The caller is
        /// responsible for calling fclose on the result.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.IntPtr OpenANSIFileDesc([MarshalAs(UnmanagedType.LPStr)] string mode);
		
		/// <summary>
        /// Return the result of PR_LoadLibrary on the file.  The caller is
        /// responsible for calling PR_UnloadLibrary on the result.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.IntPtr Load();
		
		/// <summary>
        /// number of bytes available on disk to non-superuser
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new long GetDiskSpaceAvailableAttribute();
		
		/// <summary>
        /// appendRelative[Native]Path
        ///
        /// Append a relative path to the current path of the nsILocalFile object.
        ///
        /// @param relativeFilePath
        /// relativeFilePath is a native relative path. For security reasons,
        /// this cannot contain .. or cannot start with a directory separator.
        /// For the |appendRelativeNativePath| method, the relativeFilePath
        /// must be in the native filesystem charset.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void AppendRelativePath([MarshalAs(UnmanagedType.LPStruct)] nsAString relativeFilePath);
		
		/// <summary>Member AppendRelativeNativePath </summary>
		/// <param name='relativeFilePath'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void AppendRelativeNativePath([MarshalAs(UnmanagedType.LPStruct)] nsACString relativeFilePath);
		
		/// <summary>
        /// Accessor to a null terminated string which will specify
        /// the file in a persistent manner for disk storage.
        ///
        /// The character set of this attribute is undefined.  DO NOT TRY TO
        /// INTERPRET IT AS HUMAN READABLE TEXT!
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetPersistentDescriptorAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACString aPersistentDescriptor);
		
		/// <summary>
        /// Accessor to a null terminated string which will specify
        /// the file in a persistent manner for disk storage.
        ///
        /// The character set of this attribute is undefined.  DO NOT TRY TO
        /// INTERPRET IT AS HUMAN READABLE TEXT!
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetPersistentDescriptorAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACString aPersistentDescriptor);
		
		/// <summary>
        /// reveal
        ///
        /// Ask the operating system to open the folder which contains
        /// this file or folder. This routine only works on platforms which
        /// support the ability to open a folder...
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Reveal();
		
		/// <summary>
        /// launch
        ///
        /// Ask the operating system to attempt to open the file.
        /// this really just simulates "double clicking" the file on your platform.
        /// This routine only works on platforms which support this functionality.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Launch();
		
		/// <summary>
        /// getRelativeDescriptor
        ///
        /// Returns a relative file path in an opaque, XP format. It is therefore
        /// not a native path.
        ///
        /// The character set of the string returned from this function is
        /// undefined.  DO NOT TRY TO INTERPRET IT AS HUMAN READABLE TEXT!
        ///
        /// @param fromFile
        /// the file from which the descriptor is relative.
        /// There is no defined result if this param is null.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetRelativeDescriptor([MarshalAs(UnmanagedType.Interface)] nsILocalFile fromFile, [MarshalAs(UnmanagedType.LPStruct)] nsACString retval);
		
		/// <summary>
        /// setRelativeDescriptor
        ///
        /// Initializes the file to the location relative to fromFile using
        /// a string returned by getRelativeDescriptor.
        ///
        /// @param fromFile
        /// the file to which the descriptor is relative
        /// @param relative
        /// the relative descriptor obtained from getRelativeDescriptor
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetRelativeDescriptor([MarshalAs(UnmanagedType.Interface)] nsILocalFile fromFile, [MarshalAs(UnmanagedType.LPStruct)] nsACString relativeDesc);
		
		/// <summary>
        /// getFileTypes
        ///
        /// Returns the file's .TYPE extended attribute as an array of
        /// nsISupportsCStrings.
        ///
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIArray GetFileTypes();
		
		/// <summary>
        /// setFileTypes
        ///
        /// Sets the file's .TYPE extended attribute from a comma-separated
        /// list of types (this format is used because clients are unlikely
        /// to write more than a single type).
        /// @param fileTypes
        /// a string in the filesystem's native character set
        ///
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetFileTypes([MarshalAs(UnmanagedType.LPStruct)] nsACString fileTypes);
		
		/// <summary>
        /// isFileType
        ///
        /// Returns TRUE if the file has a .TYPE extended attribute that
        /// matches the string passed in.  The comparison is case-sensitive.
        /// @param fileType
        /// a string in the filesystem's native character set
        ///
        /// </summary>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsFileType([MarshalAs(UnmanagedType.LPStruct)] nsACString fileType);
		
		/// <summary>
        /// setFileSource
        ///
        /// Identifies the origin of a downloaded file by writing the
        /// source URI's spec to the .SUBJECT extended attribute.
        ///
        /// @param aURI
        /// the source URI
        ///
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetFileSource([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String aURI);
	}
}
