// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIWebProgress.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>
    /// The nsIWebProgress interface is used to add or remove nsIWebProgressListener
    /// instances to observe the loading of asynchronous requests (usually in the
    /// context of a DOM window).
    ///
    /// nsIWebProgress instances may be arranged in a parent-child configuration,
    /// corresponding to the parent-child configuration of their respective DOM
    /// windows.  However, in some cases a nsIWebProgress instance may not have an
    /// associated DOM window.  The parent-child relationship of nsIWebProgress
    /// instances is not made explicit by this interface, but the relationship may
    /// exist in some implementations.
    ///
    /// A nsIWebProgressListener instance receives notifications for the
    /// nsIWebProgress instance to which it added itself, and it may also receive
    /// notifications from any nsIWebProgress instances that are children of that
    /// nsIWebProgress instance.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("570F39D0-EFD0-11d3-B093-00A024FFC08C")]
	public interface nsIWebProgress
	{
		
		/// <summary>
        /// Registers a listener to receive web progress events.
        ///
        /// @param aListener
        /// The listener interface to be called when a progress event occurs.
        /// This object must also implement nsISupportsWeakReference.
        /// @param aNotifyMask
        /// The types of notifications to receive.
        ///
        /// @throw NS_ERROR_INVALID_ARG
        /// Indicates that aListener was either null or that it does not
        /// support weak references.
        /// @throw NS_ERROR_FAILURE
        /// Indicates that aListener was already registered.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddProgressListener([MarshalAs(UnmanagedType.Interface)] nsIWebProgressListener aListener, uint aNotifyMask);
		
		/// <summary>
        /// Removes a previously registered listener of progress events.
        ///
        /// @param aListener
        /// The listener interface previously registered with a call to
        /// addProgressListener.
        ///
        /// @throw NS_ERROR_FAILURE
        /// Indicates that aListener was not registered.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveProgressListener([MarshalAs(UnmanagedType.Interface)] nsIWebProgressListener aListener);
		
		/// <summary>
        /// The DOM window associated with this nsIWebProgress instance.
        ///
        /// @throw NS_ERROR_FAILURE
        /// Indicates that there is no associated DOM window.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMWindow GetDOMWindowAttribute();
		
		/// <summary>
        /// Indicates whether or not a document is currently being loaded
        /// in the context of this nsIWebProgress instance.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsLoadingDocumentAttribute();
	}
}
