// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIProtocolProxyService.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIProtocolProxyService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIProtocolProxyService </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("d7ec6237-162e-40f5-a2b4-46ccd5fa83c9")]
	public interface nsIProtocolProxyService
	{
		
		/// <summary>Member Resolve </summary>
		/// <param name='aURI'> </param>
		/// <param name='aFlags'> </param>
		/// <returns>A nsIProxyInfo</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIProxyInfo Resolve([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI, System.UInt32  aFlags);
		
		/// <summary>Member AsyncResolve </summary>
		/// <param name='aURI'> </param>
		/// <param name='aFlags'> </param>
		/// <param name='aCallback'> </param>
		/// <returns>A nsICancelable</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsICancelable AsyncResolve([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI, System.UInt32  aFlags, [MarshalAs(UnmanagedType.Interface)] nsIProtocolProxyCallback  aCallback);
		
		/// <summary>Member NewProxyInfo </summary>
		/// <param name='aType'> </param>
		/// <param name='aHost'> </param>
		/// <param name='aPort'> </param>
		/// <param name='aFlags'> </param>
		/// <param name='aFailoverTimeout'> </param>
		/// <param name='aFailoverProxy'> </param>
		/// <returns>A nsIProxyInfo</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIProxyInfo NewProxyInfo([MarshalAs(UnmanagedType.LPStruct)] nsAString  aType, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aHost, System.Int32  aPort, System.UInt32  aFlags, System.UInt32  aFailoverTimeout, [MarshalAs(UnmanagedType.Interface)] nsIProxyInfo  aFailoverProxy);
		
		/// <summary>Member GetFailoverForProxy </summary>
		/// <param name='aProxyInfo'> </param>
		/// <param name='aURI'> </param>
		/// <param name='aReason'> </param>
		/// <returns>A nsIProxyInfo</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIProxyInfo GetFailoverForProxy([MarshalAs(UnmanagedType.Interface)] nsIProxyInfo  aProxyInfo, [MarshalAs(UnmanagedType.Interface)] nsIURI  aURI, System.Int32  aReason);
		
		/// <summary>Member RegisterFilter </summary>
		/// <param name='aFilter'> </param>
		/// <param name='aPosition'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RegisterFilter([MarshalAs(UnmanagedType.Interface)] nsIProtocolProxyFilter  aFilter, System.UInt32  aPosition);
		
		/// <summary>Member UnregisterFilter </summary>
		/// <param name='aFilter'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnregisterFilter([MarshalAs(UnmanagedType.Interface)] nsIProtocolProxyFilter  aFilter);
		
		/// <summary>Member GetProxyConfigTypeAttribute </summary>
		/// <returns>A System.UInt32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetProxyConfigTypeAttribute();
	}
}
