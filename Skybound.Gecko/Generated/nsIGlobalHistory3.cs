// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIGlobalHistory3.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>
    /// Provides information about global history to gecko, extending GlobalHistory2
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("24306852-c60e-49c3-a455-90f6747118ba")]
	public interface nsIGlobalHistory3 : nsIGlobalHistory2
	{
		
		/// <summary>
        /// Add a URI to global history
        ///
        /// @param aURI      the URI of the page
        /// @param aRedirect whether the URI was redirected to another location;
        /// this is 'true' for the original URI which is
        /// redirected.
        /// @param aToplevel whether the URI is loaded in a top-level window
        /// @param aReferrer the URI of the referring page
        ///
        /// @note  Docshell will not filter out URI schemes like chrome: data:
        /// about: and view-source:.  Embedders should consider filtering out
        /// these schemes and others, e.g. mailbox: for the main URI and the
        /// referrer.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void AddURI([MarshalAs(UnmanagedType.Interface)] nsIURI aURI, [MarshalAs(UnmanagedType.Bool)] bool aRedirect, [MarshalAs(UnmanagedType.Bool)] bool aToplevel, [MarshalAs(UnmanagedType.Interface)] nsIURI aReferrer);
		
		/// <summary>
        /// Checks to see whether the given URI is in history.
        ///
        /// @param aURI the uri to the page
        /// @return true if a URI has been visited
        /// </summary>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool IsVisited([MarshalAs(UnmanagedType.Interface)] nsIURI aURI);
		
		/// <summary>
        /// Set the page title for the given uri. URIs that are not already in
        /// global history will not be added.
        ///
        /// @param aURI    the URI for which to set to the title
        /// @param aTitle  the page title
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetPageTitle([MarshalAs(UnmanagedType.Interface)] nsIURI aURI, [MarshalAs(UnmanagedType.LPStruct)] nsAString aTitle);
		
		/// <summary>
        /// Notifies the history system that the page loading via aOldChannel
        /// redirected to aNewChannel. Implementations should generally add the URI for
        /// aOldChannel to history for link coloring, but are advised not to expose it
        /// in the history user interface. This function is preferred if
        /// nsIGlobalHistory3 is available. Otherwise, nsIGlobalHistory2.addURI should
        /// be called with redirect=true.
        ///
        /// This function is preferred to nsIGlobalHistory2.addURI because it provides
        /// more information (including the redirect destination, channels involved,
        /// and redirect flags) to the history implementation.
        ///
        /// For implementors of nsIGlobalHistory3: The history implementation is
        /// responsible for sending NS_LINK_VISITED_EVENT_TOPIC to observers for
        /// redirect pages. This notification must be sent for history consumers for
        /// all non-redirect pages.
        ///
        /// @param aToplevel whether the URI is loaded in a top-level window.  If
        /// false, the load is in a subframe.
        ///
        /// The other params to this function are the same as those for
        /// nsIChannelEventSink::OnChannelRedirect.
        ///
        /// Note: Implementors who wish to implement this interface but rely on
        /// nsIGlobalHistory2.addURI for redirect processing may throw
        /// NS_ERROR_NOT_IMPLEMENTED from this method.  If they do so, then callers
        /// must call nsIGlobalHistory2.addURI upon getting the
        /// NS_ERROR_NOT_IMPLEMENTED result.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddDocumentRedirect([MarshalAs(UnmanagedType.Interface)] nsIChannel aOldChannel, [MarshalAs(UnmanagedType.Interface)] nsIChannel aNewChannel, int aFlags, [MarshalAs(UnmanagedType.Bool)] bool aTopLevel);
		
		/// <summary>
        /// Get the Gecko flags for this URI. These flags are used by Gecko as hints
        /// to optimize page loading. Not all histories have them; this need not be
        /// supported (just return NS_ERROR_NOT_IMPLEMENTED. These flags are opaque
        /// and should not be interpreted by the history engine.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetURIGeckoFlags([MarshalAs(UnmanagedType.Interface)] nsIURI aURI);
		
		/// <summary>
        /// Set the Gecko flags for this URI. May fail if the history entry
        /// doesn't have any flags or if there is no entry for the URI.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetURIGeckoFlags([MarshalAs(UnmanagedType.Interface)] nsIURI aURI, uint aFlags);
	}
}
