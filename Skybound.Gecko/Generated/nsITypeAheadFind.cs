// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsITypeAheadFind.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsITypeAheadFind.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsITypeAheadFind </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0749a445-19d3-4eb9-9d66-78eca8c6f604")]
	public interface nsITypeAheadFind
	{
		
		/// <summary>Member Init </summary>
		/// <param name='aDocShell'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Init([MarshalAs(UnmanagedType.Interface)] nsIDocShell  aDocShell);
		
		/// <summary>Member Find </summary>
		/// <param name='aSearchString'> </param>
		/// <param name='aLinksOnly'> </param>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint Find([MarshalAs(UnmanagedType.LPStruct)] nsAString aSearchString, System.Boolean  aLinksOnly);
		
		/// <summary>Member FindAgain </summary>
		/// <param name='findBackwards'> </param>
		/// <param name='aLinksOnly'> </param>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint FindAgain(System.Boolean  findBackwards, System.Boolean  aLinksOnly);
		
		/// <summary>Member SetDocShell </summary>
		/// <param name='aDocShell'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDocShell([MarshalAs(UnmanagedType.Interface)] nsIDocShell  aDocShell);
		
		/// <summary>Member SetSelectionModeAndRepaint </summary>
		/// <param name='toggle'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetSelectionModeAndRepaint(short toggle);
		
		/// <summary>Member CollapseSelection </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CollapseSelection();
		
		/// <summary>Member GetSearchStringAttribute </summary>
		/// <param name='aSearchString'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetSearchStringAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aSearchString);
		
		/// <summary>Member GetCaseSensitiveAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetCaseSensitiveAttribute();
		
		/// <summary>Member SetCaseSensitiveAttribute </summary>
		/// <param name='aCaseSensitive'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCaseSensitiveAttribute(System.Boolean  aCaseSensitive);
		
		/// <summary>Member GetFoundLinkAttribute </summary>
		/// <returns>A nsIDOMElement </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMElement  GetFoundLinkAttribute();
		
		/// <summary>Member GetFoundEditableAttribute </summary>
		/// <returns>A nsIDOMElement </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMElement  GetFoundEditableAttribute();
		
		/// <summary>Member GetCurrentWindowAttribute </summary>
		/// <returns>A nsIDOMWindow </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMWindow  GetCurrentWindowAttribute();
	}
}
