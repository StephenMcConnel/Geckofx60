// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIURLParser.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>
    /// nsIURLParser specifies the interface to an URL parser that attempts to
    /// follow the definitions of RFC 2396.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("7281076d-cf37-464a-815e-698235802604")]
	public interface nsIURLParser
	{
		
		/// <summary>
        /// ParseSpec breaks the URL string up into its 3 major components: a scheme,
        /// an authority section (hostname, etc.), and a path.
        ///
        /// spec = <scheme>://<authority><path>
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ParseURL([MarshalAs(UnmanagedType.LPStr)] System.String  spec, System.Int32  specLen, out System.UInt32  schemePos, out System.Int32  schemeLen, out System.UInt32  authorityPos, out System.Int32  authorityLen, out System.UInt32  pathPos, out System.Int32  pathLen);
		
		/// <summary>
        /// ParseAuthority breaks the authority string up into its 4 components:
        /// username, password, hostname, and hostport.
        ///
        /// auth = <username>:<password>@<hostname>:<port>
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ParseAuthority([MarshalAs(UnmanagedType.LPStr)] System.String  authority, System.Int32  authorityLen, out System.UInt32  usernamePos, out System.Int32  usernameLen, out System.UInt32  passwordPos, out System.Int32  passwordLen, out System.UInt32  hostnamePos, out System.Int32  hostnameLen, out System.Int32  port);
		
		/// <summary>
        /// userinfo = <username>:<password>
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ParseUserInfo([MarshalAs(UnmanagedType.LPStr)] System.String  userinfo, System.Int32  userinfoLen, out System.UInt32  usernamePos, out System.Int32  usernameLen, out System.UInt32  passwordPos, out System.Int32  passwordLen);
		
		/// <summary>
        /// serverinfo = <hostname>:<port>
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ParseServerInfo([MarshalAs(UnmanagedType.LPStr)] System.String  serverinfo, System.Int32  serverinfoLen, out System.UInt32  hostnamePos, out System.Int32  hostnameLen, out System.Int32  port);
		
		/// <summary>
        /// ParsePath breaks the path string up into its 4 major components: a file path,
        /// a param string, a query string, and a reference string.
        ///
        /// path = <filepath>;<param>?<query>#<ref>
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ParsePath([MarshalAs(UnmanagedType.LPStr)] System.String  path, System.Int32  pathLen, out System.UInt32  filepathPos, out System.Int32  filepathLen, out System.UInt32  paramPos, out System.Int32  paramLen, out System.UInt32  queryPos, out System.Int32  queryLen, out System.UInt32  refPos, out System.Int32  refLen);
		
		/// <summary>
        /// ParseFilePath breaks the file path string up into: the directory portion,
        /// file base name, and file extension.
        ///
        /// filepath = <directory><basename>.<extension>
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ParseFilePath([MarshalAs(UnmanagedType.LPStr)] System.String  filepath, System.Int32  filepathLen, out System.UInt32  directoryPos, out System.Int32  directoryLen, out System.UInt32  basenamePos, out System.Int32  basenameLen, out System.UInt32  extensionPos, out System.Int32  extensionLen);
		
		/// <summary>
        /// filename = <basename>.<extension>
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ParseFileName([MarshalAs(UnmanagedType.LPStr)] System.String  filename, System.Int32  filenameLen, out System.UInt32  basenamePos, out System.Int32  basenameLen, out System.UInt32  extensionPos, out System.Int32  extensionLen);
	}
}
