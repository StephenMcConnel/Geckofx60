// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIURLParser.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIURLParser.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIURLParser </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("7281076d-cf37-464a-815e-698235802604")]
	public interface nsIURLParser
	{
		
		/// <summary>Member ParseURL </summary>
		/// <param name='spec'> </param>
		/// <param name='specLen'> </param>
		/// <param name='schemePos'> </param>
		/// <param name='schemeLen'> </param>
		/// <param name='authorityPos'> </param>
		/// <param name='authorityLen'> </param>
		/// <param name='pathPos'> </param>
		/// <param name='pathLen'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ParseURL([MarshalAs(UnmanagedType.LPStr)] System.String  spec, System.Int32  specLen, out System.UInt32  schemePos, out System.Int32  schemeLen, out System.UInt32  authorityPos, out System.Int32  authorityLen, out System.UInt32  pathPos, out System.Int32  pathLen);
		
		/// <summary>Member ParseAuthority </summary>
		/// <param name='authority'> </param>
		/// <param name='authorityLen'> </param>
		/// <param name='usernamePos'> </param>
		/// <param name='usernameLen'> </param>
		/// <param name='passwordPos'> </param>
		/// <param name='passwordLen'> </param>
		/// <param name='hostnamePos'> </param>
		/// <param name='hostnameLen'> </param>
		/// <param name='port'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ParseAuthority([MarshalAs(UnmanagedType.LPStr)] System.String  authority, System.Int32  authorityLen, out System.UInt32  usernamePos, out System.Int32  usernameLen, out System.UInt32  passwordPos, out System.Int32  passwordLen, out System.UInt32  hostnamePos, out System.Int32  hostnameLen, out System.Int32  port);
		
		/// <summary>Member ParseUserInfo </summary>
		/// <param name='userinfo'> </param>
		/// <param name='userinfoLen'> </param>
		/// <param name='usernamePos'> </param>
		/// <param name='usernameLen'> </param>
		/// <param name='passwordPos'> </param>
		/// <param name='passwordLen'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ParseUserInfo([MarshalAs(UnmanagedType.LPStr)] System.String  userinfo, System.Int32  userinfoLen, out System.UInt32  usernamePos, out System.Int32  usernameLen, out System.UInt32  passwordPos, out System.Int32  passwordLen);
		
		/// <summary>Member ParseServerInfo </summary>
		/// <param name='serverinfo'> </param>
		/// <param name='serverinfoLen'> </param>
		/// <param name='hostnamePos'> </param>
		/// <param name='hostnameLen'> </param>
		/// <param name='port'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ParseServerInfo([MarshalAs(UnmanagedType.LPStr)] System.String  serverinfo, System.Int32  serverinfoLen, out System.UInt32  hostnamePos, out System.Int32  hostnameLen, out System.Int32  port);
		
		/// <summary>Member ParsePath </summary>
		/// <param name='path'> </param>
		/// <param name='pathLen'> </param>
		/// <param name='filepathPos'> </param>
		/// <param name='filepathLen'> </param>
		/// <param name='paramPos'> </param>
		/// <param name='paramLen'> </param>
		/// <param name='queryPos'> </param>
		/// <param name='queryLen'> </param>
		/// <param name='refPos'> </param>
		/// <param name='refLen'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ParsePath([MarshalAs(UnmanagedType.LPStr)] System.String  path, System.Int32  pathLen, out System.UInt32  filepathPos, out System.Int32  filepathLen, out System.UInt32  paramPos, out System.Int32  paramLen, out System.UInt32  queryPos, out System.Int32  queryLen, out System.UInt32  refPos, out System.Int32  refLen);
		
		/// <summary>Member ParseFilePath </summary>
		/// <param name='filepath'> </param>
		/// <param name='filepathLen'> </param>
		/// <param name='directoryPos'> </param>
		/// <param name='directoryLen'> </param>
		/// <param name='basenamePos'> </param>
		/// <param name='basenameLen'> </param>
		/// <param name='extensionPos'> </param>
		/// <param name='extensionLen'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ParseFilePath([MarshalAs(UnmanagedType.LPStr)] System.String  filepath, System.Int32  filepathLen, out System.UInt32  directoryPos, out System.Int32  directoryLen, out System.UInt32  basenamePos, out System.Int32  basenameLen, out System.UInt32  extensionPos, out System.Int32  extensionLen);
		
		/// <summary>Member ParseFileName </summary>
		/// <param name='filename'> </param>
		/// <param name='filenameLen'> </param>
		/// <param name='basenamePos'> </param>
		/// <param name='basenameLen'> </param>
		/// <param name='extensionPos'> </param>
		/// <param name='extensionLen'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ParseFileName([MarshalAs(UnmanagedType.LPStr)] System.String  filename, System.Int32  filenameLen, out System.UInt32  basenamePos, out System.Int32  basenameLen, out System.UInt32  extensionPos, out System.Int32  extensionLen);
	}
}
