// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsISelection2.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsISelection2.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsISelection2 </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("5d21d5fe-3691-4716-a334-4691eea54d29")]
	public interface nsISelection2 : nsISelection
	{
		
		/// <summary>Member GetAnchorNodeAttribute </summary>
		/// <returns>A nsIDOMNode </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMNode  GetAnchorNodeAttribute();
		
		/// <summary>Member GetAnchorOffsetAttribute </summary>
		/// <returns>A System.Int32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.Int32  GetAnchorOffsetAttribute();
		
		/// <summary>Member GetFocusNodeAttribute </summary>
		/// <returns>A nsIDOMNode </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMNode  GetFocusNodeAttribute();
		
		/// <summary>Member GetFocusOffsetAttribute </summary>
		/// <returns>A System.Int32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.Int32  GetFocusOffsetAttribute();
		
		/// <summary>Member GetIsCollapsedAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.Boolean  GetIsCollapsedAttribute();
		
		/// <summary>Member GetRangeCountAttribute </summary>
		/// <returns>A System.Int32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.Int32  GetRangeCountAttribute();
		
		/// <summary>Member GetRangeAt </summary>
		/// <param name='index'> </param>
		/// <returns>A nsIDOMRange</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMRange GetRangeAt(System.Int32  index);
		
		/// <summary>Member Collapse </summary>
		/// <param name='parentNode'> </param>
		/// <param name='offset'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Collapse([MarshalAs(UnmanagedType.Interface)] nsIDOMNode  parentNode, System.Int32  offset);
		
		/// <summary>Member Extend </summary>
		/// <param name='parentNode'> </param>
		/// <param name='offset'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Extend([MarshalAs(UnmanagedType.Interface)] nsIDOMNode  parentNode, System.Int32  offset);
		
		/// <summary>Member CollapseToStart </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void CollapseToStart();
		
		/// <summary>Member CollapseToEnd </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void CollapseToEnd();
		
		/// <summary>Member ContainsNode </summary>
		/// <param name='node'> </param>
		/// <param name='partlyContained'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool ContainsNode([MarshalAs(UnmanagedType.Interface)] nsIDOMNode  node, System.Boolean  partlyContained);
		
		/// <summary>Member SelectAllChildren </summary>
		/// <param name='parentNode'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SelectAllChildren([MarshalAs(UnmanagedType.Interface)] nsIDOMNode  parentNode);
		
		/// <summary>Member AddRange </summary>
		/// <param name='range'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void AddRange([MarshalAs(UnmanagedType.Interface)] nsIDOMRange  range);
		
		/// <summary>Member RemoveRange </summary>
		/// <param name='range'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void RemoveRange([MarshalAs(UnmanagedType.Interface)] nsIDOMRange  range);
		
		/// <summary>Member RemoveAllRanges </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void RemoveAllRanges();
		
		/// <summary>Member DeleteFromDocument </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void DeleteFromDocument();
		
		/// <summary>Member SelectionLanguageChange </summary>
		/// <param name='langRTL'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SelectionLanguageChange(System.Boolean  langRTL);
		
		/// <summary>Member ToString </summary>
		/// <returns>A System.String</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new string ToString();
		
		/// <summary>Member GetTypeAttribute </summary>
		/// <returns>A System.Int16</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		short GetTypeAttribute();
		
		/// <summary>Member GetRangesForInterval </summary>
		/// <param name='beginNode'> </param>
		/// <param name='beginOffset'> </param>
		/// <param name='endNode'> </param>
		/// <param name='endOffset'> </param>
		/// <param name='allowAdjacent'> </param>
		/// <param name='resultCount'> </param>
		/// <returns>A nsIDOMRange </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMRange  GetRangesForInterval([MarshalAs(UnmanagedType.Interface)] nsIDOMNode  beginNode, System.Int32  beginOffset, [MarshalAs(UnmanagedType.Interface)] nsIDOMNode  endNode, System.Int32  endOffset, System.Boolean  allowAdjacent, out System.UInt32  resultCount);
		
		/// <summary>Member GetRangesForIntervalCOMArray </summary>
		/// <param name='beginNode'> </param>
		/// <param name='beginOffset'> </param>
		/// <param name='endNode'> </param>
		/// <param name='endOffset'> </param>
		/// <param name='allowAdjacent'> </param>
		/// <param name='results'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetRangesForIntervalCOMArray([MarshalAs(UnmanagedType.Interface)] nsIDOMNode  beginNode, System.Int32  beginOffset, [MarshalAs(UnmanagedType.Interface)] nsIDOMNode  endNode, System.Int32  endOffset, System.Boolean  allowAdjacent, System.IntPtr results);
		
		/// <summary>Member ScrollIntoView </summary>
		/// <param name='aRegion'> </param>
		/// <param name='aIsSynchronous'> </param>
		/// <param name='aVPercent'> </param>
		/// <param name='aHPercent'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ScrollIntoView(short aRegion, System.Boolean  aIsSynchronous, short aVPercent, short aHPercent);
	}
}
