// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIServerSocket.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>
    /// nsIServerSocket
    ///
    /// An interface to a server socket that can accept incoming connections.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("a5b64be0-d563-46bb-ae95-132e46fcd42f")]
	public interface nsIServerSocket
	{
		
		/// <summary>
        /// init
        ///
        /// This method initializes a server socket.
        ///
        /// @param aPort
        /// The port of the server socket.  Pass -1 to indicate no preference,
        /// and a port will be selected automatically.
        /// @param aLoopbackOnly
        /// If true, the server socket will only respond to connections on the
        /// local loopback interface.  Otherwise, it will accept connections
        /// from any interface.  To specify a particular network interface,
        /// use initWithAddress.
        /// @param aBackLog
        /// The maximum length the queue of pending connections may grow to.
        /// This parameter may be silently limited by the operating system.
        /// Pass -1 to use the default value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Init(int aPort, [MarshalAs(UnmanagedType.Bool)] bool aLoopbackOnly, int aBackLog);
		
		/// <summary>
        /// initWithAddress
        ///
        /// This method initializes a server socket, and binds it to a particular
        /// local address (and hence a particular local network interface).
        ///
        /// @param aAddr
        /// The address to which this server socket should be bound.
        /// @param aBackLog
        /// The maximum length the queue of pending connections may grow to.
        /// This parameter may be silently limited by the operating system.
        /// Pass -1 to use the default value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InitWithAddress(System.IntPtr aAddr, int aBackLog);
		
		/// <summary>
        /// close
        ///
        /// This method closes a server socket.  This does not affect already
        /// connected client sockets (i.e., the nsISocketTransport instances
        /// created from this server socket).  This will cause the onStopListening
        /// event to asynchronously fire with a status of NS_BINDING_ABORTED.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Close();
		
		/// <summary>
        /// asyncListen
        ///
        /// This method puts the server socket in the listening state.  It will
        /// asynchronously listen for and accept client connections.  The listener
        /// will be notified once for each client connection that is accepted.  The
        /// listener's onSocketAccepted method will be called on the same thread
        /// that called asyncListen (the calling thread must have a nsIEventTarget).
        ///
        /// The listener will be passed a reference to an already connected socket
        /// transport (nsISocketTransport).  See below for more details.
        ///
        /// @param aListener
        /// The listener to be notified when client connections are accepted.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AsyncListen([MarshalAs(UnmanagedType.Interface)] nsIServerSocketListener aListener);
		
		/// <summary>
        /// Returns the port of this server socket.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetPortAttribute();
		
		/// <summary>
        /// Returns the address to which this server socket is bound.  Since a
        /// server socket may be bound to multiple network devices, this address
        /// may not necessarily be specific to a single network device.  In the
        /// case of an IP socket, the IP address field would be zerod out to
        /// indicate a server socket bound to all network devices.  Therefore,
        /// this method cannot be used to determine the IP address of the local
        /// system.  See nsIDNSService::myHostName if this is what you need.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr GetAddress();
	}
	
	/// <summary>
    /// nsIServerSocketListener
    ///
    /// This interface is notified whenever a server socket accepts a new connection.
    /// The transport is in the connected state, and read/write streams can be opened
    /// using the normal nsITransport API.  The address of the client can be found by
    /// calling the nsISocketTransport::GetAddress method or by inspecting
    /// nsISocketTransport::GetHost, which returns a string representation of the
    /// client's IP address (NOTE: this may be an IPv4 or IPv6 string literal).
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("836d98ec-fee2-4bde-b609-abd5e966eabd")]
	public interface nsIServerSocketListener
	{
		
		/// <summary>
        /// onSocketAccepted
        ///
        /// This method is called when a client connection is accepted.
        ///
        /// @param aServ
        /// The server socket.
        /// @param aTransport
        /// The connected socket transport.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnSocketAccepted([MarshalAs(UnmanagedType.Interface)] nsIServerSocket aServ, [MarshalAs(UnmanagedType.Interface)] nsISocketTransport aTransport);
		
		/// <summary>
        /// onStopListening
        ///
        /// This method is called when the listening socket stops for some reason.
        /// The server socket is effectively dead after this notification.
        ///
        /// @param aServ
        /// The server socket.
        /// @param aStatus
        /// The reason why the server socket stopped listening.  If the
        /// server socket was manually closed, then this value will be
        /// NS_BINDING_ABORTED.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnStopListening([MarshalAs(UnmanagedType.Interface)] nsIServerSocket aServ, int aStatus);
	}
}
