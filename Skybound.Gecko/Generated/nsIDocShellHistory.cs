// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIDocShellHistory.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIDocShellHistory </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("077af5fd-7450-48db-8f03-16617d441141")]
	public interface nsIDocShellHistory
	{
		
		/// <summary>
        /// Get the SHEntry associated with a child docshell
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISHEntry GetChildSHEntry(int aChildOffset);
		
		/// <summary>
        /// Add a Child SHEntry for a frameset page, given the child's loadtype.
        /// If aCloneChildren is true, then aCloneReference's children will be
        /// cloned onto aHistoryEntry.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddChildSHEntry([MarshalAs(UnmanagedType.Interface)] nsISHEntry aCloneReference, [MarshalAs(UnmanagedType.Interface)] nsISHEntry aHistoryEntry, int aChildOffset, uint aLoadType, [MarshalAs(UnmanagedType.Bool)] bool aCloneChilden);
		
		/// <summary>
        /// Whether this docshell should save entries in global history.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetUseGlobalHistoryAttribute();
		
		/// <summary>
        /// Whether this docshell should save entries in global history.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetUseGlobalHistoryAttribute([MarshalAs(UnmanagedType.Bool)] bool aUseGlobalHistory);
		
		/// <summary>
        /// Removes nsISHEntry objects related to this docshell from session history.
        /// Use this only with subdocuments, like iframes.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveFromSessionHistory();
		
		/// <summary>
        /// Set when an iframe/frame is added dynamically.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetCreatedDynamicallyAttribute();
		
		/// <summary>
        /// Set when an iframe/frame is added dynamically.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCreatedDynamicallyAttribute([MarshalAs(UnmanagedType.Bool)] bool aCreatedDynamically);
		
		/// <summary>
        /// Returns false for mLSHE, true for mOSHE
        /// </summary>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetCurrentSHEntry([MarshalAs(UnmanagedType.Interface)] out nsISHEntry aEntry);
	}
}
