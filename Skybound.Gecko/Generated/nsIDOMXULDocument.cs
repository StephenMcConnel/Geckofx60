// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIDOMXULDocument.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIDOMXULDocument.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIDOMXULDocument </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("b16d13c3-837d-445d-8f56-05d83d9b9eae")]
	public interface nsIDOMXULDocument
	{
		
		/// <summary>Member GetPopupNodeAttribute </summary>
		/// <returns>A nsIDOMNode </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMNode  GetPopupNodeAttribute();
		
		/// <summary>Member SetPopupNodeAttribute </summary>
		/// <param name='aPopupNode'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetPopupNodeAttribute([MarshalAs(UnmanagedType.Interface)] nsIDOMNode  aPopupNode);
		
		/// <summary>Member GetPopupRangeParentAttribute </summary>
		/// <returns>A nsIDOMNode </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMNode  GetPopupRangeParentAttribute();
		
		/// <summary>Member GetPopupRangeOffsetAttribute </summary>
		/// <returns>A System.Int32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Int32  GetPopupRangeOffsetAttribute();
		
		/// <summary>Member GetTooltipNodeAttribute </summary>
		/// <returns>A nsIDOMNode </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMNode  GetTooltipNodeAttribute();
		
		/// <summary>Member SetTooltipNodeAttribute </summary>
		/// <param name='aTooltipNode'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetTooltipNodeAttribute([MarshalAs(UnmanagedType.Interface)] nsIDOMNode  aTooltipNode);
		
		/// <summary>Member GetCommandDispatcherAttribute </summary>
		/// <returns>A nsIDOMXULCommandDispatcher </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMXULCommandDispatcher  GetCommandDispatcherAttribute();
		
		/// <summary>Member GetWidthAttribute </summary>
		/// <returns>A System.Int32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Int32  GetWidthAttribute();
		
		/// <summary>Member GetHeightAttribute </summary>
		/// <returns>A System.Int32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Int32  GetHeightAttribute();
		
		/// <summary>Member GetElementsByAttribute </summary>
		/// <param name='name'> </param>
		/// <param name='value'> </param>
		/// <returns>A nsIDOMNodeList</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMNodeList GetElementsByAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString name, [MarshalAs(UnmanagedType.LPStruct)] nsAString value);
		
		/// <summary>Member GetElementsByAttributeNS </summary>
		/// <param name='namespaceURI'> </param>
		/// <param name='name'> </param>
		/// <param name='value'> </param>
		/// <returns>A nsIDOMNodeList</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMNodeList GetElementsByAttributeNS([MarshalAs(UnmanagedType.LPStruct)] nsAString namespaceURI, [MarshalAs(UnmanagedType.LPStruct)] nsAString name, [MarshalAs(UnmanagedType.LPStruct)] nsAString value);
		
		/// <summary>Member AddBroadcastListenerFor </summary>
		/// <param name='broadcaster'> </param>
		/// <param name='observer'> </param>
		/// <param name='attr'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddBroadcastListenerFor([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  broadcaster, [MarshalAs(UnmanagedType.Interface)] nsIDOMElement  observer, [MarshalAs(UnmanagedType.LPStruct)] nsAString attr);
		
		/// <summary>Member RemoveBroadcastListenerFor </summary>
		/// <param name='broadcaster'> </param>
		/// <param name='observer'> </param>
		/// <param name='attr'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveBroadcastListenerFor([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  broadcaster, [MarshalAs(UnmanagedType.Interface)] nsIDOMElement  observer, [MarshalAs(UnmanagedType.LPStruct)] nsAString attr);
		
		/// <summary>Member Persist </summary>
		/// <param name='id'> </param>
		/// <param name='attr'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Persist([MarshalAs(UnmanagedType.LPStruct)] nsAString id, [MarshalAs(UnmanagedType.LPStruct)] nsAString attr);
		
		/// <summary>Member GetBoxObjectFor </summary>
		/// <param name='elt'> </param>
		/// <returns>A nsIBoxObject</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIBoxObject GetBoxObjectFor([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  elt);
		
		/// <summary>Member LoadOverlay </summary>
		/// <param name='url'> </param>
		/// <param name='aObserver'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LoadOverlay([MarshalAs(UnmanagedType.LPStruct)] nsAString url, [MarshalAs(UnmanagedType.Interface)] nsIObserver  aObserver);
	}
}
