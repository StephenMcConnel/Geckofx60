// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIDOMNSEventTarget.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>
    /// The nsIDOMNSEventTarget interface is an extension to the standard
    /// nsIDOMEventTarget interface, implemented by all event targets in
    /// the Document Object Model.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("c8b658d5-d583-472a-a7ec-cbc2e79f75dd")]
	public interface nsIDOMNSEventTarget
	{
		
		/// <summary>
        /// This method is the same as the addEventListener() method defined
        /// in nsIDOMEventTarget, but it takes one additional argument which
        /// lets callers control whether or not they want to receive
        /// untrusted events (synthetic events generated by untrusted code)
        ///
        /// @param   type See the type argument to the same method in
        /// nsIDOMEventTarget.
        /// @param   listener See the listener argument to the same method in
        /// nsIDOMEventTarget.
        /// @param   useCapture See the listener argument to the same method in
        /// nsIDOMEventTarget.
        /// @param   wantsUntrusted If false, the listener will not receive any
        /// untrusted events (see above), if true, the
        /// listener will receive events whether or not
        /// they're trusted
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddEventListener([MarshalAs(UnmanagedType.LPStruct)] nsAString type, [MarshalAs(UnmanagedType.Interface)] nsIDOMEventListener listener, bool useCapture, bool wantsUntrusted);
		
		/// <summary>
        /// The default script type (language) for events firing on this target.
        /// Must be one of the nsIProgrammingLanguage enums, but must not be
        /// nsIProgrammingLanguage::UNKNOWN.  Most implementations will provide
        /// a default type of nsIProgrammingLanguage::JAVASCRIPT.
        ///
        /// All targets must support fetching the script language, but not all
        /// script targets must support changing it - ie, some targets may only
        /// support event handlers written in their default language.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetScriptTypeIDAttribute();
		
		/// <summary>
        /// The default script type (language) for events firing on this target.
        /// Must be one of the nsIProgrammingLanguage enums, but must not be
        /// nsIProgrammingLanguage::UNKNOWN.  Most implementations will provide
        /// a default type of nsIProgrammingLanguage::JAVASCRIPT.
        ///
        /// All targets must support fetching the script language, but not all
        /// script targets must support changing it - ie, some targets may only
        /// support event handlers written in their default language.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetScriptTypeIDAttribute(uint aScriptTypeID);
	}
}
