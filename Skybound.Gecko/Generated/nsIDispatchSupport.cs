// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIDispatchSupport.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIDispatchSupport </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("38df70e9-12f8-4732-af91-df36c38dc6f6")]
	public interface nsIDispatchSupport
	{
		
		/// <summary>
        /// Converts a COM Variant to a jsval.
        /// @param comvar The COM Variant to be converted.
        /// @param val The jsval to receive the converted value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void COMVariant2JSVal(System.IntPtr  comvar, out System.IntPtr val);
		
		/// <summary>
        /// Converts a jsval to a COM Variant
        /// @param var The jsval to be converted.
        /// @param comvar The COM Variant to receive the converted value
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void JSVal2COMVariant(System.IntPtr var, out System.IntPtr  comvar);
		
		/// <summary>
        /// Test if the class is safe to host.
        /// @param clsid The nsID representation of the CLSID to test.
        /// @param classExists Returns containing PR_FALSE if the class is
        /// not registered.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsClassSafeToHost(System.IntPtr  cx, ref System.Guid cid, System.Boolean  capsCheck, out System.Boolean  classExists);
		
		/// <summary>
        /// Test if the specified class is marked safe for scripting.
        /// @param cid The nsID representation of the CLSID to test.
        /// @param classExists Returns containing PR_FALSE if the class is not
        /// registered.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsClassMarkedSafeForScripting(ref System.Guid cid, out System.Boolean  classExists);
		
		/// <summary>
        /// Test if the instantiated object is safe for scripting on the specified
        /// interface.
        /// @param theObject The object to test (an IUnknown cast into a void *).
        /// @param iid The interface to test if it is safe for scripting on.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsObjectSafeForScripting(System.IntPtr  theObject, ref System.Guid id);
		
		/// <summary>
        /// Return the ActiveX security and hosting flags. See nsIActiveXSecurityPolicy
        /// for list of flags.
        /// @param context The context for which flags are requested. At present the
        /// only valid value is nsnull.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetHostingFlags([MarshalAs(UnmanagedType.LPStr)] System.String  aContext);
	}
}
