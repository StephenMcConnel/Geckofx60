// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIDispatchSupport.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIDispatchSupport.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIDispatchSupport </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("38df70e9-12f8-4732-af91-df36c38dc6f6")]
	public interface nsIDispatchSupport
	{
		
		/// <summary>Member COMVariant2JSVal </summary>
		/// <param name='comvar'> </param>
		/// <param name='val'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void COMVariant2JSVal(System.IntPtr  comvar, out System.IntPtr val);
		
		/// <summary>Member JSVal2COMVariant </summary>
		/// <param name='var'> </param>
		/// <param name='comvar'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void JSVal2COMVariant(System.IntPtr var, out System.IntPtr  comvar);
		
		/// <summary>Member IsClassSafeToHost </summary>
		/// <param name='cx'> </param>
		/// <param name='cid'> </param>
		/// <param name='capsCheck'> </param>
		/// <param name='classExists'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsClassSafeToHost(System.IntPtr  cx, ref System.Guid cid, System.Boolean  capsCheck, out System.Boolean  classExists);
		
		/// <summary>Member IsClassMarkedSafeForScripting </summary>
		/// <param name='cid'> </param>
		/// <param name='classExists'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsClassMarkedSafeForScripting(ref System.Guid cid, out System.Boolean  classExists);
		
		/// <summary>Member IsObjectSafeForScripting </summary>
		/// <param name='theObject'> </param>
		/// <param name='id'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsObjectSafeForScripting(System.IntPtr  theObject, ref System.Guid id);
		
		/// <summary>Member GetHostingFlags </summary>
		/// <param name='aContext'> </param>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetHostingFlags([MarshalAs(UnmanagedType.LPStr)] System.String  aContext);
	}
}
