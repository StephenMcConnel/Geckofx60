// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file amIInstallTrigger.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;

	
	
	/// <summary>
    /// A callback function that webpages can implement to be notified when triggered
    /// installs complete.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("bb22f5c0-3ca1-48f6-873c-54e87987700f")]
	public interface amIInstallCallback
	{
		
		/// <summary>
        /// Called when an install completes or fails.
        ///
        /// @param  aUrl
        /// The url of the add-on being installed
        /// @param  aStatus
        /// 0 if the install was successful or negative if not
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnInstallEnded([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aUrl, int aStatus);
	}
	
	/// <summary>
    /// The interface for the InstallTrigger object available to all websites.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("14b4e84d-001c-4403-a608-52a67ffaab40")]
	public interface amIInstallTrigger
	{
		
		/// <summary>
        /// Tests if installation is enabled.
        ///
        /// @deprecated Use "enabled" in the future.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool UpdateEnabled();
		
		/// <summary>
        /// Tests if installation is enabled.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool Enabled();
		
		/// <summary>
        /// Starts a new installation of a set of add-ons.
        ///
        /// @param  aArgs
        /// The add-ons to install. This should be a JS object, each property
        /// is the name of an add-on to be installed. The value of the
        /// property should either be a string URL, or an object with the
        /// following properties:
        /// * URL for the add-on's URL
        /// * IconURL for an icon for the add-on
        /// * Hash for a hash of the add-on
        /// @param  aCallback
        /// A callback to call as each installation succeeds or fails
        /// @return true if the installations were successfully started
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool Install([MarshalAs(UnmanagedType.Interface)] nsIVariant aArgs, amIInstallCallback aCallback);
		
		/// <summary>
        /// Starts installing a new add-on. This method is deprecated, please use
        /// "install" in the future.
        ///
        /// @param  aType
        /// Unused, retained for backwards compatibility
        /// @param  aUrl
        /// The URL of the add-on
        /// @param  aSkin
        /// Unused, retained for backwards compatibility
        /// @return true if the installation was successfully started
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool InstallChrome(uint aType, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aUrl, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aSkin);
		
		/// <summary>
        /// Starts installing a new add-on.
        ///
        /// @deprecated use "install" in the future.
        ///
        /// @param  aUrl
        /// The URL of the add-on
        /// @param  aFlags
        /// Unused, retained for backwards compatibility
        /// @return true if the installation was successfully started
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool StartSoftwareUpdate([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase aUrl, int aFlags);
	}
	
	/// <summary>amIInstallTriggerConsts </summary>
	public class amIInstallTriggerConsts
	{
		
		// <summary>
        // Retained for backwards compatibility.
        // </summary>
		public const long SKIN = 1;
		
		// 
		public const long LOCALE = 2;
		
		// 
		public const long CONTENT = 4;
		
		// 
		public const long PACKAGE = 7;
	}
}
