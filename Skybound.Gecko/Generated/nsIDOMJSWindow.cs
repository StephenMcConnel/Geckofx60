// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIDOMJSWindow.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIDOMJSWindow </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("14efb76c-5bd6-449e-b36f-0cbd22981f20")]
	public interface nsIDOMJSWindow
	{
		
		/// <summary>Member Dump </summary>
		/// <param name='str'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Dump([MarshalAs(UnmanagedType.LPStruct)] nsAString str);
		
		/// <summary>
        /// These methods take typeless arguments and optional arguments, the
        /// first argument is either a function or a string, the second
        /// argument must be a number (ms) and the rest of the arguments (2
        /// ... n) are passed to the callback function
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int SetTimeout();
		
		/// <summary>Member SetInterval </summary>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int SetInterval();
		
		/// <summary>
        /// These methods take one optional argument that's the timer ID to
        /// clear. Often in existing code these methods are passed undefined,
        /// which is a nop so we need to support that as well.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ClearTimeout();
		
		/// <summary>Member ClearInterval </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ClearInterval();
		
		/// <summary>
        /// This method is here for backwards compatibility with 4.x only,
        /// its implementation is a no-op
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetResizable(System.Boolean  resizable);
		
		/// <summary>
        /// @deprecated These are old Netscape 4 methods. Do not use,
        /// the implementation is no-op.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CaptureEvents(System.Int32  eventFlags);
		
		/// <summary>Member ReleaseEvents </summary>
		/// <param name='eventFlags'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ReleaseEvents(System.Int32  eventFlags);
		
		/// <summary>Member RouteEvent </summary>
		/// <param name='evt'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RouteEvent([MarshalAs(UnmanagedType.Interface)] nsIDOMEvent  evt);
		
		/// <summary>Member EnableExternalCapture </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EnableExternalCapture();
		
		/// <summary>Member DisableExternalCapture </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DisableExternalCapture();
		
		/// <summary>
        /// This is the scriptable version of nsIDOMWindowInternal::open()
        /// that takes 3 optional arguments. Its binary name is OpenJS to
        /// avoid colliding with nsIDOMWindowInternal::open(), which has the
        /// same signature. The reason we can't have that collision is that
        /// the implementation needs to know whether it was called from JS or
        /// not.
        ///
        /// IOW, DO NOT CALL THIS FROM C++
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMWindow Open([MarshalAs(UnmanagedType.LPStruct)] nsAString url, [MarshalAs(UnmanagedType.LPStruct)] nsAString name, [MarshalAs(UnmanagedType.LPStruct)] nsAString options);
		
		/// <summary>
        /// This is the scriptable version of
        /// nsIDOMWindowInternal::openDialog() that takes 3 optional
        /// arguments, plus any additional arguments are passed on as
        /// arguments on the dialog's window object (window.arguments).
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMWindow OpenDialog([MarshalAs(UnmanagedType.LPStruct)] nsAString url, [MarshalAs(UnmanagedType.LPStruct)] nsAString name, [MarshalAs(UnmanagedType.LPStruct)] nsAString options);
		
		/// <summary>
        /// window.frames in Netscape 4.x and IE is just a reference to the
        /// window itself (i.e. window.frames === window), but this doesn't
        /// make sense from a generic API point of view so that's why this is
        /// JS specific.
        ///
        /// This property is "replaceable" in JavaScript.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMWindow  GetFramesAttribute();
	}
}
