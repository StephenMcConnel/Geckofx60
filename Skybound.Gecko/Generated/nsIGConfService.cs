// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIGConfService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIGConfService </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("5009acae-6973-48c3-b6d6-52c692cc5d9d")]
	public interface nsIGConfService
	{
		
		/// <summary>
        ///Basic registry access </summary>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetBool([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String key);
		
		/// <summary>Member GetString </summary>
		/// <param name='key'> </param>
		/// <param name='retval'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetString([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String key, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String retval);
		
		/// <summary>Member GetInt </summary>
		/// <param name='key'> </param>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetInt([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String key);
		
		/// <summary>Member GetFloat </summary>
		/// <param name='key'> </param>
		/// <returns>A System.Single</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Single GetFloat([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String key);
		
		/// <summary>
        /// Use this to return any list items in GConf, this will return
        /// an array of UTF16 nsISupportsString's.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIArray GetStringList([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String key);
		
		/// <summary>Member SetBool </summary>
		/// <param name='key'> </param>
		/// <param name='value'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetBool([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String key, [MarshalAs(UnmanagedType.Bool)] bool value);
		
		/// <summary>Member SetString </summary>
		/// <param name='key'> </param>
		/// <param name='value'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetString([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String key, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String value);
		
		/// <summary>Member SetInt </summary>
		/// <param name='key'> </param>
		/// <param name='value'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetInt([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String key, int value);
		
		/// <summary>Member SetFloat </summary>
		/// <param name='key'> </param>
		/// <param name='value'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetFloat([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String key, System.Single value);
		
		/// <summary>
        /// Look up the handler for a protocol under the
        /// /desktop/gnome/url-handlers hierarchy.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetAppForProtocol([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String scheme, [MarshalAs(UnmanagedType.Bool)] out bool enabled, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String retval);
		
		/// <summary>
        /// Check whether the handler for a scheme requires a terminal to run.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool HandlerRequiresTerminal([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String scheme);
		
		/// <summary>
        /// Set the handler for a protocol, marking it as enabled.
        /// This removes any GnomeVFSMimeApp association for the protocol.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetAppForProtocol([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String scheme, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String command);
	}
}
