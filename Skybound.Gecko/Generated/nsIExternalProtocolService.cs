// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIExternalProtocolService.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIExternalProtocolService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIExternalProtocolService </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("70f93b7a-3ec6-4bcb-b093-92d9984c9f83")]
	public interface nsIExternalProtocolService
	{
		
		/// <summary>Member ExternalProtocolHandlerExists </summary>
		/// <param name='aProtocolScheme'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool ExternalProtocolHandlerExists([MarshalAs(UnmanagedType.LPStr)] System.String  aProtocolScheme);
		
		/// <summary>Member IsExposedProtocol </summary>
		/// <param name='aProtocolScheme'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsExposedProtocol([MarshalAs(UnmanagedType.LPStr)] System.String  aProtocolScheme);
		
		/// <summary>Member GetProtocolHandlerInfo </summary>
		/// <param name='aProtocolScheme'> </param>
		/// <returns>A nsIHandlerInfo</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIHandlerInfo GetProtocolHandlerInfo([MarshalAs(UnmanagedType.LPStruct)] nsAString  aProtocolScheme);
		
		/// <summary>Member GetProtocolHandlerInfoFromOS </summary>
		/// <param name='aProtocolScheme'> </param>
		/// <param name='aFound'> </param>
		/// <returns>A nsIHandlerInfo</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIHandlerInfo GetProtocolHandlerInfoFromOS([MarshalAs(UnmanagedType.LPStruct)] nsAString  aProtocolScheme, out System.Boolean  aFound);
		
		/// <summary>Member SetProtocolHandlerDefaults </summary>
		/// <param name='aHandlerInfo'> </param>
		/// <param name='aOSHandlerExists'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetProtocolHandlerDefaults([MarshalAs(UnmanagedType.Interface)] nsIHandlerInfo  aHandlerInfo, System.Boolean  aOSHandlerExists);
		
		/// <summary>Member LoadUrl </summary>
		/// <param name='aURL'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LoadUrl([MarshalAs(UnmanagedType.Interface)] nsIURI  aURL);
		
		/// <summary>Member LoadURI </summary>
		/// <param name='aURI'> </param>
		/// <param name='aWindowContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LoadURI([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI, [MarshalAs(UnmanagedType.Interface)] nsIInterfaceRequestor  aWindowContext);
		
		/// <summary>Member GetApplicationDescription </summary>
		/// <param name='aScheme'> </param>
		/// <returns>A nsAString</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString GetApplicationDescription([MarshalAs(UnmanagedType.LPStruct)] nsAString  aScheme);
	}
}
