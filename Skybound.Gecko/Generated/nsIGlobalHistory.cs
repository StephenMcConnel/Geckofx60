// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIGlobalHistory.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>
    ///
    /// The interface to global history.
    ///
    /// @status DEPRECATED. This interface is still accepted, but new
    /// implementations should use nsIGlobalHistory2.
    /// @version 1.0
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("9491C383-E3C4-11d2-BDBE-0050040A9B44")]
	public interface nsIGlobalHistory
	{
		
		/// <summary>
        /// addPage
        /// Add a page to the history
        ///
        /// @param aURL the url to the page
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddPage([MarshalAs(UnmanagedType.LPStr)] System.String  aURL);
		
		/// <summary>
        /// isVisited
        /// Checks to see if the given page is in history
        ///
        /// @return true if a page has been passed into addPage().
        /// @param aURL the url to the page
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsVisited([MarshalAs(UnmanagedType.LPStr)] System.String  aURL);
	}
}
