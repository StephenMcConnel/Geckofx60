// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIThreadPool.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIThreadPool.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIThreadPoolListener </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ef194cab-3f86-4b61-b132-e5e96a79e5d1")]
	public interface nsIThreadPoolListener
	{
		
		/// <summary>Member OnThreadCreated </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnThreadCreated();
		
		/// <summary>Member OnThreadShuttingDown </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnThreadShuttingDown();
	}
	
	/// <summary>nsIThreadPool </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("d628159b-1a03-4985-aa77-43122eb23bfc")]
	public interface nsIThreadPool : nsIEventTarget
	{
		
		/// <summary>Member Dispatch </summary>
		/// <param name='event'> </param>
		/// <param name='flags'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Dispatch([MarshalAs(UnmanagedType.Interface)] nsIRunnable  @event, System.UInt32  flags);
		
		/// <summary>Member IsOnCurrentThread </summary>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool IsOnCurrentThread();
		
		/// <summary>Member Shutdown </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Shutdown();
		
		/// <summary>Member GetThreadLimitAttribute </summary>
		/// <returns>A System.UInt32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetThreadLimitAttribute();
		
		/// <summary>Member SetThreadLimitAttribute </summary>
		/// <param name='aThreadLimit'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetThreadLimitAttribute(System.UInt32  aThreadLimit);
		
		/// <summary>Member GetIdleThreadLimitAttribute </summary>
		/// <returns>A System.UInt32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetIdleThreadLimitAttribute();
		
		/// <summary>Member SetIdleThreadLimitAttribute </summary>
		/// <param name='aIdleThreadLimit'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetIdleThreadLimitAttribute(System.UInt32  aIdleThreadLimit);
		
		/// <summary>Member GetIdleThreadTimeoutAttribute </summary>
		/// <returns>A System.UInt32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetIdleThreadTimeoutAttribute();
		
		/// <summary>Member SetIdleThreadTimeoutAttribute </summary>
		/// <param name='aIdleThreadTimeout'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetIdleThreadTimeoutAttribute(System.UInt32  aIdleThreadTimeout);
		
		/// <summary>Member GetListenerAttribute </summary>
		/// <returns>A nsIThreadPoolListener </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIThreadPoolListener  GetListenerAttribute();
		
		/// <summary>Member SetListenerAttribute </summary>
		/// <param name='aListener'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetListenerAttribute([MarshalAs(UnmanagedType.Interface)] nsIThreadPoolListener  aListener);
	}
}
