// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIScriptEventManager.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIScriptEventManager </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("b6427ace-dc77-495b-ab21-43baeb52bc27")]
	public interface nsIScriptEventManager
	{
		
		/// <summary>
        /// FindEventHandler:
        ///
        /// Returns a script event handler for the given object and event name.
        ///
        /// @param aObjectName    Name of the object raising the event.
        ///
        /// @param aEventName     Name of the event being raised.
        ///
        /// @param aArgCount      Number of arguments expected by the event handler.
        ///
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISupports FindEventHandler([MarshalAs(UnmanagedType.LPStruct)] nsAString aObjectName, [MarshalAs(UnmanagedType.LPStruct)] nsAString aEventName, System.UInt32  aArgCount);
		
		/// <summary>
        ///
        /// InvokeEventHandler:
        ///
        /// Executes the script handler that was returned from FindEventHandler.
        ///
        /// @param aHandler       Script event handler that was returned from
        /// FindEventHandler.
        ///
        /// @param aTargetObject  Object to which the script handler is bound.
        ///
        /// @param aArgs          Array of arguments passed to the script handler.
        /// This is an array of jsvals.
        ///
        /// @param aArgCount      Number of elements in the aArgs array.
        ///
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InvokeEventHandler([MarshalAs(UnmanagedType.Interface)] nsISupports  aHandler, [MarshalAs(UnmanagedType.Interface)] nsISupports  aTargetObject, System.IntPtr  aArgs, System.UInt32  aArgCount);
	}
}
