// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIMemoryReporter.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIMemoryReporter </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("d298b942-3e66-4cd3-9ff5-46abc69147a7")]
	public interface nsIMemoryReporter
	{
		
		/// <summary>
        /// The path that this memory usage should be reported under.  Paths can
        /// begin with a process name plus a colon, eg "Content:", but this is not
        /// necessary for the main process.  After the process name, paths are
        /// '/'-delimited, eg. "a/b/c".  There are two categories of paths.
        ///
        /// - Paths starting with "explicit" represent non-overlapping regions of
        /// memory that have been explicitly allocated with an OS-level allocation
        /// (eg. mmap/VirtualAlloc/vm_allocate) or a heap-level allocation (eg.
        /// malloc/calloc/operator new).  Each one can be viewed as representing a
        /// path in a tree from the root node ("explicit") to a node lower in the
        /// tree; this lower node does not have to be a leaf node.
        ///
        /// So, for example, "explicit/a/b", "explicit/a/c", "explicit/d",
        /// "explicit/d/e", and "explicit/d/f" define this tree:
        ///
        /// explicit
        /// |--a
        /// |  |--b [*]
        /// |  \--c [*]
        /// \--d [*]
        /// |--e [*]
        /// \--f [*]
        ///
        /// Nodes marked with a [*] have a reporter.
        ///
        /// - All other paths represent cross-cuttings memory regions, ie. ones that
        /// may overlap arbitrarily with regions in the "explicit" tree.
        /// </summary>
		[return: MarshalAs(UnmanagedType.LPStr)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		string GetPathAttribute();
		
		/// <summary>
        /// The memory kind, see MR_* above.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetKindAttribute();
		
		/// <summary>
        /// A human-readable description of this memory usage report.
        /// </summary>
		[return: MarshalAs(UnmanagedType.LPStr)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		string GetDescriptionAttribute();
		
		/// <summary>
        /// The current amount of memory in use, as reported by this memory
        /// reporter.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetMemoryUsedAttribute();
	}
	
	/// <summary>nsIMemoryReporterManager </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("7c62de18-1edd-40f8-9da2-a8c622763074")]
	public interface nsIMemoryReporterManager
	{
		
		/// <summary>
        /// Return an enumerator of nsIMemoryReporters that are currently registered.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISimpleEnumerator EnumerateReporters();
		
		/// <summary>
        /// Register the given nsIMemoryReporter.  It is an error to register
        /// more than one reporter with the same path.  After a reporter is
        /// registered, it will be available via enumerateReporters().  The
        /// Manager service will hold a strong reference to the given reporter.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RegisterReporter([MarshalAs(UnmanagedType.Interface)] nsIMemoryReporter reporter);
		
		/// <summary>
        /// Unregister the given memory reporter.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnregisterReporter([MarshalAs(UnmanagedType.Interface)] nsIMemoryReporter reporter);
		
		/// <summary>
        /// Initialize.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Init();
	}
}
