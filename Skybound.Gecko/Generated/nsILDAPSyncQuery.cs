// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsILDAPSyncQuery.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsILDAPSyncQuery </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0308fb36-1dd2-11b2-b16f-8510e8c5311a")]
	public interface nsILDAPSyncQuery
	{
		
		/// <summary>
        /// getQueryResults
        ///
        /// Create a new LDAP connection do a synchronous LDAP search and return
        /// the results.
        /// @param aServerURL - LDAP URL with parameters to a LDAP search
        /// ("ldap://host/base?attributes?one/sub?filter")
        /// @param aProtocolVersion - LDAP protocol version to use for connection
        /// (nsILDAPConnection.idl has symbolic constants)
        /// @return results
        /// </summary>
		[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Skybound.Gecko.CustomMarshalers.WStringMarshaler")]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		string GetQueryResults(System.IntPtr aServerURL, uint aProtocolVersion);
	}
}
