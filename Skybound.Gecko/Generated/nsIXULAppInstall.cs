// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIXULAppInstall.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>
    /// Installation and management of XUL applications.
    ///
    /// @status IN_FLUX   This interface is not stable and will change in the
    /// future.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("800ace15-6b38-48c4-b057-7928378f6cd2")]
	public interface nsIXULAppInstall
	{
		
		/// <summary>
        /// Install a XUL application into a form that can be run by the native
        /// operating system.
        ///
        /// @param aAppFile   Directory or a zip file containing a
        /// XULRunner package (with the required application.ini
        /// file in the root).
        /// @param aDirectory Path specifying the location to install the
        /// application. If null, an appropriate default install
        /// location will be used. e.g. "C:\Program Files\<Vendor>"
        /// on Windows.
        /// @param aLeafName  The leaf name of the application directory. If empty
        /// an appropriate default will be chosen. e.g. "Simple.app"
        /// on Mac.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InstallApplication([MarshalAs(UnmanagedType.Interface)] nsIFile aAppFile, [MarshalAs(UnmanagedType.Interface)] nsIFile aDirectory, [MarshalAs(UnmanagedType.LPStruct)] nsAString aLeafName);
	}
}
