// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIOfflineCacheUpdate.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIOfflineCacheUpdate.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIOfflineCacheUpdateObserver </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("47360d57-8ef4-4a5d-8865-1a27a739ad1a")]
	public interface nsIOfflineCacheUpdateObserver
	{
		
		/// <summary>Member UpdateStateChanged </summary>
		/// <param name='aUpdate'> </param>
		/// <param name='state'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UpdateStateChanged([MarshalAs(UnmanagedType.Interface)] nsIOfflineCacheUpdate  aUpdate, System.UInt32  state);
		
		/// <summary>Member ApplicationCacheAvailable </summary>
		/// <param name='applicationCache'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ApplicationCacheAvailable([MarshalAs(UnmanagedType.Interface)] nsIApplicationCache  applicationCache);
	}
	
	/// <summary>nsIOfflineCacheUpdate </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("24605d81-8cf9-4021-8575-7f39aacbf31a")]
	public interface nsIOfflineCacheUpdate
	{
		
		/// <summary>Member GetStatusAttribute </summary>
		/// <returns>A System.UInt16</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetStatusAttribute();
		
		/// <summary>Member GetPartialAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetPartialAttribute();
		
		/// <summary>Member GetIsUpgradeAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetIsUpgradeAttribute();
		
		/// <summary>Member GetUpdateDomainAttribute </summary>
		/// <param name='aUpdateDomain'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetUpdateDomainAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aUpdateDomain);
		
		/// <summary>Member GetManifestURIAttribute </summary>
		/// <returns>A nsIURI </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIURI  GetManifestURIAttribute();
		
		/// <summary>Member GetSucceededAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetSucceededAttribute();
		
		/// <summary>Member Init </summary>
		/// <param name='aManifestURI'> </param>
		/// <param name='aDocumentURI'> </param>
		/// <param name='aDocument'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Init([MarshalAs(UnmanagedType.Interface)] nsIURI  aManifestURI, [MarshalAs(UnmanagedType.Interface)] nsIURI  aDocumentURI, [MarshalAs(UnmanagedType.Interface)] nsIDOMDocument  aDocument);
		
		/// <summary>Member InitPartial </summary>
		/// <param name='aManifestURI'> </param>
		/// <param name='aClientID'> </param>
		/// <param name='aDocumentURI'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InitPartial([MarshalAs(UnmanagedType.Interface)] nsIURI  aManifestURI, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aClientID, [MarshalAs(UnmanagedType.Interface)] nsIURI  aDocumentURI);
		
		/// <summary>Member AddDynamicURI </summary>
		/// <param name='aURI'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddDynamicURI([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI);
		
		/// <summary>Member Schedule </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Schedule();
		
		/// <summary>Member AddObserver </summary>
		/// <param name='aObserver'> </param>
		/// <param name='aHoldWeak'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddObserver([MarshalAs(UnmanagedType.Interface)] nsIOfflineCacheUpdateObserver  aObserver, System.Boolean  aHoldWeak);
		
		/// <summary>Member RemoveObserver </summary>
		/// <param name='aObserver'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveObserver([MarshalAs(UnmanagedType.Interface)] nsIOfflineCacheUpdateObserver  aObserver);
	}
	
	/// <summary>nsIOfflineCacheUpdateService </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("6fd2030f-7b00-4102-a0e3-d73078821eb1")]
	public interface nsIOfflineCacheUpdateService
	{
		
		/// <summary>Member GetNumUpdatesAttribute </summary>
		/// <returns>A System.UInt32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetNumUpdatesAttribute();
		
		/// <summary>Member GetUpdate </summary>
		/// <param name='index'> </param>
		/// <returns>A nsIOfflineCacheUpdate</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIOfflineCacheUpdate GetUpdate(System.UInt32  index);
		
		/// <summary>Member ScheduleUpdate </summary>
		/// <param name='aManifestURI'> </param>
		/// <param name='aDocumentURI'> </param>
		/// <param name='aWindow'> </param>
		/// <returns>A nsIOfflineCacheUpdate</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIOfflineCacheUpdate ScheduleUpdate([MarshalAs(UnmanagedType.Interface)] nsIURI  aManifestURI, [MarshalAs(UnmanagedType.Interface)] nsIURI  aDocumentURI, [MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  aWindow);
		
		/// <summary>Member ScheduleOnDocumentStop </summary>
		/// <param name='aManifestURI'> </param>
		/// <param name='aDocumentURI'> </param>
		/// <param name='aDocument'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ScheduleOnDocumentStop([MarshalAs(UnmanagedType.Interface)] nsIURI  aManifestURI, [MarshalAs(UnmanagedType.Interface)] nsIURI  aDocumentURI, [MarshalAs(UnmanagedType.Interface)] nsIDOMDocument  aDocument);
		
		/// <summary>Member OfflineAppAllowed </summary>
		/// <param name='aPrincipal'> </param>
		/// <param name='aPrefBranch'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool OfflineAppAllowed([MarshalAs(UnmanagedType.Interface)] nsIPrincipal  aPrincipal, [MarshalAs(UnmanagedType.Interface)] nsIPrefBranch  aPrefBranch);
		
		/// <summary>Member OfflineAppAllowedForURI </summary>
		/// <param name='aURI'> </param>
		/// <param name='aPrefBranch'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool OfflineAppAllowedForURI([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI, [MarshalAs(UnmanagedType.Interface)] nsIPrefBranch  aPrefBranch);
	}
}
