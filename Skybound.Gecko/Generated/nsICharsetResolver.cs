// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsICharsetResolver.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsICharsetResolver </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("d143a084-b626-4614-845f-41f3ca43a674")]
	public interface nsICharsetResolver
	{
		
		/// <summary>
        /// Called to resolve the charset that should be used for parsing the
        /// document being loaded from aChannel.
        ///
        /// If the charset cannot be resolved, but the implementation of
        /// nsICharsetResolver wants to be notified of the final resolved charset
        /// when one is available, it can set wantCharset to true.  If this is done,
        /// the caller of requestCharset is responsible for calling
        /// notifyResovedCharset and passing it the final resolved charset and the
        /// closure that requestCharset set.
        ///
        /// @param aWebNavigation the nsIWebNavigation the document is being loaded
        /// in.  May be null.
        /// @param aChannel the channel the document is coming in from.
        /// @param aWantCharset gets set to true if notifyResolvedCharset should be
        /// called with the given closure object.
        /// @param aClosure a resulting object which should be passed
        /// to notifyResolvedCharset if wantCharset is set to
        /// true.
        /// @returns the resolved charset, or the empty string if no
        /// charset could be determined.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RequestCharset([MarshalAs(UnmanagedType.Interface)] nsIWebNavigation aWebNavigation, [MarshalAs(UnmanagedType.Interface)] nsIChannel aChannel, [MarshalAs(UnmanagedType.Bool)] out bool aWantCharset, [MarshalAs(UnmanagedType.Interface)] out nsISupports aClosure, [MarshalAs(UnmanagedType.LPStruct)] nsAString retval);
		
		/// <summary>
        /// notifyResolvedCharset
        ///
        /// some implementations may request that they be notified when the
        /// charset is actually detected.
        ///
        /// @param charset the detected charset
        /// @param closure the closre returned by detectCharset() above
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyResolvedCharset([MarshalAs(UnmanagedType.LPStruct)] nsAString charset, [MarshalAs(UnmanagedType.Interface)] nsISupports closure);
	}
}
