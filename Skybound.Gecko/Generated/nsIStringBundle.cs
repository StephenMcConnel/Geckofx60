// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIStringBundle.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIStringBundle </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("D85A17C2-AA7C-11d2-9B8C-00805F8A16D9")]
	public interface nsIStringBundle
	{
		
		/// <summary>Member GetStringFromID </summary>
		/// <param name='aID'> </param>
		/// <returns>A System.String</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		string GetStringFromID(System.Int32  aID);
		
		/// <summary>Member GetStringFromName </summary>
		/// <param name='aName'> </param>
		/// <returns>A System.String</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		string GetStringFromName([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Skybound.Gecko.XpCom.WStringMarshaler")] string aName);
		
		/// <summary>
        /// this uses nsTextFormatter::smprintf to do the dirty work.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		string FormatStringFromID(System.Int32  aID, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Skybound.Gecko.XpCom.WStringMarshaler", SizeParamIndex=2)] string @params, System.UInt32  length);
		
		/// <summary>Member FormatStringFromName </summary>
		/// <param name='aName'> </param>
		/// <param name='params'> </param>
		/// <param name='length'> </param>
		/// <returns>A System.String</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		string FormatStringFromName([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Skybound.Gecko.XpCom.WStringMarshaler")] string aName, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Skybound.Gecko.XpCom.WStringMarshaler", SizeParamIndex=2)] string @params, System.UInt32  length);
		
		/// <summary>
        ///Implements nsISimpleEnumerator, replaces nsIEnumerator
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISimpleEnumerator GetSimpleEnumeration();
	}
	
	/// <summary>nsIStringBundleService </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("D85A17C0-AA7C-11d2-9B8C-00805F8A16D9")]
	public interface nsIStringBundleService
	{
		
		/// <summary>Member CreateBundle </summary>
		/// <param name='aURLSpec'> </param>
		/// <returns>A nsIStringBundle</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStringBundle CreateBundle([MarshalAs(UnmanagedType.LPStr)] System.String  aURLSpec);
		
		/// <summary>Member CreateExtensibleBundle </summary>
		/// <param name='aRegistryKey'> </param>
		/// <returns>A nsIStringBundle</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStringBundle CreateExtensibleBundle([MarshalAs(UnmanagedType.LPStr)] System.String  aRegistryKey);
		
		/// <summary>
        /// Formats a message string from a status code and status arguments.
        /// @param aStatus - The status code. This is mapped into a string ID and
        /// and used in the string lookup process (see nsIErrorService).
        /// @param aStatusArg - The status message argument(s). Multiple arguments
        /// can be separated by newline ('\n') characters.
        /// @return the formatted message
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		string FormatStatusMessage(System.Int32  aStatus, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Skybound.Gecko.XpCom.WStringMarshaler")] string aStatusArg);
		
		/// <summary>
        /// flushes the string bundle cache - useful when the locale changes or
        /// when we need to get some extra memory back
        ///
        /// at some point, we might want to make this flush all the bundles,
        /// because any bundles that are floating around when the locale changes
        /// will suddenly contain bad data
        ///
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FlushBundles();
	}
}
