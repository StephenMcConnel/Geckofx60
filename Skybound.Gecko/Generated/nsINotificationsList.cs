// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsINotificationsList.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsINotificationsList </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("11e0176a-4a2d-4a90-8dcc-1590eeb1769d")]
	public interface nsINotificationsList
	{
		
		/// <summary>
        /// Adds a notification to the registration dictionary.
        ///
        /// @param aName The name of the notification we might be sending.
        /// @param aEnabled Indicates if the notification is enabled by default.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddNotification([MarshalAs(UnmanagedType.LPStruct)] nsAString aName, bool aEnabled);
		
		/// <summary>
        /// Checks to see if a paticular notification has already been registered.
        ///
        /// @param aName The name of the notification we are checking against.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsNotification([MarshalAs(UnmanagedType.LPStruct)] nsAString aName);
	}
}
