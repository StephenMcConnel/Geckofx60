// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: mozIStorageConnection.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file mozIStorageConnection.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>mozIStorageConnection </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ad035628-4ffb-42ff-a256-0ed9e410b859")]
	public interface mozIStorageConnection
	{
		
		/// <summary>Member Close </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Close();
		
		/// <summary>Member AsyncClose </summary>
		/// <param name='aCallback'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AsyncClose(mozIStorageCompletionCallback  aCallback);
		
		/// <summary>Member Clone </summary>
		/// <param name='aReadOnly'> </param>
		/// <returns>A mozIStorageConnection</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		mozIStorageConnection Clone(System.Boolean  aReadOnly);
		
		/// <summary>Member GetConnectionReadyAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetConnectionReadyAttribute();
		
		/// <summary>Member GetDatabaseFileAttribute </summary>
		/// <returns>A nsIFile </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIFile  GetDatabaseFileAttribute();
		
		/// <summary>Member GetLastInsertRowIDAttribute </summary>
		/// <returns>A System.Int32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Int32  GetLastInsertRowIDAttribute();
		
		/// <summary>Member GetLastErrorAttribute </summary>
		/// <returns>A System.Int32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Int32  GetLastErrorAttribute();
		
		/// <summary>Member GetLastErrorStringAttribute </summary>
		/// <param name='aLastErrorString'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetLastErrorStringAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aLastErrorString);
		
		/// <summary>Member GetSchemaVersionAttribute </summary>
		/// <returns>A System.Int32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Int32  GetSchemaVersionAttribute();
		
		/// <summary>Member SetSchemaVersionAttribute </summary>
		/// <param name='aSchemaVersion'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetSchemaVersionAttribute(System.Int32  aSchemaVersion);
		
		/// <summary>Member CreateStatement </summary>
		/// <param name='aSQLStatement'> </param>
		/// <returns>A mozIStorageStatement</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		mozIStorageStatement CreateStatement([MarshalAs(UnmanagedType.LPStruct)] nsAString  aSQLStatement);
		
		/// <summary>Member CreateAsyncStatement </summary>
		/// <param name='aSQLStatement'> </param>
		/// <returns>A mozIStorageAsyncStatement</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		mozIStorageAsyncStatement CreateAsyncStatement([MarshalAs(UnmanagedType.LPStruct)] nsAString  aSQLStatement);
		
		/// <summary>Member ExecuteSimpleSQL </summary>
		/// <param name='aSQLStatement'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ExecuteSimpleSQL([MarshalAs(UnmanagedType.LPStruct)] nsAString  aSQLStatement);
		
		/// <summary>Member ExecuteAsync </summary>
		/// <param name='aStatements'> </param>
		/// <param name='aNumStatements'> </param>
		/// <param name='aCallback'> </param>
		/// <returns>A mozIStoragePendingStatement</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		mozIStoragePendingStatement ExecuteAsync(mozIStorageBaseStatement  aStatements, System.UInt32  aNumStatements, mozIStorageStatementCallback  aCallback);
		
		/// <summary>Member TableExists </summary>
		/// <param name='aTableName'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool TableExists([MarshalAs(UnmanagedType.LPStruct)] nsAString  aTableName);
		
		/// <summary>Member IndexExists </summary>
		/// <param name='aIndexName'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IndexExists([MarshalAs(UnmanagedType.LPStruct)] nsAString  aIndexName);
		
		/// <summary>Member GetTransactionInProgressAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetTransactionInProgressAttribute();
		
		/// <summary>Member BeginTransaction </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BeginTransaction();
		
		/// <summary>Member BeginTransactionAs </summary>
		/// <param name='transactionType'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BeginTransactionAs(System.Int32  transactionType);
		
		/// <summary>Member CommitTransaction </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CommitTransaction();
		
		/// <summary>Member RollbackTransaction </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RollbackTransaction();
		
		/// <summary>Member CreateTable </summary>
		/// <param name='aTableName'> </param>
		/// <param name='aTableSchema'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CreateTable([MarshalAs(UnmanagedType.LPStr)] System.String  aTableName, [MarshalAs(UnmanagedType.LPStr)] System.String  aTableSchema);
		
		/// <summary>Member CreateFunction </summary>
		/// <param name='aFunctionName'> </param>
		/// <param name='aNumArguments'> </param>
		/// <param name='aFunction'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CreateFunction([MarshalAs(UnmanagedType.LPStruct)] nsAString  aFunctionName, System.Int32  aNumArguments, mozIStorageFunction  aFunction);
		
		/// <summary>Member CreateAggregateFunction </summary>
		/// <param name='aFunctionName'> </param>
		/// <param name='aNumArguments'> </param>
		/// <param name='aFunction'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CreateAggregateFunction([MarshalAs(UnmanagedType.LPStruct)] nsAString  aFunctionName, System.Int32  aNumArguments, mozIStorageAggregateFunction  aFunction);
		
		/// <summary>Member RemoveFunction </summary>
		/// <param name='aFunctionName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveFunction([MarshalAs(UnmanagedType.LPStruct)] nsAString  aFunctionName);
		
		/// <summary>Member SetProgressHandler </summary>
		/// <param name='aGranularity'> </param>
		/// <param name='aHandler'> </param>
		/// <returns>A mozIStorageProgressHandler</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		mozIStorageProgressHandler SetProgressHandler(System.Int32  aGranularity, mozIStorageProgressHandler  aHandler);
		
		/// <summary>Member RemoveProgressHandler </summary>
		/// <returns>A mozIStorageProgressHandler</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		mozIStorageProgressHandler RemoveProgressHandler();
		
		/// <summary>Member SetGrowthIncrement </summary>
		/// <param name='aIncrement'> </param>
		/// <param name='aDatabaseName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetGrowthIncrement(System.Int32  aIncrement, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aDatabaseName);
	}
}
