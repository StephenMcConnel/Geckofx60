// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIBlocklistService.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIBlocklistService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIBlocklistService </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8439f9c0-da03-4260-8b21-dc635eed28fb")]
	public interface nsIBlocklistService
	{
		
		/// <summary>Member IsAddonBlocklisted </summary>
		/// <param name='id'> </param>
		/// <param name='version'> </param>
		/// <param name='appVersion'> </param>
		/// <param name='toolkitVersion'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsAddonBlocklisted([MarshalAs(UnmanagedType.LPStruct)] nsAString id, [MarshalAs(UnmanagedType.LPStruct)] nsAString version, [MarshalAs(UnmanagedType.LPStruct)] nsAString appVersion, [MarshalAs(UnmanagedType.LPStruct)] nsAString toolkitVersion);
		
		/// <summary>Member GetAddonBlocklistState </summary>
		/// <param name='id'> </param>
		/// <param name='version'> </param>
		/// <param name='appVersion'> </param>
		/// <param name='toolkitVersion'> </param>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetAddonBlocklistState([MarshalAs(UnmanagedType.LPStruct)] nsAString id, [MarshalAs(UnmanagedType.LPStruct)] nsAString version, [MarshalAs(UnmanagedType.LPStruct)] nsAString appVersion, [MarshalAs(UnmanagedType.LPStruct)] nsAString toolkitVersion);
		
		/// <summary>Member GetPluginBlocklistState </summary>
		/// <param name='plugin'> </param>
		/// <param name='appVersion'> </param>
		/// <param name='toolkitVersion'> </param>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetPluginBlocklistState([MarshalAs(UnmanagedType.Interface)] nsIPluginTag  plugin, [MarshalAs(UnmanagedType.LPStruct)] nsAString appVersion, [MarshalAs(UnmanagedType.LPStruct)] nsAString toolkitVersion);
	}
	
	/// <summary>nsIBlocklistPrompt </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("36f97f40-b0c9-11df-94e2-0800200c9a66")]
	public interface nsIBlocklistPrompt
	{
		
		/// <summary>Member Prompt </summary>
		/// <param name='aAddons'> </param>
		/// <param name='aCount'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Prompt(nsIVariant  aAddons, System.UInt32  aCount);
	}
}
