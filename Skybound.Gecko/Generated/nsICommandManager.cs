// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsICommandManager.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsICommandManager.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsICommandManager </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("080D2001-F91E-11D4-A73C-F9242928207C")]
	public interface nsICommandManager
	{
		
		/// <summary>Member AddCommandObserver </summary>
		/// <param name='aCommandObserver'> </param>
		/// <param name='aCommandToObserve'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddCommandObserver([MarshalAs(UnmanagedType.Interface)] nsIObserver  aCommandObserver, [MarshalAs(UnmanagedType.LPStr)] System.String  aCommandToObserve);
		
		/// <summary>Member RemoveCommandObserver </summary>
		/// <param name='aCommandObserver'> </param>
		/// <param name='aCommandObserved'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveCommandObserver([MarshalAs(UnmanagedType.Interface)] nsIObserver  aCommandObserver, [MarshalAs(UnmanagedType.LPStr)] System.String  aCommandObserved);
		
		/// <summary>Member IsCommandSupported </summary>
		/// <param name='aCommandName'> </param>
		/// <param name='aTargetWindow'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsCommandSupported([MarshalAs(UnmanagedType.LPStr)] System.String  aCommandName, [MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  aTargetWindow);
		
		/// <summary>Member IsCommandEnabled </summary>
		/// <param name='aCommandName'> </param>
		/// <param name='aTargetWindow'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsCommandEnabled([MarshalAs(UnmanagedType.LPStr)] System.String  aCommandName, [MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  aTargetWindow);
		
		/// <summary>Member GetCommandState </summary>
		/// <param name='aCommandName'> </param>
		/// <param name='aTargetWindow'> </param>
		/// <param name='aCommandParams'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetCommandState([MarshalAs(UnmanagedType.LPStr)] System.String  aCommandName, [MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  aTargetWindow, [MarshalAs(UnmanagedType.Interface)] nsICommandParams  aCommandParams);
		
		/// <summary>Member DoCommand </summary>
		/// <param name='aCommandName'> </param>
		/// <param name='aCommandParams'> </param>
		/// <param name='aTargetWindow'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DoCommand([MarshalAs(UnmanagedType.LPStr)] System.String  aCommandName, [MarshalAs(UnmanagedType.Interface)] nsICommandParams  aCommandParams, [MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  aTargetWindow);
	}
}
