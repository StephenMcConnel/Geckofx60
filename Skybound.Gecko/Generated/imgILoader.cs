// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: imgILoader.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file imgILoader.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>imgILoader </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("47fbc3e7-c654-4ffb-83fc-a861394145ee")]
	public interface imgILoader
	{
		
		/// <summary>Member LoadImage </summary>
		/// <param name='aURI'> </param>
		/// <param name='aInitialDocumentURL'> </param>
		/// <param name='aReferrerURI'> </param>
		/// <param name='aLoadGroup'> </param>
		/// <param name='aObserver'> </param>
		/// <param name='aCX'> </param>
		/// <param name='aLoadFlags'> </param>
		/// <param name='cacheKey'> </param>
		/// <param name='aRequest'> </param>
		/// <param name='channelPolicy'> </param>
		/// <returns>A imgIRequest</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		imgIRequest LoadImage([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI, [MarshalAs(UnmanagedType.Interface)] nsIURI  aInitialDocumentURL, [MarshalAs(UnmanagedType.Interface)] nsIURI  aReferrerURI, [MarshalAs(UnmanagedType.Interface)] nsILoadGroup  aLoadGroup, imgIDecoderObserver  aObserver, [MarshalAs(UnmanagedType.Interface)] nsISupports  aCX, System.UInt32  aLoadFlags, [MarshalAs(UnmanagedType.Interface)] nsISupports  cacheKey, imgIRequest  aRequest, [MarshalAs(UnmanagedType.Interface)] nsIChannelPolicy  channelPolicy);
		
		/// <summary>Member LoadImageWithChannel </summary>
		/// <param name='aChannel'> </param>
		/// <param name='aObserver'> </param>
		/// <param name='cx'> </param>
		/// <param name='aListener'> </param>
		/// <returns>A imgIRequest</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		imgIRequest LoadImageWithChannel([MarshalAs(UnmanagedType.Interface)] nsIChannel  aChannel, imgIDecoderObserver  aObserver, [MarshalAs(UnmanagedType.Interface)] nsISupports  cx, [MarshalAs(UnmanagedType.Interface)] out nsIStreamListener  aListener);
		
		/// <summary>Member SupportImageWithMimeType </summary>
		/// <param name='mimeType'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool SupportImageWithMimeType([MarshalAs(UnmanagedType.LPStr)] System.String  mimeType);
	}
}
