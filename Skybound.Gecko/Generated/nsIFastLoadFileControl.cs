// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIFastLoadFileControl.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>
    /// The nsIFastLoadFileControl interface and its subinterfaces are mix-ins for
    /// classes implementing nsIObjectInputStream and nsIObjectOutputStream, so that
    /// those stream types can be used with nsIFastLoadService to access and compute
    /// FastLoad file checksums, update and check FastLoad file dependencies, and
    /// multiplex documents loaded via non-blocking i/o.
    ///
    /// If an nsIObjectInputStream class doesn't support nsIFastLoadReadControl, or
    /// an nsIObjectOutputStream class doesn't support nsIFastLoadWriteControl, that
    /// implementation may still be useful for object serialization, but it can't be
    /// used to read or write a Mozilla FastLoad file.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("e7c8c14f-c273-4e70-826f-b85864303dc6")]
	public interface nsIFastLoadFileControl
	{
		
		/// <summary>
        /// Get the recorded checksum value from the FastLoad file header.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetChecksumAttribute();
		
		/// <summary>
        /// Multiplexed document control methods.  A FastLoad file may contain
        /// multiple interleaved documents identified by a URI specifier string,
        /// and indexed for fast multiplexor select by an opaque URI object key.
        /// You StartMuxedDocument when initiating a document load, then Select
        /// before every batch of calls to (de)serialize document data, and End
        /// when the load completes.
        ///
        /// Document multiplexing is necessary to support incremental FastLoad
        /// development in a non-blocking i/o architecture such as Mozilla, where
        /// some (but not all, at first, or for a while during development) of the
        /// results of parsing and compiling various inputs can be multiplexed to
        /// or from a FastLoad file.
        ///
        /// Note: Select returns the previously selected URI object in case the
        /// caller is synchronously selecting and writing data to the FastLoad
        /// file, so the caller can reselect the previous URI and return to code
        /// the continues to write FastLoad data for the previous URI, unaware of
        /// the nested select/write/reselect.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StartMuxedDocument([MarshalAs(UnmanagedType.Interface)] nsISupports aURI, [MarshalAs(UnmanagedType.LPStr)] string aURISpec);
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISupports SelectMuxedDocument([MarshalAs(UnmanagedType.Interface)] nsISupports aURI);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EndMuxedDocument([MarshalAs(UnmanagedType.Interface)] nsISupports aURI);
		
		/// <summary>
        /// Return true if aURISpec identifies a muxed document in the FastLoad
        /// file, false otherwise.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool HasMuxedDocument([MarshalAs(UnmanagedType.LPStr)] string aURISpec);
	}
	
	/// <summary>nsIFastLoadReadControl </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("7604429c-6090-40fe-a87b-928221a1ca67")]
	public interface nsIFastLoadReadControl : nsIFastLoadFileControl
	{
		
		/// <summary>
        /// Get the recorded checksum value from the FastLoad file header.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new uint GetChecksumAttribute();
		
		/// <summary>
        /// Multiplexed document control methods.  A FastLoad file may contain
        /// multiple interleaved documents identified by a URI specifier string,
        /// and indexed for fast multiplexor select by an opaque URI object key.
        /// You StartMuxedDocument when initiating a document load, then Select
        /// before every batch of calls to (de)serialize document data, and End
        /// when the load completes.
        ///
        /// Document multiplexing is necessary to support incremental FastLoad
        /// development in a non-blocking i/o architecture such as Mozilla, where
        /// some (but not all, at first, or for a while during development) of the
        /// results of parsing and compiling various inputs can be multiplexed to
        /// or from a FastLoad file.
        ///
        /// Note: Select returns the previously selected URI object in case the
        /// caller is synchronously selecting and writing data to the FastLoad
        /// file, so the caller can reselect the previous URI and return to code
        /// the continues to write FastLoad data for the previous URI, unaware of
        /// the nested select/write/reselect.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void StartMuxedDocument([MarshalAs(UnmanagedType.Interface)] nsISupports aURI, [MarshalAs(UnmanagedType.LPStr)] string aURISpec);
		
		/// <summary>Member SelectMuxedDocument </summary>
		/// <param name='aURI'> </param>
		/// <returns>A nsISupports</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsISupports SelectMuxedDocument([MarshalAs(UnmanagedType.Interface)] nsISupports aURI);
		
		/// <summary>Member EndMuxedDocument </summary>
		/// <param name='aURI'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void EndMuxedDocument([MarshalAs(UnmanagedType.Interface)] nsISupports aURI);
		
		/// <summary>
        /// Return true if aURISpec identifies a muxed document in the FastLoad
        /// file, false otherwise.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool HasMuxedDocument([MarshalAs(UnmanagedType.LPStr)] string aURISpec);
		
		/// <summary>
        /// Computes the correct checksum of the FastLoad file, independent of the
        /// header's checksum value.  The header checksum field is treated as zero
        /// when computing the checksum.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint ComputeChecksum();
		
		/// <summary>
        /// Get the collection of dependency nsIFile instances recorded during the
        /// FastLoad file write or read/update process, and checked during the read
        /// process to invalidate the FastLoad file if any dependencies are newer.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISimpleEnumerator GetDependenciesAttribute();
	}
	
	/// <summary>nsIFastLoadWriteControl </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("3dbdca8f-0631-4826-a29c-8aba1deea09d")]
	public interface nsIFastLoadWriteControl : nsIFastLoadFileControl
	{
		
		/// <summary>
        /// Get the recorded checksum value from the FastLoad file header.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new uint GetChecksumAttribute();
		
		/// <summary>
        /// Multiplexed document control methods.  A FastLoad file may contain
        /// multiple interleaved documents identified by a URI specifier string,
        /// and indexed for fast multiplexor select by an opaque URI object key.
        /// You StartMuxedDocument when initiating a document load, then Select
        /// before every batch of calls to (de)serialize document data, and End
        /// when the load completes.
        ///
        /// Document multiplexing is necessary to support incremental FastLoad
        /// development in a non-blocking i/o architecture such as Mozilla, where
        /// some (but not all, at first, or for a while during development) of the
        /// results of parsing and compiling various inputs can be multiplexed to
        /// or from a FastLoad file.
        ///
        /// Note: Select returns the previously selected URI object in case the
        /// caller is synchronously selecting and writing data to the FastLoad
        /// file, so the caller can reselect the previous URI and return to code
        /// the continues to write FastLoad data for the previous URI, unaware of
        /// the nested select/write/reselect.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void StartMuxedDocument([MarshalAs(UnmanagedType.Interface)] nsISupports aURI, [MarshalAs(UnmanagedType.LPStr)] string aURISpec);
		
		/// <summary>Member SelectMuxedDocument </summary>
		/// <param name='aURI'> </param>
		/// <returns>A nsISupports</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsISupports SelectMuxedDocument([MarshalAs(UnmanagedType.Interface)] nsISupports aURI);
		
		/// <summary>Member EndMuxedDocument </summary>
		/// <param name='aURI'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void EndMuxedDocument([MarshalAs(UnmanagedType.Interface)] nsISupports aURI);
		
		/// <summary>
        /// Return true if aURISpec identifies a muxed document in the FastLoad
        /// file, false otherwise.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool HasMuxedDocument([MarshalAs(UnmanagedType.LPStr)] string aURISpec);
		
		/// <summary>
        /// Add a file dependency of the FastLoad file (e.g., a .jar file) to the
        /// set of dependencies that trigger regeneration if any dependency has a
        /// last-modified-time greater than the FastLoad file's mtime.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddDependency([MarshalAs(UnmanagedType.Interface)] nsIFile aFile);
	}
}
