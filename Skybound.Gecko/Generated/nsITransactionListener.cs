// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsITransactionListener.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsITransactionListener.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsITransactionListener </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("58e330c4-7b48-11d2-98b9-00805f297d89")]
	public interface nsITransactionListener
	{
		
		/// <summary>Member WillDo </summary>
		/// <param name='aManager'> </param>
		/// <param name='aTransaction'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool WillDo([MarshalAs(UnmanagedType.Interface)] nsITransactionManager  aManager, [MarshalAs(UnmanagedType.Interface)] nsITransaction  aTransaction);
		
		/// <summary>Member DidDo </summary>
		/// <param name='aManager'> </param>
		/// <param name='aTransaction'> </param>
		/// <param name='aDoResult'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DidDo([MarshalAs(UnmanagedType.Interface)] nsITransactionManager  aManager, [MarshalAs(UnmanagedType.Interface)] nsITransaction  aTransaction, System.Int32  aDoResult);
		
		/// <summary>Member WillUndo </summary>
		/// <param name='aManager'> </param>
		/// <param name='aTransaction'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool WillUndo([MarshalAs(UnmanagedType.Interface)] nsITransactionManager  aManager, [MarshalAs(UnmanagedType.Interface)] nsITransaction  aTransaction);
		
		/// <summary>Member DidUndo </summary>
		/// <param name='aManager'> </param>
		/// <param name='aTransaction'> </param>
		/// <param name='aUndoResult'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DidUndo([MarshalAs(UnmanagedType.Interface)] nsITransactionManager  aManager, [MarshalAs(UnmanagedType.Interface)] nsITransaction  aTransaction, System.Int32  aUndoResult);
		
		/// <summary>Member WillRedo </summary>
		/// <param name='aManager'> </param>
		/// <param name='aTransaction'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool WillRedo([MarshalAs(UnmanagedType.Interface)] nsITransactionManager  aManager, [MarshalAs(UnmanagedType.Interface)] nsITransaction  aTransaction);
		
		/// <summary>Member DidRedo </summary>
		/// <param name='aManager'> </param>
		/// <param name='aTransaction'> </param>
		/// <param name='aRedoResult'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DidRedo([MarshalAs(UnmanagedType.Interface)] nsITransactionManager  aManager, [MarshalAs(UnmanagedType.Interface)] nsITransaction  aTransaction, System.Int32  aRedoResult);
		
		/// <summary>Member WillBeginBatch </summary>
		/// <param name='aManager'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool WillBeginBatch([MarshalAs(UnmanagedType.Interface)] nsITransactionManager  aManager);
		
		/// <summary>Member DidBeginBatch </summary>
		/// <param name='aManager'> </param>
		/// <param name='aResult'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DidBeginBatch([MarshalAs(UnmanagedType.Interface)] nsITransactionManager  aManager, System.Int32  aResult);
		
		/// <summary>Member WillEndBatch </summary>
		/// <param name='aManager'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool WillEndBatch([MarshalAs(UnmanagedType.Interface)] nsITransactionManager  aManager);
		
		/// <summary>Member DidEndBatch </summary>
		/// <param name='aManager'> </param>
		/// <param name='aResult'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DidEndBatch([MarshalAs(UnmanagedType.Interface)] nsITransactionManager  aManager, System.Int32  aResult);
		
		/// <summary>Member WillMerge </summary>
		/// <param name='aManager'> </param>
		/// <param name='aTopTransaction'> </param>
		/// <param name='aTransactionToMerge'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool WillMerge([MarshalAs(UnmanagedType.Interface)] nsITransactionManager  aManager, [MarshalAs(UnmanagedType.Interface)] nsITransaction  aTopTransaction, [MarshalAs(UnmanagedType.Interface)] nsITransaction  aTransactionToMerge);
		
		/// <summary>Member DidMerge </summary>
		/// <param name='aManager'> </param>
		/// <param name='aTopTransaction'> </param>
		/// <param name='aTransactionToMerge'> </param>
		/// <param name='aDidMerge'> </param>
		/// <param name='aMergeResult'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DidMerge([MarshalAs(UnmanagedType.Interface)] nsITransactionManager  aManager, [MarshalAs(UnmanagedType.Interface)] nsITransaction  aTopTransaction, [MarshalAs(UnmanagedType.Interface)] nsITransaction  aTransactionToMerge, System.Boolean  aDidMerge, System.Int32  aMergeResult);
	}
}
