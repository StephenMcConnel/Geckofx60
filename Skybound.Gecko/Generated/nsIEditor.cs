// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIEditor.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIEditor.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIEditor </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("972e54e1-dec3-4e3f-87ec-408a7dbcfd92")]
	public interface nsIEditor
	{
		
		/// <summary>Member GetSelectionAttribute </summary>
		/// <returns>A nsISelection </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISelection  GetSelectionAttribute();
		
		/// <summary>Member Init </summary>
		/// <param name='doc'> </param>
		/// <param name='shell'> </param>
		/// <param name='aRoot'> </param>
		/// <param name='aSelCon'> </param>
		/// <param name='aFlags'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Init([MarshalAs(UnmanagedType.Interface)] nsIDOMDocument  doc, System.IntPtr shell, System.IntPtr aRoot, [MarshalAs(UnmanagedType.Interface)] nsISelectionController  aSelCon, System.UInt32  aFlags);
		
		/// <summary>Member SetAttributeOrEquivalent </summary>
		/// <param name='element'> </param>
		/// <param name='sourceAttrName'> </param>
		/// <param name='sourceAttrValue'> </param>
		/// <param name='aSuppressTransaction'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetAttributeOrEquivalent([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  element, [MarshalAs(UnmanagedType.LPStruct)] nsAString sourceAttrName, [MarshalAs(UnmanagedType.LPStruct)] nsAString sourceAttrValue, System.Boolean  aSuppressTransaction);
		
		/// <summary>Member RemoveAttributeOrEquivalent </summary>
		/// <param name='element'> </param>
		/// <param name='sourceAttrName'> </param>
		/// <param name='aSuppressTransaction'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveAttributeOrEquivalent([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  element, [MarshalAs(UnmanagedType.LPStruct)] nsAString sourceAttrName, System.Boolean  aSuppressTransaction);
		
		/// <summary>Member PostCreate </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PostCreate();
		
		/// <summary>Member PreDestroy </summary>
		/// <param name='aDestroyingFrames'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PreDestroy(System.Boolean  aDestroyingFrames);
		
		/// <summary>Member GetFlagsAttribute </summary>
		/// <returns>A System.UInt32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetFlagsAttribute();
		
		/// <summary>Member SetFlagsAttribute </summary>
		/// <param name='aFlags'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetFlagsAttribute(System.UInt32  aFlags);
		
		/// <summary>Member GetContentsMIMETypeAttribute </summary>
		/// <returns>A System.String </returns>
		[return: MarshalAs(UnmanagedType.LPStr)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.String  GetContentsMIMETypeAttribute();
		
		/// <summary>Member SetContentsMIMETypeAttribute </summary>
		/// <param name='aContentsMIMEType'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetContentsMIMETypeAttribute([MarshalAs(UnmanagedType.LPStr)] System.String  aContentsMIMEType);
		
		/// <summary>Member GetIsDocumentEditableAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetIsDocumentEditableAttribute();
		
		/// <summary>Member GetDocumentAttribute </summary>
		/// <returns>A nsIDOMDocument </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDocument  GetDocumentAttribute();
		
		/// <summary>Member GetRootElementAttribute </summary>
		/// <returns>A nsIDOMElement </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMElement  GetRootElementAttribute();
		
		/// <summary>Member GetSelectionControllerAttribute </summary>
		/// <returns>A nsISelectionController </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISelectionController  GetSelectionControllerAttribute();
		
		/// <summary>Member DeleteSelection </summary>
		/// <param name='action'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeleteSelection(short action);
		
		/// <summary>Member GetDocumentIsEmptyAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetDocumentIsEmptyAttribute();
		
		/// <summary>Member GetDocumentModifiedAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetDocumentModifiedAttribute();
		
		/// <summary>Member GetDocumentCharacterSetAttribute </summary>
		/// <param name='aDocumentCharacterSet'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetDocumentCharacterSetAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aDocumentCharacterSet);
		
		/// <summary>Member SetDocumentCharacterSetAttribute </summary>
		/// <param name='aDocumentCharacterSet'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDocumentCharacterSetAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString  aDocumentCharacterSet);
		
		/// <summary>Member ResetModificationCount </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ResetModificationCount();
		
		/// <summary>Member GetModificationCount </summary>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetModificationCount();
		
		/// <summary>Member IncrementModificationCount </summary>
		/// <param name='aModCount'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void IncrementModificationCount(System.Int32  aModCount);
		
		/// <summary>Member GetTransactionManagerAttribute </summary>
		/// <returns>A nsITransactionManager </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsITransactionManager  GetTransactionManagerAttribute();
		
		/// <summary>Member SetTransactionManagerAttribute </summary>
		/// <param name='aTransactionManager'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetTransactionManagerAttribute([MarshalAs(UnmanagedType.Interface)] nsITransactionManager  aTransactionManager);
		
		/// <summary>Member DoTransaction </summary>
		/// <param name='txn'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DoTransaction([MarshalAs(UnmanagedType.Interface)] nsITransaction  txn);
		
		/// <summary>Member EnableUndo </summary>
		/// <param name='enable'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EnableUndo(System.Boolean  enable);
		
		/// <summary>Member Undo </summary>
		/// <param name='count'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Undo(System.UInt32  count);
		
		/// <summary>Member CanUndo </summary>
		/// <param name='isEnabled'> </param>
		/// <param name='canUndo'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CanUndo(out System.Boolean  isEnabled, out System.Boolean  canUndo);
		
		/// <summary>Member Redo </summary>
		/// <param name='count'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Redo(System.UInt32  count);
		
		/// <summary>Member CanRedo </summary>
		/// <param name='isEnabled'> </param>
		/// <param name='canRedo'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CanRedo(out System.Boolean  isEnabled, out System.Boolean  canRedo);
		
		/// <summary>Member BeginTransaction </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BeginTransaction();
		
		/// <summary>Member EndTransaction </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EndTransaction();
		
		/// <summary>Member BeginPlaceHolderTransaction </summary>
		/// <param name='name'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BeginPlaceHolderTransaction([MarshalAs(UnmanagedType.Interface)] nsIAtom  name);
		
		/// <summary>Member EndPlaceHolderTransaction </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EndPlaceHolderTransaction();
		
		/// <summary>Member ShouldTxnSetSelection </summary>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool ShouldTxnSetSelection();
		
		/// <summary>Member SetShouldTxnSetSelection </summary>
		/// <param name='should'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetShouldTxnSetSelection(System.Boolean  should);
		
		/// <summary>Member GetInlineSpellChecker </summary>
		/// <param name='autoCreate'> </param>
		/// <returns>A nsIInlineSpellChecker</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIInlineSpellChecker GetInlineSpellChecker(System.Boolean  autoCreate);
		
		/// <summary>Member SyncRealTimeSpell </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SyncRealTimeSpell();
		
		/// <summary>Member SetSpellcheckUserOverride </summary>
		/// <param name='enable'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetSpellcheckUserOverride(System.Boolean  enable);
		
		/// <summary>Member Cut </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Cut();
		
		/// <summary>Member CanCut </summary>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool CanCut();
		
		/// <summary>Member Copy </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Copy();
		
		/// <summary>Member CanCopy </summary>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool CanCopy();
		
		/// <summary>Member Paste </summary>
		/// <param name='aSelectionType'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Paste(System.Int32  aSelectionType);
		
		/// <summary>Member PasteTransferable </summary>
		/// <param name='aTransferable'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PasteTransferable([MarshalAs(UnmanagedType.Interface)] nsITransferable  aTransferable);
		
		/// <summary>Member CanPaste </summary>
		/// <param name='aSelectionType'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool CanPaste(System.Int32  aSelectionType);
		
		/// <summary>Member CanPasteTransferable </summary>
		/// <param name='aTransferable'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool CanPasteTransferable([MarshalAs(UnmanagedType.Interface)] nsITransferable  aTransferable);
		
		/// <summary>Member SelectAll </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SelectAll();
		
		/// <summary>Member BeginningOfDocument </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BeginningOfDocument();
		
		/// <summary>Member EndOfDocument </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EndOfDocument();
		
		/// <summary>Member CanDrag </summary>
		/// <param name='aEvent'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool CanDrag([MarshalAs(UnmanagedType.Interface)] nsIDOMEvent  aEvent);
		
		/// <summary>Member DoDrag </summary>
		/// <param name='aEvent'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DoDrag([MarshalAs(UnmanagedType.Interface)] nsIDOMEvent  aEvent);
		
		/// <summary>Member InsertFromDrop </summary>
		/// <param name='aEvent'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InsertFromDrop([MarshalAs(UnmanagedType.Interface)] nsIDOMEvent  aEvent);
		
		/// <summary>Member SetAttribute </summary>
		/// <param name='aElement'> </param>
		/// <param name='attributestr'> </param>
		/// <param name='attvalue'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetAttribute([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  aElement, [MarshalAs(UnmanagedType.LPStruct)] nsAString attributestr, [MarshalAs(UnmanagedType.LPStruct)] nsAString attvalue);
		
		/// <summary>Member GetAttributeValue </summary>
		/// <param name='aElement'> </param>
		/// <param name='attributestr'> </param>
		/// <param name='resultValue'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetAttributeValue([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  aElement, [MarshalAs(UnmanagedType.LPStruct)] nsAString attributestr, [MarshalAs(UnmanagedType.LPStruct)] nsAString resultValue);
		
		/// <summary>Member RemoveAttribute </summary>
		/// <param name='aElement'> </param>
		/// <param name='aAttribute'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveAttribute([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  aElement, [MarshalAs(UnmanagedType.LPStruct)] nsAString aAttribute);
		
		/// <summary>Member CloneAttribute </summary>
		/// <param name='aAttribute'> </param>
		/// <param name='aDestNode'> </param>
		/// <param name='aSourceNode'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CloneAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aAttribute, [MarshalAs(UnmanagedType.Interface)] nsIDOMNode  aDestNode, [MarshalAs(UnmanagedType.Interface)] nsIDOMNode  aSourceNode);
		
		/// <summary>Member CloneAttributes </summary>
		/// <param name='destNode'> </param>
		/// <param name='sourceNode'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CloneAttributes([MarshalAs(UnmanagedType.Interface)] nsIDOMNode  destNode, [MarshalAs(UnmanagedType.Interface)] nsIDOMNode  sourceNode);
		
		/// <summary>Member CreateNode </summary>
		/// <param name='tag'> </param>
		/// <param name='parent'> </param>
		/// <param name='position'> </param>
		/// <returns>A nsIDOMNode</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMNode CreateNode([MarshalAs(UnmanagedType.LPStruct)] nsAString tag, [MarshalAs(UnmanagedType.Interface)] nsIDOMNode  parent, System.Int32  position);
		
		/// <summary>Member InsertNode </summary>
		/// <param name='node'> </param>
		/// <param name='parent'> </param>
		/// <param name='aPosition'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InsertNode([MarshalAs(UnmanagedType.Interface)] nsIDOMNode  node, [MarshalAs(UnmanagedType.Interface)] nsIDOMNode  parent, System.Int32  aPosition);
		
		/// <summary>Member SplitNode </summary>
		/// <param name='existingRightNode'> </param>
		/// <param name='offset'> </param>
		/// <param name='newLeftNode'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SplitNode([MarshalAs(UnmanagedType.Interface)] nsIDOMNode  existingRightNode, System.Int32  offset, [MarshalAs(UnmanagedType.Interface)] out nsIDOMNode  newLeftNode);
		
		/// <summary>Member JoinNodes </summary>
		/// <param name='leftNode'> </param>
		/// <param name='rightNode'> </param>
		/// <param name='parent'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void JoinNodes([MarshalAs(UnmanagedType.Interface)] nsIDOMNode  leftNode, [MarshalAs(UnmanagedType.Interface)] nsIDOMNode  rightNode, [MarshalAs(UnmanagedType.Interface)] nsIDOMNode  parent);
		
		/// <summary>Member DeleteNode </summary>
		/// <param name='child'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeleteNode([MarshalAs(UnmanagedType.Interface)] nsIDOMNode  child);
		
		/// <summary>Member MarkNodeDirty </summary>
		/// <param name='node'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MarkNodeDirty([MarshalAs(UnmanagedType.Interface)] nsIDOMNode  node);
		
		/// <summary>Member SwitchTextDirection </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SwitchTextDirection();
		
		/// <summary>Member OutputToString </summary>
		/// <param name='formatType'> </param>
		/// <param name='flags'> </param>
		/// <returns>A nsAString</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString OutputToString([MarshalAs(UnmanagedType.LPStruct)] nsAString formatType, System.UInt32  flags);
		
		/// <summary>Member OutputToStream </summary>
		/// <param name='aStream'> </param>
		/// <param name='formatType'> </param>
		/// <param name='charsetOverride'> </param>
		/// <param name='flags'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OutputToStream([MarshalAs(UnmanagedType.Interface)] nsIOutputStream  aStream, [MarshalAs(UnmanagedType.LPStruct)] nsAString formatType, [MarshalAs(UnmanagedType.LPStruct)] nsAString  charsetOverride, System.UInt32  flags);
		
		/// <summary>Member AddEditorObserver </summary>
		/// <param name='observer'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddEditorObserver([MarshalAs(UnmanagedType.Interface)] nsIEditorObserver  observer);
		
		/// <summary>Member RemoveEditorObserver </summary>
		/// <param name='observer'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveEditorObserver([MarshalAs(UnmanagedType.Interface)] nsIEditorObserver  observer);
		
		/// <summary>Member AddEditActionListener </summary>
		/// <param name='listener'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddEditActionListener([MarshalAs(UnmanagedType.Interface)] nsIEditActionListener  listener);
		
		/// <summary>Member RemoveEditActionListener </summary>
		/// <param name='listener'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveEditActionListener([MarshalAs(UnmanagedType.Interface)] nsIEditActionListener  listener);
		
		/// <summary>Member AddDocumentStateListener </summary>
		/// <param name='listener'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddDocumentStateListener(System.IntPtr listener);
		
		/// <summary>Member RemoveDocumentStateListener </summary>
		/// <param name='listener'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveDocumentStateListener(System.IntPtr listener);
		
		/// <summary>Member DumpContentTree </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DumpContentTree();
		
		/// <summary>Member DebugDumpContent </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DebugDumpContent();
		
		/// <summary>Member DebugUnitTests </summary>
		/// <param name='outNumTests'> </param>
		/// <param name='outNumTestsFailed'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DebugUnitTests(out System.Int32  outNumTests, out System.Int32  outNumTestsFailed);
		
		/// <summary>Member IsModifiableNode </summary>
		/// <param name='aNode'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsModifiableNode([MarshalAs(UnmanagedType.Interface)] nsIDOMNode  aNode);
	}
	
	/// <summary>nsIEditor_MOZILLA_2_0_BRANCH </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("54c0bc08-6c0e-4967-bb0d-ec991d78a8b3")]
	public interface nsIEditor_MOZILLA_2_0_BRANCH
	{
		
		/// <summary>Member GetLastKeypressEventTrustedAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetLastKeypressEventTrustedAttribute();
	}
}
