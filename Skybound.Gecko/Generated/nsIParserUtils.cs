// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIParserUtils.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>
    /// Non-Web HTML parser functionality to Firefox extensions and XULRunner apps.
    /// Don't use this from within Gecko--use nsContentUtils directly instead.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("290f49bb-0619-4bda-8006-ab31bec7231a")]
	public interface nsIParserUtils
	{
		
		/// <summary>
        /// Convert HTML to plain text.
        ///
        /// @param src the HTML source to parse (C++ callers are allowed but not
        /// required to use the same string for the return value.)
        /// @param flags conversion option flags defined in nsIDocumentEncoder
        /// @param wrapCol number of characters per line; 0 for no auto-wrapping
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ConvertToPlainText([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase src, uint flags, uint wrapCol, [MarshalAs(UnmanagedType.LPStruct)] nsAStringBase retval);
	}
}
