// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIDOMWindowInternal.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIDOMWindowInternal </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("9d6a1157-0719-46a7-b49f-7ffeaa0b5c86")]
	public interface nsIDOMWindowInternal : nsIDOMWindow2
	{
		
		/// <summary>
        /// Accessor for the document in this window.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMDocument GetDocumentAttribute();
		
		/// <summary>
        /// Accessor for this window's parent window, or the window itself if
        /// there is no parent, or if the parent is of different type
        /// (i.e. this does not cross chrome-content boundaries).
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMWindow GetParentAttribute();
		
		/// <summary>
        /// Accessor for the root of this hierarchy of windows. This root may
        /// be the window itself if there is no parent, or if the parent is
        /// of different type (i.e. this does not cross chrome-content
        /// boundaries).
        ///
        /// This property is "replaceable" in JavaScript </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMWindow GetTopAttribute();
		
		/// <summary>
        /// Accessor for the object that controls whether or not scrollbars
        /// are shown in this window.
        ///
        /// This attribute is "replaceable" in JavaScript
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMBarProp GetScrollbarsAttribute();
		
		/// <summary>
        /// Accessor for the child windows in this window.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMWindowCollection GetFramesAttribute();
		
		/// <summary>
        /// Set/Get the name of this window.
        ///
        /// This attribute is "replaceable" in JavaScript
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aName);
		
		/// <summary>
        /// Set/Get the name of this window.
        ///
        /// This attribute is "replaceable" in JavaScript
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aName);
		
		/// <summary>
        /// Set/Get the document scale factor as a multiplier on the default
        /// size. When setting this attribute, a NS_ERROR_NOT_IMPLEMENTED
        /// error may be returned by implementations not supporting
        /// zoom. Implementations not supporting zoom should return 1.0 all
        /// the time for the Get operation. 1.0 is equals normal size,
        /// i.e. no zoom.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new float GetTextZoomAttribute();
		
		/// <summary>
        /// Set/Get the document scale factor as a multiplier on the default
        /// size. When setting this attribute, a NS_ERROR_NOT_IMPLEMENTED
        /// error may be returned by implementations not supporting
        /// zoom. Implementations not supporting zoom should return 1.0 all
        /// the time for the Get operation. 1.0 is equals normal size,
        /// i.e. no zoom.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetTextZoomAttribute(float aTextZoom);
		
		/// <summary>
        /// Accessor for the current x scroll position in this window in
        /// pixels.
        ///
        /// This attribute is "replaceable" in JavaScript
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new int GetScrollXAttribute();
		
		/// <summary>
        /// Accessor for the current y scroll position in this window in
        /// pixels.
        ///
        /// This attribute is "replaceable" in JavaScript
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new int GetScrollYAttribute();
		
		/// <summary>
        /// Method for scrolling this window to an absolute pixel offset.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void ScrollTo(int xScroll, int yScroll);
		
		/// <summary>
        /// Method for scrolling this window to a pixel offset relative to
        /// the current scroll position.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void ScrollBy(int xScrollDif, int yScrollDif);
		
		/// <summary>
        /// Method for accessing this window's selection object.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsISelection GetSelection();
		
		/// <summary>
        /// Method for scrolling this window by a number of lines.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void ScrollByLines(int numLines);
		
		/// <summary>
        /// Method for scrolling this window by a number of pages.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void ScrollByPages(int numPages);
		
		/// <summary>
        /// Method for sizing this window to the content in the window.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SizeToContent();
		
		/// <summary>
        /// Get the window root for this window. This is useful for hooking
        /// up event listeners to this window and every other window nested
        /// in the window root.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMEventTarget GetWindowRootAttribute();
		
		/// <summary>
        /// Get the application cache object for this window.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMOfflineResourceList GetApplicationCacheAttribute();
		
		/// <summary>
        /// Deprecated, but can't remove yet since we don't want to change interfaces.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void CreateBlobURL([MarshalAs(UnmanagedType.Interface)] nsIDOMBlob blob, [MarshalAs(UnmanagedType.LPStruct)] nsAString retval);
		
		/// <summary>Member RevokeBlobURL </summary>
		/// <param name='URL'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void RevokeBlobURL([MarshalAs(UnmanagedType.LPStruct)] nsAString URL);
		
		/// <summary>Member GetWindowAttribute </summary>
		/// <returns>A nsIDOMWindowInternal</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMWindowInternal GetWindowAttribute();
		
		/// <summary>
        ///[replaceable] self </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMWindowInternal GetSelfAttribute();
		
		/// <summary>Member GetNavigatorAttribute </summary>
		/// <returns>A nsIDOMNavigator</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMNavigator GetNavigatorAttribute();
		
		/// <summary>Member GetScreenAttribute </summary>
		/// <returns>A nsIDOMScreen</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMScreen GetScreenAttribute();
		
		/// <summary>Member GetHistoryAttribute </summary>
		/// <returns>A nsIDOMHistory</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMHistory GetHistoryAttribute();
		
		/// <summary>
        ///[replaceable] content </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMWindow GetContentAttribute();
		
		/// <summary>
        ///[replaceable] prompter </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPrompt GetPrompterAttribute();
		
		/// <summary>
        ///[replaceable] menubar </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMBarProp GetMenubarAttribute();
		
		/// <summary>
        ///[replaceable] toolbar </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMBarProp GetToolbarAttribute();
		
		/// <summary>
        ///[replaceable] locationbar </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMBarProp GetLocationbarAttribute();
		
		/// <summary>
        ///[replaceable] personalbar </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMBarProp GetPersonalbarAttribute();
		
		/// <summary>
        ///[replaceable] statusbar </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMBarProp GetStatusbarAttribute();
		
		/// <summary>Member GetClosedAttribute </summary>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetClosedAttribute();
		
		/// <summary>Member GetCryptoAttribute </summary>
		/// <returns>A nsIDOMCrypto</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMCrypto GetCryptoAttribute();
		
		/// <summary>Member GetPkcs11Attribute </summary>
		/// <returns>A nsIDOMPkcs11</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMPkcs11 GetPkcs11Attribute();
		
		/// <summary>
        ///[replaceable] controllers </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIControllers GetControllersAttribute();
		
		/// <summary>Member GetOpenerAttribute </summary>
		/// <returns>A nsIDOMWindowInternal</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMWindowInternal GetOpenerAttribute();
		
		/// <summary>Member SetOpenerAttribute </summary>
		/// <param name='aOpener'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOpenerAttribute([MarshalAs(UnmanagedType.Interface)] nsIDOMWindowInternal aOpener);
		
		/// <summary>
        ///[replaceable] </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetStatusAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aStatus);
		
		/// <summary>
        ///[replaceable] </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetStatusAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aStatus);
		
		/// <summary>Member GetDefaultStatusAttribute </summary>
		/// <param name='aDefaultStatus'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetDefaultStatusAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aDefaultStatus);
		
		/// <summary>Member SetDefaultStatusAttribute </summary>
		/// <param name='aDefaultStatus'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDefaultStatusAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aDefaultStatus);
		
		/// <summary>
        /// cased!
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMLocation GetLocationAttribute();
		
		/// <summary>
        ///[replaceable] </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetInnerWidthAttribute();
		
		/// <summary>
        ///[replaceable] </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetInnerWidthAttribute(int aInnerWidth);
		
		/// <summary>Member GetInnerHeightAttribute </summary>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetInnerHeightAttribute();
		
		/// <summary>Member SetInnerHeightAttribute </summary>
		/// <param name='aInnerHeight'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetInnerHeightAttribute(int aInnerHeight);
		
		/// <summary>Member GetOuterWidthAttribute </summary>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetOuterWidthAttribute();
		
		/// <summary>Member SetOuterWidthAttribute </summary>
		/// <param name='aOuterWidth'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOuterWidthAttribute(int aOuterWidth);
		
		/// <summary>Member GetOuterHeightAttribute </summary>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetOuterHeightAttribute();
		
		/// <summary>Member SetOuterHeightAttribute </summary>
		/// <param name='aOuterHeight'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOuterHeightAttribute(int aOuterHeight);
		
		/// <summary>Member GetScreenXAttribute </summary>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetScreenXAttribute();
		
		/// <summary>Member SetScreenXAttribute </summary>
		/// <param name='aScreenX'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetScreenXAttribute(int aScreenX);
		
		/// <summary>Member GetScreenYAttribute </summary>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetScreenYAttribute();
		
		/// <summary>Member SetScreenYAttribute </summary>
		/// <param name='aScreenY'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetScreenYAttribute(int aScreenY);
		
		/// <summary>Member GetMozInnerScreenXAttribute </summary>
		/// <returns>A System.Single</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		float GetMozInnerScreenXAttribute();
		
		/// <summary>Member GetMozInnerScreenYAttribute </summary>
		/// <returns>A System.Single</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		float GetMozInnerScreenYAttribute();
		
		/// <summary>
        ///The offset in pixels by which the window is scrolled </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetPageXOffsetAttribute();
		
		/// <summary>Member GetPageYOffsetAttribute </summary>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetPageYOffsetAttribute();
		
		/// <summary>
        ///The maximum offset that the window can be scrolled to
        ///     (i.e., the document width/height minus the scrollport width/height) </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetScrollMaxXAttribute();
		
		/// <summary>Member GetScrollMaxYAttribute </summary>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetScrollMaxYAttribute();
		
		/// <summary>
        ///[replaceable] length </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetLengthAttribute();
		
		/// <summary>Member GetFullScreenAttribute </summary>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetFullScreenAttribute();
		
		/// <summary>Member SetFullScreenAttribute </summary>
		/// <param name='aFullScreen'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetFullScreenAttribute([MarshalAs(UnmanagedType.Bool)] bool aFullScreen);
		
		/// <summary>Member Alert </summary>
		/// <param name='text'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Alert([MarshalAs(UnmanagedType.LPStruct)] nsAString text);
		
		/// <summary>Member Confirm </summary>
		/// <param name='text'> </param>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool Confirm([MarshalAs(UnmanagedType.LPStruct)] nsAString text);
		
		/// <summary>
        /// prompt() should return a null string if cancel is pressed
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Prompt([MarshalAs(UnmanagedType.LPStruct)] nsAString aMessage, [MarshalAs(UnmanagedType.LPStruct)] nsAString aInitial, [MarshalAs(UnmanagedType.LPStruct)] nsAString retval);
		
		/// <summary>Member Focus </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Focus();
		
		/// <summary>Member Blur </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Blur();
		
		/// <summary>Member Back </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Back();
		
		/// <summary>Member Forward </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Forward();
		
		/// <summary>Member Home </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Home();
		
		/// <summary>Member Stop </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Stop();
		
		/// <summary>Member Print </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Print();
		
		/// <summary>Member MoveTo </summary>
		/// <param name='xPos'> </param>
		/// <param name='yPos'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MoveTo(int xPos, int yPos);
		
		/// <summary>Member MoveBy </summary>
		/// <param name='xDif'> </param>
		/// <param name='yDif'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MoveBy(int xDif, int yDif);
		
		/// <summary>Member ResizeTo </summary>
		/// <param name='width'> </param>
		/// <param name='height'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ResizeTo(int width, int height);
		
		/// <summary>Member ResizeBy </summary>
		/// <param name='widthDif'> </param>
		/// <param name='heightDif'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ResizeBy(int widthDif, int heightDif);
		
		/// <summary>Member Scroll </summary>
		/// <param name='xScroll'> </param>
		/// <param name='yScroll'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Scroll(int xScroll, int yScroll);
		
		/// <summary>
        /// Open a new window with this one as the parent.  This method will
        /// NOT examine the JS stack for purposes of determining a caller.
        /// This window will be used for security checks during the search by
        /// name and the default character set on the newly opened window
        /// will just be the default character set of this window.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMWindow Open([MarshalAs(UnmanagedType.LPStruct)] nsAString url, [MarshalAs(UnmanagedType.LPStruct)] nsAString name, [MarshalAs(UnmanagedType.LPStruct)] nsAString options);
		
		/// <summary>
        /// This method works like open except that aExtraArgument gets
        /// converted into the array window.arguments in JS, if
        /// aExtraArgument is a nsISupportsArray then the individual items in
        /// the array are inserted into window.arguments, and primitive
        /// nsISupports (nsISupportsPrimitives) types are converted to native
        /// JS types when possible.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMWindow OpenDialog([MarshalAs(UnmanagedType.LPStruct)] nsAString url, [MarshalAs(UnmanagedType.LPStruct)] nsAString name, [MarshalAs(UnmanagedType.LPStruct)] nsAString options, [MarshalAs(UnmanagedType.Interface)] nsISupports aExtraArgument);
		
		/// <summary>Member Close </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Close();
		
		/// <summary>
        /// XXX Should this be in nsIDOMChromeWindow?
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UpdateCommands([MarshalAs(UnmanagedType.LPStruct)] nsAString action);
		
		/// <summary>
        ///Find in page.
        /// @param str: the search pattern
        /// @param caseSensitive: is the search caseSensitive
        /// @param backwards: should we search backwards
        /// @param wrapAround: should we wrap the search
        /// @param wholeWord: should we search only for whole words
        /// @param searchInFrames: should we search through all frames
        /// @param showDialog: should we show the Find dialog
        /// </summary>
		[return: MarshalAs(UnmanagedType.Bool)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool Find([MarshalAs(UnmanagedType.LPStruct)] nsAString str, [MarshalAs(UnmanagedType.Bool)] bool caseSensitive, [MarshalAs(UnmanagedType.Bool)] bool backwards, [MarshalAs(UnmanagedType.Bool)] bool wrapAround, [MarshalAs(UnmanagedType.Bool)] bool wholeWord, [MarshalAs(UnmanagedType.Bool)] bool searchInFrames, [MarshalAs(UnmanagedType.Bool)] bool showDialog);
		
		/// <summary>
        /// Ascii base64 data to binary data and vice versa...
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Atob([MarshalAs(UnmanagedType.LPStruct)] nsAString aAsciiString, [MarshalAs(UnmanagedType.LPStruct)] nsAString retval);
		
		/// <summary>Member Btoa </summary>
		/// <param name='aBase64Data'> </param>
		/// <param name='retval'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Btoa([MarshalAs(UnmanagedType.LPStruct)] nsAString aBase64Data, [MarshalAs(UnmanagedType.LPStruct)] nsAString retval);
		
		/// <summary>Member GetFrameElementAttribute </summary>
		/// <returns>A nsIDOMElement</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMElement GetFrameElementAttribute();
		
		/// <summary>Member ShowModalDialog </summary>
		/// <param name='aURI'> </param>
		/// <param name='aArgs'> </param>
		/// <param name='aOptions'> </param>
		/// <returns>A nsIVariant</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIVariant ShowModalDialog([MarshalAs(UnmanagedType.LPStruct)] nsAString aURI, [MarshalAs(UnmanagedType.Interface)] nsIVariant aArgs, [MarshalAs(UnmanagedType.LPStruct)] nsAString aOptions);
		
		/// <summary>
        /// Implements a safe message-passing system which can cross same-origin
        /// boundaries.
        ///
        /// This method, when called, causes a MessageEvent to be asynchronously
        /// dispatched at the primary document for the window upon which this method is
        /// called.  (Note that the postMessage property on windows is allAccess and
        /// thus is readable cross-origin.)  The dispatched event will have message as
        /// its data, the calling context's window as its source, and an origin
        /// determined by the calling context's main document URI.  The targetOrigin
        /// argument specifies a URI and is used to restrict the message to be sent
        /// only when the target window has the same origin as targetOrigin (since,
        /// when the sender and the target have different origins, neither can read the
        /// location of the other).
        ///
        /// See the WHATWG HTML5 specification, section 6.4, for more details.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PostMessage([MarshalAs(UnmanagedType.LPStruct)] nsAString message, [MarshalAs(UnmanagedType.LPStruct)] nsAString targetOrigin);
		
		/// <summary>
        /// Returns the number of times this document for this window has
        /// been painted to the screen.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetMozPaintCountAttribute();
		
		/// <summary>
        /// Request a refresh of this browser window.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MozRequestAnimationFrame([MarshalAs(UnmanagedType.Interface)] nsIAnimationFrameListener aListener);
		
		/// <summary>
        /// The current animation start time in milliseconds since the epoch.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetMozAnimationStartTimeAttribute();
	}
	
	/// <summary>nsIDOMMozURLProperty </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8fc58f56-f769-4368-a098-edd08550cf1a")]
	public interface nsIDOMMozURLProperty
	{
		
		/// <summary>Member CreateObjectURL </summary>
		/// <param name='blob'> </param>
		/// <param name='retval'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CreateObjectURL([MarshalAs(UnmanagedType.Interface)] nsIDOMBlob blob, [MarshalAs(UnmanagedType.LPStruct)] nsAString retval);
		
		/// <summary>Member RevokeObjectURL </summary>
		/// <param name='URL'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RevokeObjectURL([MarshalAs(UnmanagedType.LPStruct)] nsAString URL);
	}
	
	/// <summary>nsIDOMWindow_2_0_BRANCH </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("05563c0c-b74c-41ad-91d1-bc22d580a581")]
	public interface nsIDOMWindow_2_0_BRANCH
	{
		
		/// <summary>Member GetURLAttribute </summary>
		/// <returns>A nsIDOMMozURLProperty</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMMozURLProperty GetURLAttribute();
	}
}
