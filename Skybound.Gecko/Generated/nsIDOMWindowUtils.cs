// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIDOMWindowUtils.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIDOMWindowUtils.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIDOMWindowUtils </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("85fa978a-fc91-4513-9f11-8911e671577f")]
	public interface nsIDOMWindowUtils
	{
		
		/// <summary>Member GetImageAnimationModeAttribute </summary>
		/// <returns>A System.UInt16</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetImageAnimationModeAttribute();
		
		/// <summary>Member SetImageAnimationModeAttribute </summary>
		/// <param name='aImageAnimationMode'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetImageAnimationModeAttribute(ushort aImageAnimationMode);
		
		/// <summary>Member GetDocCharsetIsForcedAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetDocCharsetIsForcedAttribute();
		
		/// <summary>Member GetCursorType </summary>
		/// <returns>A System.Int16</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		short GetCursorType();
		
		/// <summary>Member GetDocumentMetadata </summary>
		/// <param name='aName'> </param>
		/// <returns>A nsAString</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString GetDocumentMetadata([MarshalAs(UnmanagedType.LPStruct)] nsAString aName);
		
		/// <summary>Member Redraw </summary>
		/// <param name='aCount'> </param>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint Redraw(System.UInt32  aCount);
		
		/// <summary>Member SetCSSViewport </summary>
		/// <param name='aWidthPx'> </param>
		/// <param name='aHeightPx'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCSSViewport(double aWidthPx, double aHeightPx);
		
		/// <summary>Member SetDisplayPort </summary>
		/// <param name='aXPx'> </param>
		/// <param name='aYPx'> </param>
		/// <param name='aWidthPx'> </param>
		/// <param name='aHeightPx'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDisplayPort(double aXPx, double aYPx, double aWidthPx, double aHeightPx);
		
		/// <summary>Member SetResolution </summary>
		/// <param name='aXResolution'> </param>
		/// <param name='aYResolution'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetResolution(double aXResolution, double aYResolution);
		
		/// <summary>Member SendMouseEvent </summary>
		/// <param name='aType'> </param>
		/// <param name='aX'> </param>
		/// <param name='aY'> </param>
		/// <param name='aButton'> </param>
		/// <param name='aClickCount'> </param>
		/// <param name='aModifiers'> </param>
		/// <param name='aIgnoreRootScrollFrame'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendMouseEvent([MarshalAs(UnmanagedType.LPStruct)] nsAString aType, double aX, double aY, System.Int32  aButton, System.Int32  aClickCount, System.Int32  aModifiers, System.Boolean  aIgnoreRootScrollFrame);
		
		/// <summary>Member SendMouseEventToWindow </summary>
		/// <param name='aType'> </param>
		/// <param name='aX'> </param>
		/// <param name='aY'> </param>
		/// <param name='aButton'> </param>
		/// <param name='aClickCount'> </param>
		/// <param name='aModifiers'> </param>
		/// <param name='aIgnoreRootScrollFrame'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendMouseEventToWindow([MarshalAs(UnmanagedType.LPStruct)] nsAString aType, double aX, double aY, System.Int32  aButton, System.Int32  aClickCount, System.Int32  aModifiers, System.Boolean  aIgnoreRootScrollFrame);
		
		/// <summary>Member SendMouseScrollEvent </summary>
		/// <param name='aType'> </param>
		/// <param name='aX'> </param>
		/// <param name='aY'> </param>
		/// <param name='aButton'> </param>
		/// <param name='aScrollFlags'> </param>
		/// <param name='aDelta'> </param>
		/// <param name='aModifiers'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendMouseScrollEvent([MarshalAs(UnmanagedType.LPStruct)] nsAString aType, double aX, double aY, System.Int32  aButton, System.Int32  aScrollFlags, System.Int32  aDelta, System.Int32  aModifiers);
		
		/// <summary>Member SendKeyEvent </summary>
		/// <param name='aType'> </param>
		/// <param name='aKeyCode'> </param>
		/// <param name='aCharCode'> </param>
		/// <param name='aModifiers'> </param>
		/// <param name='aPreventDefault'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool SendKeyEvent([MarshalAs(UnmanagedType.LPStruct)] nsAString aType, System.Int32  aKeyCode, System.Int32  aCharCode, System.Int32  aModifiers, System.Boolean  aPreventDefault);
		
		/// <summary>Member SendNativeKeyEvent </summary>
		/// <param name='aNativeKeyboardLayout'> </param>
		/// <param name='aNativeKeyCode'> </param>
		/// <param name='aModifierFlags'> </param>
		/// <param name='aCharacters'> </param>
		/// <param name='aUnmodifiedCharacters'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendNativeKeyEvent(System.Int32  aNativeKeyboardLayout, System.Int32  aNativeKeyCode, System.Int32  aModifierFlags, [MarshalAs(UnmanagedType.LPStruct)] nsAString aCharacters, [MarshalAs(UnmanagedType.LPStruct)] nsAString aUnmodifiedCharacters);
		
		/// <summary>Member SendNativeMouseEvent </summary>
		/// <param name='aScreenX'> </param>
		/// <param name='aScreenY'> </param>
		/// <param name='aNativeMessage'> </param>
		/// <param name='aModifierFlags'> </param>
		/// <param name='aElement'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendNativeMouseEvent(System.Int32  aScreenX, System.Int32  aScreenY, System.Int32  aNativeMessage, System.Int32  aModifierFlags, [MarshalAs(UnmanagedType.Interface)] nsIDOMElement  aElement);
		
		/// <summary>Member ActivateNativeMenuItemAt </summary>
		/// <param name='indexString'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ActivateNativeMenuItemAt([MarshalAs(UnmanagedType.LPStruct)] nsAString indexString);
		
		/// <summary>Member ForceUpdateNativeMenuAt </summary>
		/// <param name='indexString'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ForceUpdateNativeMenuAt([MarshalAs(UnmanagedType.LPStruct)] nsAString indexString);
		
		/// <summary>Member Focus </summary>
		/// <param name='aElement'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Focus([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  aElement);
		
		/// <summary>Member GarbageCollect </summary>
		/// <param name='aListener'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GarbageCollect([MarshalAs(UnmanagedType.Interface)] nsICycleCollectorListener  aListener);
		
		/// <summary>Member ProcessUpdates </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ProcessUpdates();
		
		/// <summary>Member SendSimpleGestureEvent </summary>
		/// <param name='aType'> </param>
		/// <param name='aX'> </param>
		/// <param name='aY'> </param>
		/// <param name='aDirection'> </param>
		/// <param name='aDelta'> </param>
		/// <param name='aModifiers'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendSimpleGestureEvent([MarshalAs(UnmanagedType.LPStruct)] nsAString aType, double aX, double aY, System.UInt32  aDirection, double aDelta, System.Int32  aModifiers);
		
		/// <summary>Member ElementFromPoint </summary>
		/// <param name='aX'> </param>
		/// <param name='aY'> </param>
		/// <param name='aIgnoreRootScrollFrame'> </param>
		/// <param name='aFlushLayout'> </param>
		/// <returns>A nsIDOMElement</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMElement ElementFromPoint(double aX, double aY, System.Boolean  aIgnoreRootScrollFrame, System.Boolean  aFlushLayout);
		
		/// <summary>Member NodesFromRect </summary>
		/// <param name='aX'> </param>
		/// <param name='aY'> </param>
		/// <param name='aTopSize'> </param>
		/// <param name='aRightSize'> </param>
		/// <param name='aBottomSize'> </param>
		/// <param name='aLeftSize'> </param>
		/// <param name='aIgnoreRootScrollFrame'> </param>
		/// <param name='aFlushLayout'> </param>
		/// <returns>A nsIDOMNodeList</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMNodeList NodesFromRect(double aX, double aY, double aTopSize, double aRightSize, double aBottomSize, double aLeftSize, System.Boolean  aIgnoreRootScrollFrame, System.Boolean  aFlushLayout);
		
		/// <summary>Member CompareCanvases </summary>
		/// <param name='aCanvas1'> </param>
		/// <param name='aCanvas2'> </param>
		/// <param name='aMaxDifference'> </param>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint CompareCanvases([MarshalAs(UnmanagedType.Interface)] nsIDOMHTMLCanvasElement  aCanvas1, [MarshalAs(UnmanagedType.Interface)] nsIDOMHTMLCanvasElement  aCanvas2, out System.UInt32  aMaxDifference);
		
		/// <summary>Member GetIsMozAfterPaintPendingAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetIsMozAfterPaintPendingAttribute();
		
		/// <summary>Member SuppressEventHandling </summary>
		/// <param name='aSuppress'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SuppressEventHandling(System.Boolean  aSuppress);
		
		/// <summary>Member ClearMozAfterPaintEvents </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ClearMozAfterPaintEvents();
		
		/// <summary>Member DisableNonTestMouseEvents </summary>
		/// <param name='aDisable'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DisableNonTestMouseEvents(System.Boolean  aDisable);
		
		/// <summary>Member GetScrollXY </summary>
		/// <param name='aFlushLayout'> </param>
		/// <param name='aScrollX'> </param>
		/// <param name='aScrollY'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetScrollXY(System.Boolean  aFlushLayout, out System.Int32  aScrollX, out System.Int32  aScrollY);
		
		/// <summary>Member GetIMEIsOpenAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetIMEIsOpenAttribute();
		
		/// <summary>Member GetIMEStatusAttribute </summary>
		/// <returns>A System.UInt32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetIMEStatusAttribute();
		
		/// <summary>Member GetScreenPixelsPerCSSPixelAttribute </summary>
		/// <returns>A System.Double</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetScreenPixelsPerCSSPixelAttribute();
		
		/// <summary>Member DispatchDOMEventViaPresShell </summary>
		/// <param name='aTarget'> </param>
		/// <param name='aEvent'> </param>
		/// <param name='aTrusted'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool DispatchDOMEventViaPresShell([MarshalAs(UnmanagedType.Interface)] nsIDOMNode  aTarget, [MarshalAs(UnmanagedType.Interface)] nsIDOMEvent  aEvent, System.Boolean  aTrusted);
		
		/// <summary>Member GetClassName </summary>
		/// <returns>A System.String</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		string GetClassName();
		
		/// <summary>Member SendContentCommandEvent </summary>
		/// <param name='aType'> </param>
		/// <param name='aTransferable'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendContentCommandEvent([MarshalAs(UnmanagedType.LPStruct)] nsAString aType, [MarshalAs(UnmanagedType.Interface)] nsITransferable  aTransferable);
		
		/// <summary>Member SendCompositionEvent </summary>
		/// <param name='aType'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendCompositionEvent([MarshalAs(UnmanagedType.LPStruct)] nsAString aType);
		
		/// <summary>Member SendTextEvent </summary>
		/// <param name='aCompositionString'> </param>
		/// <param name='aFirstClauseLength'> </param>
		/// <param name='aFirstClauseAttr'> </param>
		/// <param name='aSecondClauseLength'> </param>
		/// <param name='aSecondClauseAttr'> </param>
		/// <param name='aThirdClauseLength'> </param>
		/// <param name='aThirdClauseAttr'> </param>
		/// <param name='aCaretStart'> </param>
		/// <param name='aCaretLength'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendTextEvent([MarshalAs(UnmanagedType.LPStruct)] nsAString aCompositionString, System.Int32  aFirstClauseLength, System.UInt32  aFirstClauseAttr, System.Int32  aSecondClauseLength, System.UInt32  aSecondClauseAttr, System.Int32  aThirdClauseLength, System.UInt32  aThirdClauseAttr, System.Int32  aCaretStart, System.Int32  aCaretLength);
		
		/// <summary>Member SendQueryContentEvent </summary>
		/// <param name='aType'> </param>
		/// <param name='aOffset'> </param>
		/// <param name='aLength'> </param>
		/// <param name='aX'> </param>
		/// <param name='aY'> </param>
		/// <returns>A nsIQueryContentEventResult</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIQueryContentEventResult SendQueryContentEvent(System.UInt32  aType, System.UInt32  aOffset, System.UInt32  aLength, System.Int32  aX, System.Int32  aY);
		
		/// <summary>Member SendSelectionSetEvent </summary>
		/// <param name='aOffset'> </param>
		/// <param name='aLength'> </param>
		/// <param name='aReverse'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool SendSelectionSetEvent(System.UInt32  aOffset, System.UInt32  aLength, System.Boolean  aReverse);
		
		/// <summary>Member GetVisitedDependentComputedStyle </summary>
		/// <param name='aElement'> </param>
		/// <param name='aPseudoElement'> </param>
		/// <param name='aPropertyName'> </param>
		/// <returns>A nsAString</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString GetVisitedDependentComputedStyle([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  aElement, [MarshalAs(UnmanagedType.LPStruct)] nsAString aPseudoElement, [MarshalAs(UnmanagedType.LPStruct)] nsAString aPropertyName);
		
		/// <summary>Member GetParent </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetParent();
		
		/// <summary>Member GetOuterWindowIDAttribute </summary>
		/// <returns>A System.UInt32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetOuterWindowIDAttribute();
		
		/// <summary>Member GetCurrentInnerWindowIDAttribute </summary>
		/// <returns>A System.UInt32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetCurrentInnerWindowIDAttribute();
		
		/// <summary>Member EnterModalState </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EnterModalState();
		
		/// <summary>Member LeaveModalState </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LeaveModalState();
		
		/// <summary>Member IsInModalState </summary>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsInModalState();
		
		/// <summary>Member SuspendTimeouts </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SuspendTimeouts();
		
		/// <summary>Member ResumeTimeouts </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ResumeTimeouts();
		
		/// <summary>Member GetLayerManagerTypeAttribute </summary>
		/// <param name='aLayerManagerType'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetLayerManagerTypeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aLayerManagerType);
		
		/// <summary>Member GetDisplayDPIAttribute </summary>
		/// <returns>A System.Double</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetDisplayDPIAttribute();
		
		/// <summary>Member GetOuterWindowWithId </summary>
		/// <param name='aOuterWindowID'> </param>
		/// <returns>A nsIDOMWindow</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMWindow GetOuterWindowWithId(System.UInt32  aOuterWindowID);
		
		/// <summary>Member RenderDocument </summary>
		/// <param name='aRect'> </param>
		/// <param name='aFlags'> </param>
		/// <param name='aBackgroundColor'> </param>
		/// <param name='aThebesContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RenderDocument(nsConstRect  aRect, System.UInt32  aFlags, nscolor  aBackgroundColor, System.IntPtr aThebesContext);
		
		/// <summary>Member ComputeAnimationDistance </summary>
		/// <param name='element'> </param>
		/// <param name='property'> </param>
		/// <param name='value1'> </param>
		/// <param name='value2'> </param>
		/// <returns>A System.Double</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double ComputeAnimationDistance([MarshalAs(UnmanagedType.Interface)] nsIDOMElement  element, [MarshalAs(UnmanagedType.LPStruct)] nsAString property, [MarshalAs(UnmanagedType.LPStruct)] nsAString value1, [MarshalAs(UnmanagedType.LPStruct)] nsAString value2);
	}
	
	/// <summary>nsIDOMWindowUtils_MOZILLA_2_0_BRANCH </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("be2e28c8-64f8-4100-906d-8a451ddd6835")]
	public interface nsIDOMWindowUtils_MOZILLA_2_0_BRANCH
	{
		
		/// <summary>Member GetFocusedInputTypeAttribute </summary>
		/// <returns>A System.String </returns>
		[return: MarshalAs(UnmanagedType.LPStr)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.String  GetFocusedInputTypeAttribute();
		
		/// <summary>Member FindElementWithViewId </summary>
		/// <param name='aId'> </param>
		/// <returns>A nsIDOMElement</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMElement FindElementWithViewId(System.IntPtr aId);
		
		/// <summary>Member EnterModalStateWithWindow </summary>
		/// <returns>A nsIDOMWindow</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMWindow EnterModalStateWithWindow();
		
		/// <summary>Member LeaveModalStateWithWindow </summary>
		/// <param name='aWindow'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LeaveModalStateWithWindow([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  aWindow);
		
		/// <summary>Member LeafLayersPartitionWindow </summary>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool LeafLayersPartitionWindow();
	}
}
