// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIBrowserDOMWindow.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIBrowserDOMWindow.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIBrowserDOMWindow </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("3ab89888-eb41-4dc8-b347-115555f47c80")]
	public interface nsIBrowserDOMWindow
	{
		
		/// <summary>Member OpenURI </summary>
		/// <param name='aURI'> </param>
		/// <param name='aOpener'> </param>
		/// <param name='aWhere'> </param>
		/// <param name='aContext'> </param>
		/// <returns>A nsIDOMWindow</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMWindow OpenURI([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI, [MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  aOpener, short aWhere, short aContext);
		
		/// <summary>Member OpenURIInFrame </summary>
		/// <param name='aURI'> </param>
		/// <param name='aOpener'> </param>
		/// <param name='aWhere'> </param>
		/// <param name='aContext'> </param>
		/// <returns>A System.IntPtr</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr OpenURIInFrame([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI, [MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  aOpener, short aWhere, short aContext);
		
		/// <summary>Member IsTabContentWindow </summary>
		/// <param name='aWindow'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsTabContentWindow([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  aWindow);
	}
}
