// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsITelephone.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsITelephoneCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("9b7e3a01-9c45-4af3-81bb-1bf08a842226")]
	public interface nsITelephoneCallback
	{
		
		/// <summary>Member Oncallstatechange </summary>
		/// <param name='event'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Oncallstatechange(System.IntPtr @event);
		
		/// <summary>
        ///XXX philikon's additions
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Onoperatorchange(System.IntPtr @event);
		
		/// <summary>Member Onradiostatechange </summary>
		/// <param name='event'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Onradiostatechange(System.IntPtr @event);
		
		/// <summary>Member Oncardstatechange </summary>
		/// <param name='event'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Oncardstatechange(System.IntPtr @event);
		
		/// <summary>Member Onsignalstrengthchange </summary>
		/// <param name='event'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Onsignalstrengthchange(System.IntPtr @event);
	}
	
	/// <summary>nsITelephone </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("f6baa721-665e-403e-8a98-acaa0d8bf267")]
	public interface nsITelephone
	{
		
		/// <summary>Member GetCurrentStateAttribute </summary>
		/// <returns>A System.IntPtr</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr GetCurrentStateAttribute();
		
		/// <summary>Member Dial </summary>
		/// <param name='number'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Dial([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase number);
		
		/// <summary>Member HangUp </summary>
		/// <param name='callIndex'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HangUp(int callIndex);
		
		/// <summary>Member StartTone </summary>
		/// <param name='dtmfChar'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StartTone([MarshalAs(UnmanagedType.LPStruct)] nsAStringBase dtmfChar);
		
		/// <summary>Member StopTone </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StopTone();
		
		/// <summary>Member AnswerCall </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AnswerCall();
		
		/// <summary>Member RejectCall </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RejectCall();
		
		/// <summary>Member GetMicrophoneMutedAttribute </summary>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetMicrophoneMutedAttribute();
		
		/// <summary>Member SetMicrophoneMutedAttribute </summary>
		/// <param name='aMicrophoneMuted'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetMicrophoneMutedAttribute([MarshalAs(UnmanagedType.U1)] bool aMicrophoneMuted);
		
		/// <summary>Member GetSpeakerEnabledAttribute </summary>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetSpeakerEnabledAttribute();
		
		/// <summary>Member SetSpeakerEnabledAttribute </summary>
		/// <param name='aSpeakerEnabled'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetSpeakerEnabledAttribute([MarshalAs(UnmanagedType.U1)] bool aSpeakerEnabled);
		
		/// <summary>Member RegisterCallback </summary>
		/// <param name='callback'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RegisterCallback([MarshalAs(UnmanagedType.Interface)] nsITelephoneCallback callback);
		
		/// <summary>Member UnregisterCallback </summary>
		/// <param name='callback'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnregisterCallback([MarshalAs(UnmanagedType.Interface)] nsITelephoneCallback callback);
	}
}
