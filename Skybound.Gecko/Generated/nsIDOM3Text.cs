// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIDOM3Text.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIDOM3Text </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("BCCA052E-46F4-4B8E-8859-A86776C2F1D7")]
	public interface nsIDOM3Text
	{
		
		/// <summary>
        /// Indicates whether this text node contains element content whitespace.
        /// A text node is element content whitespace if it contains only XML
        /// white space characters and is a child of an element whose content
        /// model allows only child elements optionally separated by white space.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsElementContentWhitespaceAttribute();
		
		/// <summary>
        /// The concatenation of all logically adjacent text nodes with this text
        /// node, where "logically adjacent" consists of all text nodes which can be
        /// reached by traversing the document tree in either direction without
        /// passing an element, comment, or processing-instruction boundary.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetWholeTextAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAString aWholeText);
		
		/// <summary>
        /// If content is empty, removes all logically adjacent text nodes (including
        /// this node) from the DOM tree, returning null; otherwise, replaces the
        /// contents of this node with aContent and removes all other logically
        /// adjacent text nodes from the DOM tree, returning this node.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMText ReplaceWholeText([MarshalAs(UnmanagedType.LPStruct)] nsAString content);
	}
}
