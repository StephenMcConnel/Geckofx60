// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIFastLoadService.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIFastLoadService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIFastLoadFileIO </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("61cd17e0-b07a-4158-9817-36a206b100e9")]
	public interface nsIFastLoadFileIO
	{
		
		/// <summary>Member GetInputStreamAttribute </summary>
		/// <returns>A nsIInputStream </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIInputStream  GetInputStreamAttribute();
		
		/// <summary>Member GetOutputStreamAttribute </summary>
		/// <returns>A nsIOutputStream </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIOutputStream  GetOutputStreamAttribute();
		
		/// <summary>Member DisableTruncate </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DisableTruncate();
	}
	
	/// <summary>nsIFastLoadService </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("c18df300-c2e4-4115-a61c-9110655f7dd8")]
	public interface nsIFastLoadService
	{
		
		/// <summary>Member NewFastLoadFile </summary>
		/// <param name='aBaseName'> </param>
		/// <returns>A nsIFile</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIFile NewFastLoadFile([MarshalAs(UnmanagedType.LPStr)] System.String  aBaseName);
		
		/// <summary>Member NewInputStream </summary>
		/// <param name='aFile'> </param>
		/// <returns>A nsIObjectInputStream</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIObjectInputStream NewInputStream([MarshalAs(UnmanagedType.Interface)] nsIFile  aFile);
		
		/// <summary>Member NewOutputStream </summary>
		/// <param name='aDestStream'> </param>
		/// <returns>A nsIObjectOutputStream</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIObjectOutputStream NewOutputStream([MarshalAs(UnmanagedType.Interface)] nsIOutputStream  aDestStream);
		
		/// <summary>Member GetInputStreamAttribute </summary>
		/// <returns>A nsIObjectInputStream </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIObjectInputStream  GetInputStreamAttribute();
		
		/// <summary>Member SetInputStreamAttribute </summary>
		/// <param name='aInputStream'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetInputStreamAttribute([MarshalAs(UnmanagedType.Interface)] nsIObjectInputStream  aInputStream);
		
		/// <summary>Member GetOutputStreamAttribute </summary>
		/// <returns>A nsIObjectOutputStream </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIObjectOutputStream  GetOutputStreamAttribute();
		
		/// <summary>Member SetOutputStreamAttribute </summary>
		/// <param name='aOutputStream'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOutputStreamAttribute([MarshalAs(UnmanagedType.Interface)] nsIObjectOutputStream  aOutputStream);
		
		/// <summary>Member GetFileIOAttribute </summary>
		/// <returns>A nsIFastLoadFileIO </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIFastLoadFileIO  GetFileIOAttribute();
		
		/// <summary>Member SetFileIOAttribute </summary>
		/// <param name='aFileIO'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetFileIOAttribute([MarshalAs(UnmanagedType.Interface)] nsIFastLoadFileIO  aFileIO);
		
		/// <summary>Member GetDirectionAttribute </summary>
		/// <returns>A System.Int32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Int32  GetDirectionAttribute();
		
		/// <summary>Member StartMuxedDocument </summary>
		/// <param name='aURI'> </param>
		/// <param name='aURISpec'> </param>
		/// <param name='aDirectionFlags'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StartMuxedDocument([MarshalAs(UnmanagedType.Interface)] nsISupports  aURI, [MarshalAs(UnmanagedType.LPStr)] System.String  aURISpec, System.Int32  aDirectionFlags);
		
		/// <summary>Member SelectMuxedDocument </summary>
		/// <param name='aURI'> </param>
		/// <returns>A nsISupports</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISupports SelectMuxedDocument([MarshalAs(UnmanagedType.Interface)] nsISupports  aURI);
		
		/// <summary>Member EndMuxedDocument </summary>
		/// <param name='aURI'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EndMuxedDocument([MarshalAs(UnmanagedType.Interface)] nsISupports  aURI);
		
		/// <summary>Member AddDependency </summary>
		/// <param name='aFile'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddDependency([MarshalAs(UnmanagedType.Interface)] nsIFile  aFile);
		
		/// <summary>Member ComputeChecksum </summary>
		/// <param name='aFile'> </param>
		/// <param name='aControl'> </param>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint ComputeChecksum([MarshalAs(UnmanagedType.Interface)] nsIFile  aFile, [MarshalAs(UnmanagedType.Interface)] nsIFastLoadReadControl  aControl);
		
		/// <summary>Member CacheChecksum </summary>
		/// <param name='aFile'> </param>
		/// <param name='aStream'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CacheChecksum([MarshalAs(UnmanagedType.Interface)] nsIFile  aFile, [MarshalAs(UnmanagedType.Interface)] nsIObjectOutputStream  aStream);
		
		/// <summary>Member GetFastLoadReferent </summary>
		/// <param name='aPtr'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetFastLoadReferent([MarshalAs(UnmanagedType.Interface)] ref nsISupports  aPtr);
		
		/// <summary>Member ReadFastLoadPtr </summary>
		/// <param name='aInputStream'> </param>
		/// <param name='aPtr'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ReadFastLoadPtr([MarshalAs(UnmanagedType.Interface)] nsIObjectInputStream  aInputStream, [MarshalAs(UnmanagedType.Interface)] ref nsISupports  aPtr);
		
		/// <summary>Member WriteFastLoadPtr </summary>
		/// <param name='aOutputStream'> </param>
		/// <param name='aPtr'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WriteFastLoadPtr([MarshalAs(UnmanagedType.Interface)] nsIObjectOutputStream  aOutputStream, [MarshalAs(UnmanagedType.Interface)] nsISupports  aPtr);
		
		/// <summary>Member HasMuxedDocument </summary>
		/// <param name='aURISpec'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool HasMuxedDocument([MarshalAs(UnmanagedType.LPStr)] System.String  aURISpec);
	}
}
