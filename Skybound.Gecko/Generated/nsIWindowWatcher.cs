// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIWindowWatcher.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIWindowWatcher.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIWindowWatcher </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("002286a8-494b-43b3-8ddd-49e3fc50622b")]
	public interface nsIWindowWatcher
	{
		
		/// <summary>Member OpenWindow </summary>
		/// <param name='aParent'> </param>
		/// <param name='aUrl'> </param>
		/// <param name='aName'> </param>
		/// <param name='aFeatures'> </param>
		/// <param name='aArguments'> </param>
		/// <returns>A nsIDOMWindow</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMWindow OpenWindow([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  aParent, [MarshalAs(UnmanagedType.LPStr)] System.String  aUrl, [MarshalAs(UnmanagedType.LPStr)] System.String  aName, [MarshalAs(UnmanagedType.LPStr)] System.String  aFeatures, [MarshalAs(UnmanagedType.Interface)] nsISupports  aArguments);
		
		/// <summary>Member RegisterNotification </summary>
		/// <param name='aObserver'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RegisterNotification([MarshalAs(UnmanagedType.Interface)] nsIObserver  aObserver);
		
		/// <summary>Member UnregisterNotification </summary>
		/// <param name='aObserver'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnregisterNotification([MarshalAs(UnmanagedType.Interface)] nsIObserver  aObserver);
		
		/// <summary>Member GetWindowEnumerator </summary>
		/// <returns>A nsISimpleEnumerator</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISimpleEnumerator GetWindowEnumerator();
		
		/// <summary>Member GetNewPrompter </summary>
		/// <param name='aParent'> </param>
		/// <returns>A nsIPrompt</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPrompt GetNewPrompter([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  aParent);
		
		/// <summary>Member GetNewAuthPrompter </summary>
		/// <param name='aParent'> </param>
		/// <returns>A nsIAuthPrompt</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIAuthPrompt GetNewAuthPrompter([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  aParent);
		
		/// <summary>Member SetWindowCreator </summary>
		/// <param name='creator'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetWindowCreator([MarshalAs(UnmanagedType.Interface)] nsIWindowCreator  creator);
		
		/// <summary>Member GetChromeForWindow </summary>
		/// <param name='aWindow'> </param>
		/// <returns>A nsIWebBrowserChrome</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIWebBrowserChrome GetChromeForWindow([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  aWindow);
		
		/// <summary>Member GetWindowByName </summary>
		/// <param name='aTargetName'> </param>
		/// <param name='aCurrentWindow'> </param>
		/// <returns>A nsIDOMWindow</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMWindow GetWindowByName([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Skybound.Gecko.XpCom.WStringMarshaler")] string aTargetName, [MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  aCurrentWindow);
		
		/// <summary>Member GetActiveWindowAttribute </summary>
		/// <returns>A nsIDOMWindow </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMWindow  GetActiveWindowAttribute();
		
		/// <summary>Member SetActiveWindowAttribute </summary>
		/// <param name='aActiveWindow'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetActiveWindowAttribute([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  aActiveWindow);
	}
}
