// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIBrowserHistory.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>
    /// browser-specific interface to global history
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("540aca25-1e01-467f-b24c-df89cbe40f8d")]
	public interface nsIBrowserHistory : nsIGlobalHistory2
	{
		
		/// <summary>
        /// Add a URI to global history
        ///
        /// @param aURI      the URI of the page
        /// @param aRedirect whether the URI was redirected to another location;
        /// this is 'true' for the original URI which is
        /// redirected.
        /// @param aToplevel whether the URI is loaded in a top-level window
        /// @param aReferrer the URI of the referring page
        ///
        /// @note  Docshell will not filter out URI schemes like chrome: data:
        /// about: and view-source:.  Embedders should consider filtering out
        /// these schemes and others, e.g. mailbox: for the main URI and the
        /// referrer.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void AddURI([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI, System.Boolean  aRedirect, System.Boolean  aToplevel, [MarshalAs(UnmanagedType.Interface)] nsIURI  aReferrer);
		
		/// <summary>
        /// Checks to see whether the given URI is in history.
        ///
        /// @param aURI the uri to the page
        /// @return true if a URI has been visited
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool IsVisited([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI);
		
		/// <summary>
        /// Set the page title for the given uri. URIs that are not already in
        /// global history will not be added.
        ///
        /// @param aURI    the URI for which to set to the title
        /// @param aTitle  the page title
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetPageTitle([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI, [MarshalAs(UnmanagedType.LPStruct)] nsAString aTitle);
		
		/// <summary>
        /// addPageWithDetails
        ///
        /// Adds a page to history with specific time stamp information. This is used in
        /// the History migrator.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddPageWithDetails([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Skybound.Gecko.XpCom.WStringMarshaler")] string aTitle, System.Int32  aLastVisited);
		
		/// <summary>
        /// lastPageVisited
        ///
        /// The last page that was visited in a top-level window.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetLastPageVisitedAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String  aLastPageVisited);
		
		/// <summary>
        /// count
        ///
        /// Indicate if there are entries in global history
        /// For performance reasons this does not return the real number of entries
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetCountAttribute();
		
		/// <summary>
        /// removePage
        ///
        /// Remove a page from history
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemovePage([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI);
		
		/// <summary>
        /// removePages
        ///
        /// Remove a bunch of pages from history
        /// Notice that this does not call observers for performance reasons,
        /// instead setting aDoBatchNotify true will send Begin/EndUpdateBatch
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemovePages(nsIURI  aURIs, System.UInt32  aLength, System.Boolean  aDoBatchNotify);
		
		/// <summary>
        /// removePagesFromHost
        ///
        /// Removes all history information about pages from a given host. If
        /// aEntireDomain is set, we will also delete pages from sub hosts (so if
        /// we are passed in "microsoft.com" we delete "www.microsoft.com",
        /// "msdn.microsoft.com", etc.). An empty host name means local files and
        /// anything else with no host name. You can also pass in the localized
        /// "(local files)" title given to you from a history query to remove all
        /// history information from local files.
        ///
        /// Note that this does not call observers for single deleted uris,
        /// but will send Begin/EndUpdateBatch.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemovePagesFromHost([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String  aHost, System.Boolean  aEntireDomain);
		
		/// <summary>
        /// removePagesByTimeframe
        ///
        /// Remove all pages for a given timeframe.
        /// Limits are included: aBeginTime <= timeframe <= aEndTime
        /// Notice that this does not call observers for single deleted uris,
        /// instead it will send Begin/EndUpdateBatch
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemovePagesByTimeframe(System.Int32  aBeginTime, System.Int32  aEndTime);
		
		/// <summary>
        /// removeVisitsByTimeframe
        ///
        /// Removes all visits in a given timeframe.  Limits are included:
        /// aBeginTime <= timeframe <= aEndTime.  Any place that becomes unvisited
        /// as a result will also be deleted.
        ///
        /// Note that removal is performed in batch, so observers will not be
        /// notified of individual places that are deleted.  Instead they will be
        /// notified onBeginUpdateBatch and onEndUpdateBatch.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveVisitsByTimeframe(System.Int32  aBeginTime, System.Int32  aEndTime);
		
		/// <summary>
        /// removeAllPages
        ///
        /// Remove all pages from global history
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveAllPages();
		
		/// <summary>
        /// hidePage
        ///
        /// Hide the specified URL from being enumerated (and thus
        /// displayed in the UI)
        /// If the page hasn't been visited yet, then it will be added
        /// as if it was visited, and then marked as hidden
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HidePage([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI);
		
		/// <summary>
        /// markPageAsTyped
        ///
        /// Designate the url as having been explicitly typed in by
        /// the user, so it's okay to be an autocomplete result.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MarkPageAsTyped([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI);
		
		/// <summary>
        /// markPageAsFollowedLink
        ///
        /// Designate the url as coming from a link explicitly followed by
        /// the user (for example by clicking on it).
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MarkPageAsFollowedLink([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI);
		
		/// <summary>
        /// Mark a page as being currently open.
        ///
        /// @note Pages will not be automatically unregistered when Private Browsing
        /// mode is entered or exited.  Therefore, consumers MUST unregister or
        /// register themselves.
        ///
        /// @note This is just an alias for mozIPlacesAutoComplete::registerOpenPage.
        ///
        /// @status DEPRECATED
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RegisterOpenPage([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI);
		
		/// <summary>
        /// Mark a page as no longer being open (either by closing the window or tab,
        /// or by navigating away from that page).
        ///
        /// @note Pages will not be automatically unregistered when Private Browsing
        /// mode is entered or exited.  Therefore, consumers MUST unregister or
        /// register themselves.
        ///
        /// @note This is just an alias for
        /// mozIPlacesAutoComplete::unregisterOpenPage.
        ///
        /// @status DEPRECATED
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnregisterOpenPage([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI);
	}
}
