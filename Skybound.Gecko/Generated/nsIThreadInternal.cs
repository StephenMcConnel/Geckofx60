// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIThreadInternal.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIThreadInternal.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIThreadInternal </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("f89b5063-b06d-42f8-bf23-4dfcf2d80d6a")]
	public interface nsIThreadInternal : nsIThread
	{
		
		/// <summary>Member Dispatch </summary>
		/// <param name='event'> </param>
		/// <param name='flags'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Dispatch([MarshalAs(UnmanagedType.Interface)] nsIRunnable  @event, System.UInt32  flags);
		
		/// <summary>Member IsOnCurrentThread </summary>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool IsOnCurrentThread();
		
		/// <summary>Member GetPRThreadAttribute </summary>
		/// <returns>A System.IntPtr </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.IntPtr  GetPRThreadAttribute();
		
		/// <summary>Member Shutdown </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Shutdown();
		
		/// <summary>Member HasPendingEvents </summary>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool HasPendingEvents();
		
		/// <summary>Member ProcessNextEvent </summary>
		/// <param name='mayWait'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool ProcessNextEvent(System.Boolean  mayWait);
		
		/// <summary>Member GetObserverAttribute </summary>
		/// <returns>A nsIThreadObserver </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIThreadObserver  GetObserverAttribute();
		
		/// <summary>Member SetObserverAttribute </summary>
		/// <param name='aObserver'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetObserverAttribute([MarshalAs(UnmanagedType.Interface)] nsIThreadObserver  aObserver);
		
		/// <summary>Member PushEventQueue </summary>
		/// <param name='filter'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PushEventQueue([MarshalAs(UnmanagedType.Interface)] nsIThreadEventFilter  filter);
		
		/// <summary>Member PopEventQueue </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PopEventQueue();
	}
	
	/// <summary>nsIThreadObserver </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("81D0B509-F198-4417-8020-08EB4271491F")]
	public interface nsIThreadObserver
	{
		
		/// <summary>Member OnDispatchedEvent </summary>
		/// <param name='thread'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnDispatchedEvent([MarshalAs(UnmanagedType.Interface)] nsIThreadInternal  thread);
		
		/// <summary>Member OnProcessNextEvent </summary>
		/// <param name='thread'> </param>
		/// <param name='mayWait'> </param>
		/// <param name='recursionDepth'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnProcessNextEvent([MarshalAs(UnmanagedType.Interface)] nsIThreadInternal  thread, System.Boolean  mayWait, System.UInt32  recursionDepth);
		
		/// <summary>Member AfterProcessNextEvent </summary>
		/// <param name='thread'> </param>
		/// <param name='recursionDepth'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AfterProcessNextEvent([MarshalAs(UnmanagedType.Interface)] nsIThreadInternal  thread, System.UInt32  recursionDepth);
	}
	
	/// <summary>nsIThreadEventFilter </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("a0605c0b-17f5-4681-b8cd-a1cd75d42559")]
	public interface nsIThreadEventFilter
	{
		
		/// <summary>Member AcceptEvent </summary>
		/// <param name='event'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool AcceptEvent([MarshalAs(UnmanagedType.Interface)] nsIRunnable  @event);
	}
	
	/// <summary>nsIThreadInternal2 </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("4531f101-fddc-4d36-80e7-35260a2f3afe")]
	public interface nsIThreadInternal2 : nsIThreadInternal
	{
		
		/// <summary>Member Dispatch </summary>
		/// <param name='event'> </param>
		/// <param name='flags'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Dispatch([MarshalAs(UnmanagedType.Interface)] nsIRunnable  @event, System.UInt32  flags);
		
		/// <summary>Member IsOnCurrentThread </summary>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool IsOnCurrentThread();
		
		/// <summary>Member GetPRThreadAttribute </summary>
		/// <returns>A System.IntPtr </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new System.IntPtr  GetPRThreadAttribute();
		
		/// <summary>Member Shutdown </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Shutdown();
		
		/// <summary>Member HasPendingEvents </summary>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool HasPendingEvents();
		
		/// <summary>Member ProcessNextEvent </summary>
		/// <param name='mayWait'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool ProcessNextEvent(System.Boolean  mayWait);
		
		/// <summary>Member GetObserverAttribute </summary>
		/// <returns>A nsIThreadObserver </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIThreadObserver  GetObserverAttribute();
		
		/// <summary>Member SetObserverAttribute </summary>
		/// <param name='aObserver'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetObserverAttribute([MarshalAs(UnmanagedType.Interface)] nsIThreadObserver  aObserver);
		
		/// <summary>Member PushEventQueue </summary>
		/// <param name='filter'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void PushEventQueue([MarshalAs(UnmanagedType.Interface)] nsIThreadEventFilter  filter);
		
		/// <summary>Member PopEventQueue </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void PopEventQueue();
		
		/// <summary>Member GetRecursionDepthAttribute </summary>
		/// <returns>A System.UInt32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetRecursionDepthAttribute();
		
		/// <summary>Member AddObserver </summary>
		/// <param name='observer'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddObserver([MarshalAs(UnmanagedType.Interface)] nsIThreadObserver  observer);
		
		/// <summary>Member RemoveObserver </summary>
		/// <param name='observer'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveObserver([MarshalAs(UnmanagedType.Interface)] nsIThreadObserver  observer);
	}
}
