// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIRwsService.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIRwsService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIRwsService </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("74a1105c-7e5a-418e-9a57-a0fc8cc992fc")]
	public interface nsIRwsService
	{
		
		/// <summary>Member IconFromExtension </summary>
		/// <param name='aExt'> </param>
		/// <param name='aNeedMini'> </param>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint IconFromExtension([MarshalAs(UnmanagedType.LPStr)] System.String  aExt, System.Boolean  aNeedMini);
		
		/// <summary>Member IconFromPath </summary>
		/// <param name='aPath'> </param>
		/// <param name='aAbstract'> </param>
		/// <param name='aNeedMini'> </param>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint IconFromPath([MarshalAs(UnmanagedType.LPStr)] System.String  aPath, System.Boolean  aAbstract, System.Boolean  aNeedMini);
		
		/// <summary>Member IconFromHandle </summary>
		/// <param name='aHandle'> </param>
		/// <param name='aNeedMini'> </param>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint IconFromHandle(System.UInt32  aHandle, System.Boolean  aNeedMini);
		
		/// <summary>Member HandlerFromExtension </summary>
		/// <param name='aExt'> </param>
		/// <param name='aHandle'> </param>
		/// <returns>A nsAString</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString HandlerFromExtension([MarshalAs(UnmanagedType.LPStr)] System.String  aExt, out System.UInt32  aHandle);
		
		/// <summary>Member HandlerFromPath </summary>
		/// <param name='aPath'> </param>
		/// <param name='aHandle'> </param>
		/// <returns>A nsAString</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString HandlerFromPath([MarshalAs(UnmanagedType.LPStr)] System.String  aPath, out System.UInt32  aHandle);
		
		/// <summary>Member TitleFromHandle </summary>
		/// <param name='aHandle'> </param>
		/// <returns>A nsAString</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString TitleFromHandle(System.UInt32  aHandle);
		
		/// <summary>Member MenuFromPath </summary>
		/// <param name='aPath'> </param>
		/// <param name='aAbstract'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MenuFromPath([MarshalAs(UnmanagedType.LPStr)] System.String  aPath, System.Boolean  aAbstract);
		
		/// <summary>Member OpenWithAppPath </summary>
		/// <param name='aFilePath'> </param>
		/// <param name='aAppPath'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OpenWithAppPath([MarshalAs(UnmanagedType.LPStr)] System.String  aFilePath, [MarshalAs(UnmanagedType.LPStr)] System.String  aAppPath);
		
		/// <summary>Member OpenWithAppHandle </summary>
		/// <param name='aFilePath'> </param>
		/// <param name='aAppHandle'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OpenWithAppHandle([MarshalAs(UnmanagedType.LPStr)] System.String  aFilePath, System.UInt32  aAppHandle);
	}
}
