// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIDOMSVGTransform.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIDOMSVGTransform </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("29cc2e14-6d18-4710-bda9-a88d9d3bc8dc")]
	public interface nsIDOMSVGTransform
	{
		
		/// <summary>
        /// Transform Types
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetTypeAttribute();
		
		/// <summary>Member GetMatrixAttribute </summary>
		/// <returns>A nsIDOMSVGMatrix </returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMSVGMatrix  GetMatrixAttribute();
		
		/// <summary>Member GetAngleAttribute </summary>
		/// <returns>A System.Double</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetAngleAttribute();
		
		/// <summary>Member SetMatrix </summary>
		/// <param name='matrix'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetMatrix([MarshalAs(UnmanagedType.Interface)] nsIDOMSVGMatrix  matrix);
		
		/// <summary>Member SetTranslate </summary>
		/// <param name='tx'> </param>
		/// <param name='ty'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetTranslate(double tx, double ty);
		
		/// <summary>Member SetScale </summary>
		/// <param name='sx'> </param>
		/// <param name='sy'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetScale(double sx, double sy);
		
		/// <summary>Member SetRotate </summary>
		/// <param name='angle'> </param>
		/// <param name='cx'> </param>
		/// <param name='cy'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetRotate(double angle, double cx, double cy);
		
		/// <summary>Member SetSkewX </summary>
		/// <param name='angle'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetSkewX(double angle);
		
		/// <summary>Member SetSkewY </summary>
		/// <param name='angle'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetSkewY(double angle);
	}
}
