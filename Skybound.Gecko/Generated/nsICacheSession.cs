// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsICacheSession.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsICacheSession.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsICacheSession </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ae9e84b5-3e2d-457e-8fcd-5bbd2a8b832e")]
	public interface nsICacheSession
	{
		
		/// <summary>Member GetDoomEntriesIfExpiredAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetDoomEntriesIfExpiredAttribute();
		
		/// <summary>Member SetDoomEntriesIfExpiredAttribute </summary>
		/// <param name='aDoomEntriesIfExpired'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDoomEntriesIfExpiredAttribute(System.Boolean  aDoomEntriesIfExpired);
		
		/// <summary>Member OpenCacheEntry </summary>
		/// <param name='key'> </param>
		/// <param name='accessRequested'> </param>
		/// <param name='blockingMode'> </param>
		/// <returns>A nsICacheEntryDescriptor</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsICacheEntryDescriptor OpenCacheEntry([MarshalAs(UnmanagedType.LPStruct)] nsAString  key, System.IntPtr accessRequested, System.Boolean  blockingMode);
		
		/// <summary>Member AsyncOpenCacheEntry </summary>
		/// <param name='key'> </param>
		/// <param name='accessRequested'> </param>
		/// <param name='listener'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AsyncOpenCacheEntry([MarshalAs(UnmanagedType.LPStruct)] nsAString  key, System.IntPtr accessRequested, [MarshalAs(UnmanagedType.Interface)] nsICacheListener  listener);
		
		/// <summary>Member EvictEntries </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EvictEntries();
		
		/// <summary>Member IsStorageEnabled </summary>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsStorageEnabled();
	}
}
