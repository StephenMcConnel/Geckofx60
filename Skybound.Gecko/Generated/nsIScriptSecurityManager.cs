// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIScriptSecurityManager.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIScriptSecurityManager.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIScriptSecurityManager </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("50eda256-4dd2-4c7c-baed-96983910af9f")]
	public interface nsIScriptSecurityManager : nsIXPCSecurityManager
	{
		
		/// <summary>Member CanCreateWrapper </summary>
		/// <param name='aJSContext'> </param>
		/// <param name='aIID'> </param>
		/// <param name='aObj'> </param>
		/// <param name='aClassInfo'> </param>
		/// <param name='aPolicy'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void CanCreateWrapper(System.IntPtr  aJSContext, ref System.Guid aIID, [MarshalAs(UnmanagedType.Interface)] nsISupports  aObj, [MarshalAs(UnmanagedType.Interface)] nsIClassInfo  aClassInfo, ref System.IntPtr  aPolicy);
		
		/// <summary>Member CanCreateInstance </summary>
		/// <param name='aJSContext'> </param>
		/// <param name='aCID'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void CanCreateInstance(System.IntPtr  aJSContext, ref System.Guid aCID);
		
		/// <summary>Member CanGetService </summary>
		/// <param name='aJSContext'> </param>
		/// <param name='aCID'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void CanGetService(System.IntPtr  aJSContext, ref System.Guid aCID);
		
		/// <summary>Member CanAccess </summary>
		/// <param name='aAction'> </param>
		/// <param name='aCallContext'> </param>
		/// <param name='aJSContext'> </param>
		/// <param name='aJSObject'> </param>
		/// <param name='aObj'> </param>
		/// <param name='aClassInfo'> </param>
		/// <param name='aName'> </param>
		/// <param name='aPolicy'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void CanAccess(System.UInt32  aAction, System.IntPtr aCallContext, System.IntPtr  aJSContext, System.IntPtr  aJSObject, [MarshalAs(UnmanagedType.Interface)] nsISupports  aObj, [MarshalAs(UnmanagedType.Interface)] nsIClassInfo  aClassInfo, System.IntPtr aName, ref System.IntPtr  aPolicy);
		
		/// <summary>Member CheckPropertyAccess </summary>
		/// <param name='aJSContext'> </param>
		/// <param name='aJSObject'> </param>
		/// <param name='aClassName'> </param>
		/// <param name='aProperty'> </param>
		/// <param name='aAction'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CheckPropertyAccess(System.IntPtr  aJSContext, System.IntPtr  aJSObject, [MarshalAs(UnmanagedType.LPStr)] System.String  aClassName, System.IntPtr aProperty, System.UInt32  aAction);
		
		/// <summary>Member CheckLoadURIFromScript </summary>
		/// <param name='cx'> </param>
		/// <param name='uri'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CheckLoadURIFromScript(System.IntPtr  cx, [MarshalAs(UnmanagedType.Interface)] nsIURI  uri);
		
		/// <summary>Member CheckLoadURIWithPrincipal </summary>
		/// <param name='aPrincipal'> </param>
		/// <param name='uri'> </param>
		/// <param name='flags'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CheckLoadURIWithPrincipal([MarshalAs(UnmanagedType.Interface)] nsIPrincipal  aPrincipal, [MarshalAs(UnmanagedType.Interface)] nsIURI  uri, System.UInt32  flags);
		
		/// <summary>Member CheckLoadURI </summary>
		/// <param name='from'> </param>
		/// <param name='uri'> </param>
		/// <param name='flags'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CheckLoadURI([MarshalAs(UnmanagedType.Interface)] nsIURI  from, [MarshalAs(UnmanagedType.Interface)] nsIURI  uri, System.UInt32  flags);
		
		/// <summary>Member CheckLoadURIStrWithPrincipal </summary>
		/// <param name='aPrincipal'> </param>
		/// <param name='uri'> </param>
		/// <param name='flags'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CheckLoadURIStrWithPrincipal([MarshalAs(UnmanagedType.Interface)] nsIPrincipal  aPrincipal, [MarshalAs(UnmanagedType.LPStruct)] nsAString  uri, System.UInt32  flags);
		
		/// <summary>Member CheckLoadURIStr </summary>
		/// <param name='from'> </param>
		/// <param name='uri'> </param>
		/// <param name='flags'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CheckLoadURIStr([MarshalAs(UnmanagedType.LPStruct)] nsAString  from, [MarshalAs(UnmanagedType.LPStruct)] nsAString  uri, System.UInt32  flags);
		
		/// <summary>Member CheckFunctionAccess </summary>
		/// <param name='cx'> </param>
		/// <param name='funObj'> </param>
		/// <param name='targetObj'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CheckFunctionAccess(System.IntPtr  cx, System.IntPtr  funObj, System.IntPtr  targetObj);
		
		/// <summary>Member CanExecuteScripts </summary>
		/// <param name='cx'> </param>
		/// <param name='principal'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool CanExecuteScripts(System.IntPtr  cx, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal  principal);
		
		/// <summary>Member GetSubjectPrincipal </summary>
		/// <returns>A nsIPrincipal</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPrincipal GetSubjectPrincipal();
		
		/// <summary>Member GetSystemPrincipal </summary>
		/// <returns>A nsIPrincipal</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPrincipal GetSystemPrincipal();
		
		/// <summary>Member GetCertificatePrincipal </summary>
		/// <param name='aCertFingerprint'> </param>
		/// <param name='aSubjectName'> </param>
		/// <param name='aPrettyName'> </param>
		/// <param name='aCert'> </param>
		/// <param name='aURI'> </param>
		/// <returns>A nsIPrincipal</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPrincipal GetCertificatePrincipal([MarshalAs(UnmanagedType.LPStruct)] nsAString  aCertFingerprint, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aSubjectName, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aPrettyName, [MarshalAs(UnmanagedType.Interface)] nsISupports  aCert, [MarshalAs(UnmanagedType.Interface)] nsIURI  aURI);
		
		/// <summary>Member GetCodebasePrincipal </summary>
		/// <param name='aURI'> </param>
		/// <returns>A nsIPrincipal</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPrincipal GetCodebasePrincipal([MarshalAs(UnmanagedType.Interface)] nsIURI  aURI);
		
		/// <summary>Member RequestCapability </summary>
		/// <param name='principal'> </param>
		/// <param name='capability'> </param>
		/// <returns>A System.Int16</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		short RequestCapability([MarshalAs(UnmanagedType.Interface)] nsIPrincipal  principal, [MarshalAs(UnmanagedType.LPStr)] System.String  capability);
		
		/// <summary>Member IsCapabilityEnabled </summary>
		/// <param name='capability'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsCapabilityEnabled([MarshalAs(UnmanagedType.LPStr)] System.String  capability);
		
		/// <summary>Member EnableCapability </summary>
		/// <param name='capability'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EnableCapability([MarshalAs(UnmanagedType.LPStr)] System.String  capability);
		
		/// <summary>Member RevertCapability </summary>
		/// <param name='capability'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RevertCapability([MarshalAs(UnmanagedType.LPStr)] System.String  capability);
		
		/// <summary>Member DisableCapability </summary>
		/// <param name='capability'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DisableCapability([MarshalAs(UnmanagedType.LPStr)] System.String  capability);
		
		/// <summary>Member SetCanEnableCapability </summary>
		/// <param name='certificateFingerprint'> </param>
		/// <param name='capability'> </param>
		/// <param name='canEnable'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCanEnableCapability([MarshalAs(UnmanagedType.LPStruct)] nsAString  certificateFingerprint, [MarshalAs(UnmanagedType.LPStr)] System.String  capability, short canEnable);
		
		/// <summary>Member GetObjectPrincipal </summary>
		/// <param name='cx'> </param>
		/// <param name='obj'> </param>
		/// <returns>A nsIPrincipal</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPrincipal GetObjectPrincipal(System.IntPtr  cx, System.IntPtr  obj);
		
		/// <summary>Member SubjectPrincipalIsSystem </summary>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool SubjectPrincipalIsSystem();
		
		/// <summary>Member CheckSameOrigin </summary>
		/// <param name='aJSContext'> </param>
		/// <param name='aTargetURI'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CheckSameOrigin(System.IntPtr  aJSContext, [MarshalAs(UnmanagedType.Interface)] nsIURI  aTargetURI);
		
		/// <summary>Member CheckSameOriginURI </summary>
		/// <param name='aSourceURI'> </param>
		/// <param name='aTargetURI'> </param>
		/// <param name='reportError'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CheckSameOriginURI([MarshalAs(UnmanagedType.Interface)] nsIURI  aSourceURI, [MarshalAs(UnmanagedType.Interface)] nsIURI  aTargetURI, System.Boolean  reportError);
		
		/// <summary>Member GetPrincipalFromContext </summary>
		/// <param name='cx'> </param>
		/// <returns>A nsIPrincipal</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPrincipal GetPrincipalFromContext(System.IntPtr  cx);
		
		/// <summary>Member GetChannelPrincipal </summary>
		/// <param name='aChannel'> </param>
		/// <returns>A nsIPrincipal</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPrincipal GetChannelPrincipal([MarshalAs(UnmanagedType.Interface)] nsIChannel  aChannel);
		
		/// <summary>Member IsSystemPrincipal </summary>
		/// <param name='aPrincipal'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsSystemPrincipal([MarshalAs(UnmanagedType.Interface)] nsIPrincipal  aPrincipal);
		
		/// <summary>Member GetCxSubjectPrincipal </summary>
		/// <param name='cx'> </param>
		/// <returns>A nsIPrincipal</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPrincipal GetCxSubjectPrincipal(System.IntPtr  cx);
		
		/// <summary>Member GetCxSubjectPrincipalAndFrame </summary>
		/// <param name='cx'> </param>
		/// <param name='fp'> </param>
		/// <returns>A nsIPrincipal</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPrincipal GetCxSubjectPrincipalAndFrame(System.IntPtr  cx, out System.IntPtr fp);
		
		/// <summary>Member PushContextPrincipal </summary>
		/// <param name='cx'> </param>
		/// <param name='fp'> </param>
		/// <param name='principal'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PushContextPrincipal(System.IntPtr  cx, System.IntPtr fp, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal  principal);
		
		/// <summary>Member PopContextPrincipal </summary>
		/// <param name='cx'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PopContextPrincipal(System.IntPtr  cx);
	}
}
