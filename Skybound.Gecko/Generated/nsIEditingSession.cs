// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsIEditingSession.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsIEditingSession.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsIEditingSession </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("24f3f4da-18a4-448d-876d-7360fefac029")]
	public interface nsIEditingSession
	{
		
		/// <summary>Member GetEditorStatusAttribute </summary>
		/// <returns>A System.UInt32 </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.UInt32  GetEditorStatusAttribute();
		
		/// <summary>Member MakeWindowEditable </summary>
		/// <param name='window'> </param>
		/// <param name='aEditorType'> </param>
		/// <param name='doAfterUriLoad'> </param>
		/// <param name='aMakeWholeDocumentEditable'> </param>
		/// <param name='aInteractive'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MakeWindowEditable([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  window, [MarshalAs(UnmanagedType.LPStr)] System.String  aEditorType, System.Boolean  doAfterUriLoad, System.Boolean  aMakeWholeDocumentEditable, System.Boolean  aInteractive);
		
		/// <summary>Member WindowIsEditable </summary>
		/// <param name='window'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool WindowIsEditable([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  window);
		
		/// <summary>Member GetEditorForWindow </summary>
		/// <param name='window'> </param>
		/// <returns>A nsIEditor</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIEditor GetEditorForWindow([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  window);
		
		/// <summary>Member SetupEditorOnWindow </summary>
		/// <param name='window'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetupEditorOnWindow([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  window);
		
		/// <summary>Member TearDownEditorOnWindow </summary>
		/// <param name='window'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void TearDownEditorOnWindow([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  window);
		
		/// <summary>Member SetEditorOnControllers </summary>
		/// <param name='aWindow'> </param>
		/// <param name='aEditor'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetEditorOnControllers([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  aWindow, [MarshalAs(UnmanagedType.Interface)] nsIEditor  aEditor);
		
		/// <summary>Member DisableJSAndPlugins </summary>
		/// <param name='aWindow'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DisableJSAndPlugins([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  aWindow);
		
		/// <summary>Member RestoreJSAndPlugins </summary>
		/// <param name='aWindow'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RestoreJSAndPlugins([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  aWindow);
		
		/// <summary>Member DetachFromWindow </summary>
		/// <param name='aWindow'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DetachFromWindow([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  aWindow);
		
		/// <summary>Member ReattachToWindow </summary>
		/// <param name='aWindow'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ReattachToWindow([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow  aWindow);
		
		/// <summary>Member GetJsAndPluginsDisabledAttribute </summary>
		/// <returns>A System.Boolean </returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.Boolean  GetJsAndPluginsDisabledAttribute();
	}
}
