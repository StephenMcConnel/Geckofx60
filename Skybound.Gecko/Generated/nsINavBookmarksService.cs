// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsINavBookmarksService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>
    /// Observer for bookmark changes.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("76f892d9-31ea-4061-b38c-6b40fad57e9d")]
	public interface nsINavBookmarkObserver
	{
		
		/// <summary>
        /// Notify this observer that a batch transaction has started.
        /// Other notifications will be sent during the batch change,
        /// but the observer is guaranteed that onEndUpdateBatch() will be called
        /// at the completion of changes.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnBeginUpdateBatch();
		
		/// <summary>
        /// Notify this observer that a batch transaction has ended.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnEndUpdateBatch();
		
		/// <summary>
        /// Notify this observer that an item was added.  Called after the actual
        /// add took place. The items following the index will be shifted down, but
        /// no additional notifications will be sent.
        ///
        /// @param aItemId
        /// The id of the bookmark that was added.
        /// @param aParentId
        /// The id of the folder to which the item was added.
        /// @param aIndex
        /// The item's index in the folder.
        /// @param aItemType
        /// The type of the item that was added (one of the TYPE_* constants
        /// defined above).
        /// @param aURI
        /// The URI of the item that was added when aItemType is TYPE_BOOKMARK,
        /// null otherwise.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnItemAdded(int aItemId, int aParentId, int aIndex, ushort aItemType, [MarshalAs(UnmanagedType.Interface)] nsIURI aURI);
		
		/// <summary>
        /// Notify this observer that an item is about to be removed.  Called before
        /// the actual removal will take place.
        ///
        /// @param aItemId
        /// The id of the bookmark to be removed.
        /// @param aItemType
        /// The type of the item to be removed (one of the TYPE_* constants
        /// defined above).
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnBeforeItemRemoved(int aItemId, ushort aItemType);
		
		/// <summary>
        /// Notify this observer that an item was removed.  Called after the actual
        /// remove took place. The items following the index will be shifted up, but
        /// no additional notifications will be sent.
        ///
        /// @param aItemId
        /// The id of the item that was removed.
        /// @param aParentId
        /// The id of the folder from which the item was removed.
        /// @param aIndex
        /// The bookmark's index in the folder.
        /// @param aItemType
        /// The type of the item that was removed (one of the TYPE_* constants
        /// defined above).
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnItemRemoved(int aItemId, int aParentId, int aIndex, ushort aItemType);
		
		/// <summary>
        /// Notify this observer that an item's information has changed.  This
        /// will be called whenever any attributes like "title" are changed.
        ///
        /// @param aItemId
        /// The id of the item that was changed.
        /// @param aProperty
        /// The property which changed.
        /// @param aIsAnnotationProperty
        /// Whether or not aProperty the name of an item annotation.
        /// @param aProperty
        /// The property which has been changed (see list below).
        /// @param aNewValue
        /// For certain properties, this is set to the new value of the
        /// property (see list below).
        /// @param aLastModified
        /// If the item's lastModified field has changed, this parameter is
        /// set to the new value, otherwise it's set to 0.
        /// @param aItemType
        /// The type of the item that has been changed(one of the TYPE_* constants
        /// defined above).
        ///
        /// property = "cleartime": (history was deleted, there is no last visit date):
        /// value = empty string.
        /// property = "title": value = new title.
        /// property = "favicon": value = new "moz-anno" URL of favicon image
        /// property = "uri": value = new uri spec.
        /// property = "tags: (tags set for the bookmarked uri have changed)
        /// value = empty string.
        /// property = "dateAdded": value = PRTime when the item was first added
        /// property = "lastModified": value = PRTime when the item was last modified
        /// aIsAnnotationProperty = true: value = empty string.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnItemChanged(int aItemId, [MarshalAs(UnmanagedType.LPStruct)] nsAString aProperty, bool aIsAnnotationProperty, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String aNewValue, uint aLastModified, ushort aItemType);
		
		/// <summary>
        /// Notify that the item was visited. Normally in bookmarks we use the last
        /// visit date, and normally the time will be a new visit that will be more
        /// recent, but this is not guaranteed. You should check to see if it's
        /// actually more recent before using this new time.
        ///
        /// @param aBookmarkId
        /// The id of the bookmark that was visited.
        /// @see onItemChanged property = "cleartime" for when all visit dates are
        /// deleted for the URI.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnItemVisited(int aBookmarkId, int aVisitID, uint time);
		
		/// <summary>
        /// Notify this observer that an item has been moved.
        /// @param aItemId
        /// The id of the item that was moved.
        /// @param aOldParentId
        /// The id of the old parent.
        /// @param aOldIndex
        /// The old index inside the old parent.
        /// @param aNewParentId
        /// The id of the new parent.
        /// @param aNewIndex
        /// The index inside the new parent.
        /// @param  aItemType
        /// The type of the item that was moved (one of the TYPE_* constants
        /// defined above).
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnItemMoved(int aItemId, int aOldParentId, int aOldIndex, int aNewParentId, int aNewIndex, ushort aItemType);
	}
	
	/// <summary>
    /// The BookmarksService interface provides methods for managing bookmarked
    /// history items.  Bookmarks consist of a set of user-customizable
    /// folders.  A URI in history can be contained in one or more such folders.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("573f99bd-988c-4253-836f-4ce009d33ac6")]
	public interface nsINavBookmarksService
	{
		
		/// <summary>
        /// The item ID of the Places root.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetPlacesRootAttribute();
		
		/// <summary>
        /// The item ID of the bookmarks menu folder.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetBookmarksMenuFolderAttribute();
		
		/// <summary>
        /// The item ID of the top-level folder that contain the tag "folders".
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetTagsFolderAttribute();
		
		/// <summary>
        /// The item ID of the unfiled-bookmarks folder.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetUnfiledBookmarksFolderAttribute();
		
		/// <summary>
        /// The item ID of the personal toolbar folder.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetToolbarFolderAttribute();
		
		/// <summary>
        /// Inserts a child bookmark into the given folder.
        ///
        /// @param aParentId
        /// The id of the parent folder
        /// @param aURI
        /// The URI to insert
        /// @param aIndex
        /// The index to insert at, or DEFAULT_INDEX to append
        /// @param aTitle
        /// The title for the new bookmark
        /// @return The ID of the newly-created bookmark.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int InsertBookmark(int aParentId, [MarshalAs(UnmanagedType.Interface)] nsIURI aURI, int aIndex, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String aTitle);
		
		/// <summary>
        /// Removes a child item. Used to delete a bookmark or separator.
        /// @param aItemId
        /// The child item to remove
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveItem(int aItemId);
		
		/// <summary>
        /// Creates a new child folder and inserts it under the given parent.
        /// @param aParentFolder
        /// The id of the parent folder
        /// @param aName
        /// The name of the new folder
        /// @param aIndex
        /// The index to insert at, or DEFAULT_INDEX to append
        /// @return The ID of the newly-inserted folder.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int CreateFolder(int aParentFolder, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String name, int index);
		
		/// <summary>
        /// Creates a dynamic container under the given parent folder.
        ///
        /// @param aParentFolder
        /// The id of the parent folder
        /// @param aName
        /// The name of the new folder
        /// @param aContractId
        /// The contract id of the service which is to manipulate this
        /// container.
        /// @param aIndex
        /// The index to insert at, or DEFAULT_INDEX to append
        ///
        /// @return The ID of the newly-inserted folder.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int CreateDynamicContainer(int aParentFolder, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String aName, [MarshalAs(UnmanagedType.LPStruct)] nsAString aContractId, int aIndex);
		
		/// <summary>
        /// Gets an undo-able transaction for removing a folder from the bookmarks
        /// tree.
        /// @param aItemId
        /// The id of the folder to remove.
        /// @return An object implementing nsITransaction that can be used to undo
        /// or redo the action.
        ///
        /// This method exists because complex delete->undo operations rely on
        /// recreated folders to have the same ID they had before they were deleted,
        /// so that any other items deleted in different transactions can be
        /// re-inserted correctly. This provides a safe encapsulation of this
        /// functionality without exposing the ability to recreate folders with
        /// specific IDs (potentially dangerous if abused by other code!) in the
        /// public API.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsITransaction GetRemoveFolderTransaction(int aItemId);
		
		/// <summary>
        /// Convenience function for container services.  Removes
        /// all children of the given folder.
        /// @param aItemId
        /// The id of the folder to remove children from.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveFolderChildren(int aItemId);
		
		/// <summary>
        /// Moves an item to a different container, preserving its contents.
        /// @param aItemId
        /// The id of the item to move
        /// @param aNewParentId
        /// The id of the new parent
        /// @param aIndex
        /// The index under aNewParent, or DEFAULT_INDEX to append
        ///
        /// NOTE: When moving down in the same container we take into account the
        /// removal of the original item. If you want to move from index X to
        /// index Y > X you must use moveItem(id, folder, Y + 1)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MoveItem(int aItemId, int aNewParentId, int aIndex);
		
		/// <summary>
        /// Inserts a bookmark separator into the given folder at the given index.
        /// The separator can be removed using removeChildAt().
        /// @param aParentId
        /// The id of the parent folder
        /// @param aIndex
        /// The separator's index under folder, or DEFAULT_INDEX to append
        /// @return The ID of the new separator.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int InsertSeparator(int aParentId, int aIndex);
		
		/// <summary>
        /// Get the itemId given the containing folder and the index.
        /// @param aParentId
        /// The id of the diret parent folder of the item
        /// @param aIndex
        /// The index of the item within the parent folder.
        /// Pass DEFAULT_INDEX for the last item.
        /// @return The ID of the found item, -1 if the item does not exists.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetIdForItemAt(int aParentId, int aIndex);
		
		/// <summary>
        /// Get a globally unique identifier for an item, meant to be used in
        /// sync scenarios.  Even if their contents are exactly the same
        /// (including an item in a different profile with the same ItemId),
        /// the GUID would be different.
        /// @param   aItemId
        /// The ID of the item to get the GUID for
        /// @return The GUID string.
        /// </summary>
		[return: MarshalAs(UnmanagedType.LPStruct)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString GetItemGUID(int aItemId);
		
		/// <summary>
        /// Set a globally unique identifier.  This can be useful when a sync
        /// algorithm deems two independently created items (on different
        /// profiles) to be the same item.
        /// @param   aItemId
        /// The id of the item to set the GUID of
        /// @param   aGUID
        /// The GUID string
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetItemGUID(int aItemId, [MarshalAs(UnmanagedType.LPStruct)] nsAString aGUID);
		
		/// <summary>
        /// Get the ID of the item with the given GUID.
        /// @param   aGUID
        /// The GUID string of the item to search for
        /// @return The item ID, or -1 if not found.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetItemIdForGUID([MarshalAs(UnmanagedType.LPStruct)] nsAString aGUID);
		
		/// <summary>
        /// Set the title for an item.
        /// @param aItemId
        /// The id of the item whose title should be updated
        /// @param aTitle
        /// The new title for the bookmark.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetItemTitle(int aItemId, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8String aTitle);
		
		/// <summary>
        /// Get the title for an item.
        ///
        /// If no item title is available it will return a void string (null in JS).
        ///
        /// @param aItemId
        /// The id of the item whose title should be retrieved
        /// @return The title of the item.
        /// </summary>
		[return: MarshalAs(UnmanagedType.LPStruct)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAUTF8String GetItemTitle(int aItemId);
		
		/// <summary>
        /// Set the date added time for an item.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetItemDateAdded(int aItemId, uint aDateAdded);
		
		/// <summary>
        /// Get the date added time for an item.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetItemDateAdded(int aItemId);
		
		/// <summary>
        /// Set the last modified time for an item.
        ///
        /// @note This is the only method that will send an itemChanged notification
        /// for the property.  lastModified will still be updated in
        /// any other method that changes an item property, but we will send
        /// the corresponding itemChanged notification instead.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetItemLastModified(int aItemId, uint aLastModified);
		
		/// <summary>
        /// Get the last modified time for an item.
        ///
        /// @note When an item is added lastModified is set to the same value as
        /// dateAdded.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetItemLastModified(int aItemId);
		
		/// <summary>
        /// Get the URI for a bookmark item.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIURI GetBookmarkURI(int aItemId);
		
		/// <summary>
        /// Get the index for an item.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetItemIndex(int aItemId);
		
		/// <summary>
        /// Changes the index for a item. This method does not change the indices of
        /// any other items in the same folder, so ensure that the new index does not
        /// already exist, or change the index of other items accordingly, otherwise
        /// the indices will become corrupted.
        ///
        /// WARNING: This is API is intended for scenarios such as folder sorting,
        /// where the caller manages the indices of *all* items in the folder.
        /// You must always ensure each index is unique after a reordering.
        ///
        /// @param aItemId    The id of the item to modify
        /// @param aNewIndex  The new index
        ///
        /// @throws If aNewIndex is out of bounds.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetItemIndex(int aItemId, int aNewIndex);
		
		/// <summary>
        /// Get an item's type (bookmark, separator, folder).
        /// The type is one of the TYPE_* constants defined above.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetItemType(int aItemId);
		
		/// <summary>
        /// Checks whether a folder is marked as read-only.
        /// If this is set to true, UI will not allow the user to add, remove,
        /// or reorder children in this folder. The default for all folders is false.
        /// Note: This does not restrict API calls, only UI actions.
        ///
        /// @param aItemId
        /// the item-id of the folder.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetFolderReadonly(int aItemId);
		
		/// <summary>
        /// Sets or unsets the readonly flag from a folder.
        /// If this is set to true, UI will not allow the user to add, remove,
        /// or reorder children in this folder. The default for all folders is false.
        /// Note: This does not restrict API calls, only UI actions.
        ///
        /// @param aFolder
        /// the item-id of the folder.
        /// @param aReadOnly
        /// the read-only state (boolean).
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetFolderReadonly(int aFolder, bool aReadOnly);
		
		/// <summary>
        /// Returns true if the given URI is in any bookmark folder. If you want the
        /// results to be redirect-aware, use getBookmarkedURIFor()
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsBookmarked([MarshalAs(UnmanagedType.Interface)] nsIURI aURI);
		
		/// <summary>
        /// Used to see if the given URI is bookmarked, or any page that redirected to
        /// it is bookmarked. For example, if I bookmark "mozilla.org" by manually
        /// typing it in, and follow the bookmark, I will get redirected to
        /// "www.mozilla.org". Logically, this new page is also bookmarked. This
        /// function, if given "www.mozilla.org", will return the URI of the bookmark,
        /// in this case "mozilla.org".
        ///
        /// If there is no bookmarked page found, it will return NULL.
        ///
        /// @note The function will only return bookmarks in the first 3 levels of
        /// redirection (1 -> 2 -> 3 -> aURI).
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIURI GetBookmarkedURIFor([MarshalAs(UnmanagedType.Interface)] nsIURI aURI);
		
		/// <summary>
        /// Change the bookmarked URI for a bookmark.
        /// This changes which "place" the bookmark points at,
        /// which means all annotations, etc are carried along.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ChangeBookmarkURI(int aItemId, [MarshalAs(UnmanagedType.Interface)] nsIURI aNewURI);
		
		/// <summary>
        /// Get the parent folder's id for an item.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetFolderIdForItem(int aItemId);
		
		/// <summary>
        /// Returns the list of bookmark ids that contain the given URI.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetBookmarkIdsForURI([MarshalAs(UnmanagedType.Interface)] nsIURI aURI, out uint count);
		
		/// <summary>
        /// Associates the given keyword with the given bookmark.
        ///
        /// Use an empty keyword to clear the keyword associated with the URI.
        /// In both of these cases, succeeds but does nothing if the URL/keyword is not found.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetKeywordForBookmark(int aItemId, [MarshalAs(UnmanagedType.LPStruct)] nsAString aKeyword);
		
		/// <summary>
        /// Retrieves the keyword for the given URI. Will be void string
        /// (null in JS) if no such keyword is found.
        /// </summary>
		[return: MarshalAs(UnmanagedType.LPStruct)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString GetKeywordForURI([MarshalAs(UnmanagedType.Interface)] nsIURI aURI);
		
		/// <summary>
        /// Retrieves the keyword for the given bookmark. Will be void string
        /// (null in JS) if no such keyword is found.
        /// </summary>
		[return: MarshalAs(UnmanagedType.LPStruct)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsAString GetKeywordForBookmark(int aItemId);
		
		/// <summary>
        /// Returns the URI associated with the given keyword. Empty if no such
        /// keyword is found.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIURI GetURIForKeyword([MarshalAs(UnmanagedType.LPStruct)] nsAString keyword);
		
		/// <summary>
        /// Adds a bookmark observer. If ownsWeak is false, the bookmark service will
        /// keep an owning reference to the observer.  If ownsWeak is true, then
        /// aObserver must implement nsISupportsWeakReference, and the bookmark
        /// service will keep a weak reference to the observer.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddObserver([MarshalAs(UnmanagedType.Interface)] nsINavBookmarkObserver observer, bool ownsWeak);
		
		/// <summary>
        /// Removes a bookmark observer.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveObserver([MarshalAs(UnmanagedType.Interface)] nsINavBookmarkObserver observer);
		
		/// <summary>
        /// Runs the passed callback inside of a database transaction.
        /// Use this when a lot of things are about to change, for example
        /// adding or deleting a large number of bookmark items. Calls can
        /// be nested. Observers are notified when batches begin and end, via
        /// nsINavBookmarkObserver.onBeginUpdateBatch/onEndUpdateBatch.
        ///
        /// @param aCallback
        /// nsINavHistoryBatchCallback interface to call.
        /// @param aUserData
        /// Opaque parameter passed to nsINavBookmarksBatchCallback
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RunInBatchMode([MarshalAs(UnmanagedType.Interface)] nsINavHistoryBatchCallback aCallback, [MarshalAs(UnmanagedType.Interface)] nsISupports aUserData);
	}
}
