// --------------------------------------------------------------------------------------------
// Copyright (c) 2011, SIL International. All rights reserved.
// 
// File: nsICertOverrideService.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file nsICertOverrideService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Skybound.Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	
	
	/// <summary>nsICertOverrideService </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("31738d2a-77d3-4359-84c9-4be2f38fb8c5")]
	public interface nsICertOverrideService
	{
		
		/// <summary>Member RememberValidityOverride </summary>
		/// <param name='aHostName'> </param>
		/// <param name='aPort'> </param>
		/// <param name='aCert'> </param>
		/// <param name='aOverrideBits'> </param>
		/// <param name='aTemporary'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RememberValidityOverride([MarshalAs(UnmanagedType.LPStruct)] nsAString  aHostName, System.Int32  aPort, [MarshalAs(UnmanagedType.Interface)] nsIX509Cert  aCert, System.UInt32  aOverrideBits, System.Boolean  aTemporary);
		
		/// <summary>Member HasMatchingOverride </summary>
		/// <param name='aHostName'> </param>
		/// <param name='aPort'> </param>
		/// <param name='aCert'> </param>
		/// <param name='aOverrideBits'> </param>
		/// <param name='aIsTemporary'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool HasMatchingOverride([MarshalAs(UnmanagedType.LPStruct)] nsAString  aHostName, System.Int32  aPort, [MarshalAs(UnmanagedType.Interface)] nsIX509Cert  aCert, out System.UInt32  aOverrideBits, out System.Boolean  aIsTemporary);
		
		/// <summary>Member GetValidityOverride </summary>
		/// <param name='aHostName'> </param>
		/// <param name='aPort'> </param>
		/// <param name='aHashAlg'> </param>
		/// <param name='aFingerprint'> </param>
		/// <param name='aOverrideBits'> </param>
		/// <param name='aIsTemporary'> </param>
		/// <returns>A System.Boolean</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetValidityOverride([MarshalAs(UnmanagedType.LPStruct)] nsAString  aHostName, System.Int32  aPort, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aHashAlg, [MarshalAs(UnmanagedType.LPStruct)] nsAString  aFingerprint, out System.UInt32  aOverrideBits, out System.Boolean  aIsTemporary);
		
		/// <summary>Member ClearValidityOverride </summary>
		/// <param name='aHostName'> </param>
		/// <param name='aPort'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ClearValidityOverride([MarshalAs(UnmanagedType.LPStruct)] nsAString  aHostName, System.Int32  aPort);
		
		/// <summary>Member GetAllOverrideHostsWithPorts </summary>
		/// <param name='aCount'> </param>
		/// <param name='aHostsWithPortsArray'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetAllOverrideHostsWithPorts(out System.UInt32  aCount, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Skybound.Gecko.XpCom.WStringMarshaler", SizeParamIndex=0)] out string aHostsWithPortsArray);
		
		/// <summary>Member IsCertUsedForOverrides </summary>
		/// <param name='aCert'> </param>
		/// <param name='aCheckTemporaries'> </param>
		/// <param name='aCheckPermanents'> </param>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint IsCertUsedForOverrides([MarshalAs(UnmanagedType.Interface)] nsIX509Cert  aCert, System.Boolean  aCheckTemporaries, System.Boolean  aCheckPermanents);
	}
}
